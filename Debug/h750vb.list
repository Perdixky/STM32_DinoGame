
h750vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08008e68  08008e68  00018e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  080092a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  240001d8  08009480  000201d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240003e8  08009480  000203e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 10 .debug_info   000127f3  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000271a  00000000  00000000  00032a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001090  00000000  00000000  00035158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ccb  00000000  00000000  000361e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003f6f  00000000  00000000  00036eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f52  00000000  00000000  0003ae22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fc5c  00000000  00000000  00052d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000584c  00000000  00000000  001b29d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  001b821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e50 	.word	0x08008e50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08008e50 	.word	0x08008e50

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA2   ------> USART2_TX
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <MX_GPIO_Init+0x10c>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a3b      	ldr	r2, [pc, #236]	; (8000884 <MX_GPIO_Init+0x10c>)
 8000796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0x10c>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80007ee:	4826      	ldr	r0, [pc, #152]	; (8000888 <MX_GPIO_Init+0x110>)
 80007f0:	f000 ff2c 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f4:	2304      	movs	r3, #4
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000804:	2307      	movs	r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	481f      	ldr	r0, [pc, #124]	; (800088c <MX_GPIO_Init+0x114>)
 8000810:	f000 fd6c 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800081a:	2311      	movs	r3, #17
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <MX_GPIO_Init+0x110>)
 800082e:	f000 fd5d 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000838:	2311      	movs	r3, #17
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <MX_GPIO_Init+0x110>)
 800084c:	f000 fd4e 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_GPIO_Init+0x114>)
 8000868:	f000 fd40 	bl	80012ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2028      	movs	r0, #40	; 0x28
 8000872:	f000 fd06 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f000 fd1d 	bl	80012b6 <HAL_NVIC_EnableIRQ>

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58024400 	.word	0x58024400
 8000888:	58020400 	.word	0x58020400
 800088c:	58020000 	.word	0x58020000

08000890 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f000 fefc 	bl	80016c8 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f90f 	bl	8000af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f000 ff83 	bl	80017e8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f906 	bl	8000af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f000 ffc5 	bl	800187e <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f8fd 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240001f4 	.word	0x240001f4
 8000908:	40005400 	.word	0x40005400
 800090c:	00401959 	.word	0x00401959

08000910 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ba      	sub	sp, #232	; 0xe8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	22c0      	movs	r2, #192	; 0xc0
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 ffd0 	bl	80058d6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_I2C_MspInit+0xc4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d145      	bne.n	80009cc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000940:	f04f 0208 	mov.w	r2, #8
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4618      	mov	r0, r3
 8000958:	f001 ffb2 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000962:	f000 f8c9 	bl	8000af8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000984:	23c0      	movs	r3, #192	; 0xc0
 8000986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <HAL_I2C_MspInit+0xcc>)
 80009aa:	f000 fc9f 	bl	80012ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	37e8      	adds	r7, #232	; 0xe8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005400 	.word	0x40005400
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020400 	.word	0x58020400

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fad4 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f808 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f7ff fec4 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009f0:	f7ff ff4e 	bl	8000890 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009f4:	f000 fa2a 	bl	8000e4c <MX_TIM3_Init>
//  float BMP180_GetAlt (int oss);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <main+0x18>
	...

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 ff63 	bl	80058d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 ff5d 	bl	80058d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 ff7b 	bl	8001918 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <SystemClock_Config+0xf4>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <SystemClock_Config+0xf4>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a32:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <SystemClock_Config+0xf4>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <SystemClock_Config+0xf8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a44:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <SystemClock_Config+0xf8>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemClock_Config+0xf8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a58:	bf00      	nop
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <SystemClock_Config+0xf8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a66:	d1f8      	bne.n	8000a5a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 ff74 	bl	800198c <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000aaa:	f000 f825 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	233f      	movs	r3, #63	; 0x3f
 8000ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000ac2:	2350      	movs	r3, #80	; 0x50
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000acc:	2340      	movs	r3, #64	; 0x40
 8000ace:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 fbb3 	bl	8002240 <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ae0:	f000 f80a 	bl	8000af8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ae4:	f001 fd62 	bl	80025ac <HAL_RCC_EnableCSS>
}
 8000ae8:	bf00      	nop
 8000aea:	3770      	adds	r7, #112	; 0x70
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58000400 	.word	0x58000400
 8000af4:	58024800 	.word	0x58024800

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x30>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	58024400 	.word	0x58024400

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 fa76 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM3_IRQHandler+0x10>)
 8000b92:	f003 fa5a 	bl	800404a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400024c 	.word	0x2400024c

08000ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ba4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ba8:	f000 fd69 	bl	800167e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_kill>:

int _kill(int pid, int sig)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bca:	f004 fee7 	bl	800599c <__errno>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2216      	movs	r2, #22
 8000bd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_exit>:

void _exit (int status)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffe7 	bl	8000bc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf2:	e7fe      	b.n	8000bf2 <_exit+0x12>

08000bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fe4c 	bl	800599c <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24080000 	.word	0x24080000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	24000248 	.word	0x24000248
 8000d38:	240003e8 	.word	0x240003e8

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <SystemInit+0xe4>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <SystemInit+0xe4>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d50:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <SystemInit+0xe8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	2b06      	cmp	r3, #6
 8000d5a:	d807      	bhi.n	8000d6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d5c:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <SystemInit+0xe8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 030f 	bic.w	r3, r3, #15
 8000d64:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <SystemInit+0xe8>)
 8000d66:	f043 0307 	orr.w	r3, r3, #7
 8000d6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <SystemInit+0xec>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <SystemInit+0xec>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <SystemInit+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <SystemInit+0xec>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4929      	ldr	r1, [pc, #164]	; (8000e28 <SystemInit+0xec>)
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <SystemInit+0xf0>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <SystemInit+0xe8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <SystemInit+0xe8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 030f 	bic.w	r3, r3, #15
 8000d9e:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <SystemInit+0xe8>)
 8000da0:	f043 0307 	orr.w	r3, r3, #7
 8000da4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <SystemInit+0xec>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <SystemInit+0xec>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SystemInit+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <SystemInit+0xec>)
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <SystemInit+0xf4>)
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <SystemInit+0xec>)
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <SystemInit+0xf8>)
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <SystemInit+0xec>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <SystemInit+0xfc>)
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <SystemInit+0xec>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <SystemInit+0xec>)
 8000dd2:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <SystemInit+0xfc>)
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <SystemInit+0xec>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <SystemInit+0xec>)
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <SystemInit+0xfc>)
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <SystemInit+0xec>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <SystemInit+0xec>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <SystemInit+0xec>)
 8000dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <SystemInit+0xec>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <SystemInit+0x100>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SystemInit+0x104>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e06:	d202      	bcs.n	8000e0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <SystemInit+0x108>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <SystemInit+0x10c>)
 8000e10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	52002000 	.word	0x52002000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e30:	02020200 	.word	0x02020200
 8000e34:	01ff0000 	.word	0x01ff0000
 8000e38:	01010280 	.word	0x01010280
 8000e3c:	5c001000 	.word	0x5c001000
 8000e40:	ffff0000 	.word	0xffff0000
 8000e44:	51008108 	.word	0x51008108
 8000e48:	52004000 	.word	0x52004000

08000e4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <MX_TIM3_Init+0x9c>)
 8000e6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e72:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e80:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e94:	f003 f882 	bl	8003f9c <HAL_TIM_Base_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000e9e:	f7ff fe2b 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000eb0:	f003 f9ea 	bl	8004288 <HAL_TIM_ConfigClockSource>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000eba:	f7ff fe1d 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000ecc:	f003 fc3e 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000ed6:	f7ff fe0f 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400024c 	.word	0x2400024c
 8000ee8:	40000400 	.word	0x40000400

08000eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d116      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	201d      	movs	r0, #29
 8000f22:	f000 f9ae 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f26:	201d      	movs	r0, #29
 8000f28:	f000 f9c5 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40000400 	.word	0x40000400
 8000f38:	58024400 	.word	0x58024400

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff fefc 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f004 fd1d 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fd37 	bl	80009e0 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000f80:	080092a8 	.word	0x080092a8
  ldr r2, =_sbss
 8000f84:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000f88:	240003e8 	.word	0x240003e8

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f968 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f001 fb16 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f814 	bl	8001008 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fd8b 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	08008e68 	.word	0x08008e68
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e021      	b.n	8001060 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_InitTick+0x64>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f94d 	bl	80012d2 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f917 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x68>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2400000c 	.word	0x2400000c
 800106c:	24000000 	.word	0x24000000
 8001070:	24000008 	.word	0x24000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2400000c 	.word	0x2400000c
 8001098:	24000298 	.word	0x24000298

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	24000298 	.word	0x24000298

080010b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetREVID+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	5c001000 	.word	0x5c001000

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff40 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff33 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa4 	bl	8001228 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012fa:	4b89      	ldr	r3, [pc, #548]	; (8001520 <HAL_GPIO_Init+0x234>)
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012fe:	e194      	b.n	800162a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8186 	beq.w	8001624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x44>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 0201 	and.w	r2, r3, #1
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80e0 	beq.w	8001624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x238>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x23c>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_GPIO_Init+0x240>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d052      	beq.n	8001554 <HAL_GPIO_Init+0x268>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x244>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x248>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x22a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_GPIO_Init+0x24c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_GPIO_Init+0x250>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x254>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x258>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x25c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_GPIO_Init+0x260>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_GPIO_Init+0x264>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x20e>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e02d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e02b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fe:	2308      	movs	r3, #8
 8001500:	e029      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001502:	2307      	movs	r3, #7
 8001504:	e027      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001506:	2306      	movs	r3, #6
 8001508:	e025      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150a:	2305      	movs	r3, #5
 800150c:	e023      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150e:	2304      	movs	r3, #4
 8001510:	e021      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001512:	2303      	movs	r3, #3
 8001514:	e01f      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001516:	2302      	movs	r3, #2
 8001518:	e01d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151a:	2301      	movs	r3, #1
 800151c:	e01b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151e:	bf00      	nop
 8001520:	58000080 	.word	0x58000080
 8001524:	58024400 	.word	0x58024400
 8001528:	58000400 	.word	0x58000400
 800152c:	58020000 	.word	0x58020000
 8001530:	58020400 	.word	0x58020400
 8001534:	58020800 	.word	0x58020800
 8001538:	58020c00 	.word	0x58020c00
 800153c:	58021000 	.word	0x58021000
 8001540:	58021400 	.word	0x58021400
 8001544:	58021800 	.word	0x58021800
 8001548:	58021c00 	.word	0x58021c00
 800154c:	58022000 	.word	0x58022000
 8001550:	58022400 	.word	0x58022400
 8001554:	2300      	movs	r3, #0
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001566:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x35c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800159a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f ae63 	bne.w	8001300 <HAL_GPIO_Init+0x14>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	58000400 	.word	0x58000400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f804 	bl	80016b2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e07f      	b.n	80017da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff f90e 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e006      	b.n	8001750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800174e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d104      	bne.n	8001762 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_I2C_Init+0x11c>)
 800176e:	430b      	orrs	r3, r1
 8001770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69d9      	ldr	r1, [r3, #28]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	02008000 	.word	0x02008000

080017e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d138      	bne.n	8001870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001808:	2302      	movs	r3, #2
 800180a:	e032      	b.n	8001872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	; 0x24
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800183a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001870:	2302      	movs	r3, #2
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b20      	cmp	r3, #32
 8001892:	d139      	bne.n	8001908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800189e:	2302      	movs	r3, #2
 80018a0:	e033      	b.n	800190a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2224      	movs	r2, #36	; 0x24
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_PWREx_ConfigSupply+0x70>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d00a      	beq.n	8001942 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_PWREx_ConfigSupply+0x70>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e01f      	b.n	800197e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e01d      	b.n	800197e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_PWREx_ConfigSupply+0x70>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	490f      	ldr	r1, [pc, #60]	; (8001988 <HAL_PWREx_ConfigSupply+0x70>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4313      	orrs	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001952:	f7ff fba3 	bl	800109c <HAL_GetTick>
 8001956:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001958:	e009      	b.n	800196e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800195a:	f7ff fb9f 	bl	800109c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001968:	d901      	bls.n	800196e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e007      	b.n	800197e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_PWREx_ConfigSupply+0x70>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800197a:	d1ee      	bne.n	800195a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	58024800 	.word	0x58024800

0800198c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 bc48 	b.w	8002230 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8088 	beq.w	8001abe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ae:	4b99      	ldr	r3, [pc, #612]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d007      	beq.n	80019d4 <HAL_RCC_OscConfig+0x48>
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	2b18      	cmp	r3, #24
 80019c8:	d111      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
 80019ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <HAL_RCC_OscConfig+0x130>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d169      	bne.n	8001abc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f000 bc21 	b.w	8002230 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x7a>
 80019f8:	4b86      	ldr	r3, [pc, #536]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a85      	ldr	r2, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e02e      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x9c>
 8001a0e:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a80      	ldr	r2, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7d      	ldr	r2, [pc, #500]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a32:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a74      	ldr	r2, [pc, #464]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a4c:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb16 	bl	800109c <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb12 	bl	800109c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e3d4      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb02 	bl	800109c <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fafe 	bl	800109c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e3c0      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aae:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x110>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80ca 	beq.w	8001c60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001acc:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ad4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ad6:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_RCC_OscConfig+0x166>
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2b18      	cmp	r3, #24
 8001ae6:	d156      	bne.n	8001b96 <HAL_RCC_OscConfig+0x20a>
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d151      	bne.n	8001b96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af2:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e392      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b0a:	4b42      	ldr	r3, [pc, #264]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0219 	bic.w	r2, r3, #25
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	493f      	ldr	r1, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fabe 	bl	800109c <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff faba 	bl	800109c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e37c      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	f7ff fab7 	bl	80010b4 <HAL_GetREVID>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d817      	bhi.n	8001b80 <HAL_RCC_OscConfig+0x1f4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b40      	cmp	r3, #64	; 0x40
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x1de>
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	e07a      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4926      	ldr	r1, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7e:	e06f      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e064      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d047      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0219 	bic.w	r2, r3, #25
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa74 	bl	800109c <HAL_GetTick>
 8001bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fa70 	bl	800109c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e332      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	f7ff fa6d 	bl	80010b4 <HAL_GetREVID>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d819      	bhi.n	8001c18 <HAL_RCC_OscConfig+0x28c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d108      	bne.n	8001bfe <HAL_RCC_OscConfig+0x272>
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	6053      	str	r3, [r2, #4]
 8001bfc:	e030      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	031b      	lsls	r3, r3, #12
 8001c0c:	4901      	ldr	r1, [pc, #4]	; (8001c14 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e025      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
 8001c14:	58024400 	.word	0x58024400
 8001c18:	4b9a      	ldr	r3, [pc, #616]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4997      	ldr	r1, [pc, #604]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b95      	ldr	r3, [pc, #596]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a94      	ldr	r2, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fa2f 	bl	800109c <HAL_GetTick>
 8001c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa2b 	bl	800109c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2ed      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c54:	4b8b      	ldr	r3, [pc, #556]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80a9 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c78:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d007      	beq.n	8001c94 <HAL_RCC_OscConfig+0x308>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b18      	cmp	r3, #24
 8001c88:	d13a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x374>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d135      	bne.n	8001d00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c94:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x320>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e2c1      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cac:	f7ff fa02 	bl	80010b4 <HAL_GetREVID>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d817      	bhi.n	8001cea <HAL_RCC_OscConfig+0x35e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x348>
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cd0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd2:	e075      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	069b      	lsls	r3, r3, #26
 8001ce2:	4968      	ldr	r1, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ce8:	e06a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	061b      	lsls	r3, r3, #24
 8001cf8:	4962      	ldr	r1, [pc, #392]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cfe:	e05f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d042      	beq.n	8001d8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f9c2 	bl	800109c <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f9be 	bl	800109c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e280      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d2e:	4b55      	ldr	r3, [pc, #340]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3a:	f7ff f9bb 	bl	80010b4 <HAL_GetREVID>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d817      	bhi.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3d6>
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d58:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d5e:	6053      	str	r3, [r2, #4]
 8001d60:	e02e      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	4944      	ldr	r1, [pc, #272]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
 8001d76:	e023      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	493f      	ldr	r1, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f97f 	bl	800109c <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001da2:	f7ff f97b 	bl	800109c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e23d      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d036      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d019      	beq.n	8001e08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff f95c 	bl	800109c <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff f958 	bl	800109c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e21a      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x45c>
 8001e06:	e018      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff f942 	bl	800109c <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f93e 	bl	800109c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e200      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d039      	beq.n	8001eba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f91f 	bl	800109c <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e62:	f7ff f91b 	bl	800109c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1dd      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
 8001e82:	bf00      	nop
 8001e84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e88:	4b9b      	ldr	r3, [pc, #620]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a9a      	ldr	r2, [pc, #616]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e94:	f7ff f902 	bl	800109c <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9c:	f7ff f8fe 	bl	800109c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1c0      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eae:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8081 	beq.w	8001fca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <HAL_RCC_OscConfig+0x770>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8b      	ldr	r2, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x770>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed4:	f7ff f8e2 	bl	800109c <HAL_GetTick>
 8001ed8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff f8de 	bl	800109c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1a0      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eee:	4b83      	ldr	r3, [pc, #524]	; (80020fc <HAL_RCC_OscConfig+0x770>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x584>
 8001f02:	4b7d      	ldr	r3, [pc, #500]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a7c      	ldr	r2, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	e02d      	b.n	8001f6c <HAL_RCC_OscConfig+0x5e0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5a6>
 8001f18:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a76      	ldr	r2, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
 8001f24:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a73      	ldr	r2, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	f023 0304 	bic.w	r3, r3, #4
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x5e0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c8>
 8001f3a:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x5e0>
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a67      	ldr	r2, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a64      	ldr	r2, [pc, #400]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff f892 	bl	800109c <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f88e 	bl	800109c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e14e      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f92:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x5f0>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f87c 	bl	800109c <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f878 	bl	800109c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e138      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 812d 	beq.w	800222e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fd4:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	f000 80bd 	beq.w	800215c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	f040 809e 	bne.w	8002128 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8001ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f850 	bl	800109c <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f84c 	bl	800109c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e10e      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x774>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	430a      	orrs	r2, r1
 8002032:	4931      	ldr	r1, [pc, #196]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	628b      	str	r3, [r1, #40]	; 0x28
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	3b01      	subs	r3, #1
 800203e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	3b01      	subs	r3, #1
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	b29b      	uxth	r3, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	3b01      	subs	r3, #1
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	3b01      	subs	r3, #1
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002068:	4923      	ldr	r1, [pc, #140]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 800207c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002086:	00d2      	lsls	r2, r2, #3
 8002088:	491b      	ldr	r1, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 800208a:	4313      	orrs	r3, r2
 800208c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	f023 020c 	bic.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4917      	ldr	r1, [pc, #92]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f023 0202 	bic.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe ffd5 	bl	800109c <HAL_GetTick>
 80020f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f4:	e011      	b.n	800211a <HAL_RCC_OscConfig+0x78e>
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58024800 	.word	0x58024800
 8002100:	fffffc0c 	.word	0xfffffc0c
 8002104:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe ffc8 	bl	800109c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e08a      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x77c>
 8002126:	e082      	b.n	800222e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 800212e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ffb2 	bl	800109c <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe ffae 	bl	800109c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e070      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x7b0>
 800215a:	e068      	b.n	800222e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b01      	cmp	r3, #1
 800216e:	d031      	beq.n	80021d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0203 	and.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d12a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d122      	bne.n	80021d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0a5b      	lsrs	r3, r3, #9
 80021a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d111      	bne.n	80021d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d108      	bne.n	80021d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e02b      	b.n	8002230 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d01f      	beq.n	800222e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021fa:	f7fe ff4f 	bl	800109c <HAL_GetTick>
 80021fe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002200:	bf00      	nop
 8002202:	f7fe ff4b 	bl	800109c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	4293      	cmp	r3, r2
 800220c:	d0f9      	beq.n	8002202 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_OscConfig+0x8b0>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800221a:	00d2      	lsls	r2, r2, #3
 800221c:	4906      	ldr	r1, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 800221e:	4313      	orrs	r3, r2
 8002220:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_RCC_OscConfig+0x8ac>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58024400 	.word	0x58024400
 800223c:	ffff0007 	.word	0xffff0007

08002240 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e19c      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b8a      	ldr	r3, [pc, #552]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b87      	ldr	r3, [pc, #540]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	4985      	ldr	r1, [pc, #532]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e184      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022a0:	4b78      	ldr	r3, [pc, #480]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4975      	ldr	r1, [pc, #468]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	496a      	ldr	r1, [pc, #424]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4b64      	ldr	r3, [pc, #400]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d908      	bls.n	800230e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022fc:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	495e      	ldr	r1, [pc, #376]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800230a:	4313      	orrs	r3, r2
 800230c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002326:	429a      	cmp	r2, r3
 8002328:	d908      	bls.n	800233c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4953      	ldr	r1, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002338:	4313      	orrs	r3, r2
 800233a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	429a      	cmp	r2, r3
 8002356:	d908      	bls.n	800236a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f023 020f 	bic.w	r2, r3, #15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4947      	ldr	r1, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002366:	4313      	orrs	r3, r2
 8002368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d055      	beq.n	8002422 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4940      	ldr	r1, [pc, #256]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002384:	4313      	orrs	r3, r2
 8002386:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d121      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0f6      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d115      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0ea      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0de      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d6      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f023 0207 	bic.w	r2, r3, #7
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f2:	f7fe fe53 	bl	800109c <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fe4f 	bl	800109c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0be      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	429a      	cmp	r2, r3
 8002420:	d1eb      	bne.n	80023fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	429a      	cmp	r2, r3
 800243c:	d208      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800244c:	4313      	orrs	r3, r2
 800244e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d214      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 020f 	bic.w	r2, r3, #15
 8002466:	4906      	ldr	r1, [pc, #24]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e086      	b.n	800258e <HAL_RCC_ClockConfig+0x34e>
 8002480:	52002000 	.word	0x52002000
 8002484:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d208      	bcs.n	80024b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4939      	ldr	r1, [pc, #228]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d208      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	492e      	ldr	r1, [pc, #184]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d208      	bcs.n	8002512 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4922      	ldr	r1, [pc, #136]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 800250e:	4313      	orrs	r3, r2
 8002510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800252a:	429a      	cmp	r2, r3
 800252c:	d208      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4917      	ldr	r1, [pc, #92]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 800253c:	4313      	orrs	r3, r2
 800253e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002540:	f000 f844 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x35c>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x358>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a0d      	ldr	r2, [pc, #52]	; (800259c <HAL_RCC_ClockConfig+0x35c>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_RCC_ClockConfig+0x360>)
 8002576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x364>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x368>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fd40 	bl	8001008 <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	58024400 	.word	0x58024400
 800259c:	08008e68 	.word	0x08008e68
 80025a0:	24000004 	.word	0x24000004
 80025a4:	24000000 	.word	0x24000000
 80025a8:	24000008 	.word	0x24000008

080025ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_EnableCSS+0x1c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_EnableCSS+0x1c>)
 80025b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d2:	4bb3      	ldr	r3, [pc, #716]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025da:	2b18      	cmp	r3, #24
 80025dc:	f200 8155 	bhi.w	800288a <HAL_RCC_GetSysClockFreq+0x2be>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	0800264d 	.word	0x0800264d
 80025ec:	0800288b 	.word	0x0800288b
 80025f0:	0800288b 	.word	0x0800288b
 80025f4:	0800288b 	.word	0x0800288b
 80025f8:	0800288b 	.word	0x0800288b
 80025fc:	0800288b 	.word	0x0800288b
 8002600:	0800288b 	.word	0x0800288b
 8002604:	0800288b 	.word	0x0800288b
 8002608:	08002673 	.word	0x08002673
 800260c:	0800288b 	.word	0x0800288b
 8002610:	0800288b 	.word	0x0800288b
 8002614:	0800288b 	.word	0x0800288b
 8002618:	0800288b 	.word	0x0800288b
 800261c:	0800288b 	.word	0x0800288b
 8002620:	0800288b 	.word	0x0800288b
 8002624:	0800288b 	.word	0x0800288b
 8002628:	08002679 	.word	0x08002679
 800262c:	0800288b 	.word	0x0800288b
 8002630:	0800288b 	.word	0x0800288b
 8002634:	0800288b 	.word	0x0800288b
 8002638:	0800288b 	.word	0x0800288b
 800263c:	0800288b 	.word	0x0800288b
 8002640:	0800288b 	.word	0x0800288b
 8002644:	0800288b 	.word	0x0800288b
 8002648:	0800267f 	.word	0x0800267f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800264c:	4b94      	ldr	r3, [pc, #592]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002658:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	4a90      	ldr	r2, [pc, #576]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800266a:	e111      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800266c:	4b8d      	ldr	r3, [pc, #564]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800266e:	61bb      	str	r3, [r7, #24]
      break;
 8002670:	e10e      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002672:	4b8d      	ldr	r3, [pc, #564]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002674:	61bb      	str	r3, [r7, #24]
      break;
 8002676:	e10b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002678:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800267a:	61bb      	str	r3, [r7, #24]
      break;
 800267c:	e108      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002688:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002692:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002694:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800269e:	4b80      	ldr	r3, [pc, #512]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80e1 	beq.w	8002884 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	f000 8083 	beq.w	80027d0 <HAL_RCC_GetSysClockFreq+0x204>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	f200 80a1 	bhi.w	8002814 <HAL_RCC_GetSysClockFreq+0x248>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x114>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d056      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x1c0>
 80026de:	e099      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d02d      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026ec:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	4a6b      	ldr	r2, [pc, #428]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002716:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002726:	ed97 6a02 	vldr	s12, [r7, #8]
 800272a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800272e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002746:	e087      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002752:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276a:	ed97 6a02 	vldr	s12, [r7, #8]
 800276e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800277e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800278a:	e065      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002796:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800279a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ce:	e043      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80027de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002812:	e021      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002836:	ed97 6a02 	vldr	s12, [r7, #8]
 800283a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800283e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002856:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	0a5b      	lsrs	r3, r3, #9
 800285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002862:	3301      	adds	r3, #1
 8002864:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002870:	edd7 6a07 	vldr	s13, [r7, #28]
 8002874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287c:	ee17 3a90 	vmov	r3, s15
 8002880:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002882:	e005      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
      break;
 8002888:	e002      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800288c:	61bb      	str	r3, [r7, #24]
      break;
 800288e:	bf00      	nop
  }

  return sysclockfreq;
 8002890:	69bb      	ldr	r3, [r7, #24]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	58024400 	.word	0x58024400
 80028a4:	03d09000 	.word	0x03d09000
 80028a8:	003d0900 	.word	0x003d0900
 80028ac:	017d7840 	.word	0x017d7840
 80028b0:	46000000 	.word	0x46000000
 80028b4:	4c742400 	.word	0x4c742400
 80028b8:	4a742400 	.word	0x4a742400
 80028bc:	4bbebc20 	.word	0x4bbebc20

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b0ca      	sub	sp, #296	; 0x128
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80028e4:	2500      	movs	r5, #0
 80028e6:	ea54 0305 	orrs.w	r3, r4, r5
 80028ea:	d049      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028f6:	d02f      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80028f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028fc:	d828      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002902:	d01a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002908:	d822      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800290e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002912:	d007      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002914:	e01c      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002916:	4bb8      	ldr	r3, [pc, #736]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	4ab7      	ldr	r2, [pc, #732]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002922:	e01a      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002928:	3308      	adds	r3, #8
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f9d1 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002938:	e00f      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800293a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293e:	3328      	adds	r3, #40	; 0x28
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fa78 	bl	8003e38 <RCCEx_PLL3_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800294e:	e004      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002956:	e000      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002962:	4ba5      	ldr	r3, [pc, #660]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002966:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002970:	4aa1      	ldr	r2, [pc, #644]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002972:	430b      	orrs	r3, r1
 8002974:	6513      	str	r3, [r2, #80]	; 0x50
 8002976:	e003      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800297c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800298c:	f04f 0900 	mov.w	r9, #0
 8002990:	ea58 0309 	orrs.w	r3, r8, r9
 8002994:	d047      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	2b04      	cmp	r3, #4
 800299e:	d82a      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029bd 	.word	0x080029bd
 80029ac:	080029cb 	.word	0x080029cb
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029ff 	.word	0x080029ff
 80029b8:	080029ff 	.word	0x080029ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4a8d      	ldr	r2, [pc, #564]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029c8:	e01a      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ce:	3308      	adds	r3, #8
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f97e 	bl	8003cd4 <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029de:	e00f      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e4:	3328      	adds	r3, #40	; 0x28
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fa25 	bl	8003e38 <RCCEx_PLL3_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f4:	e004      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80029fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a08:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	f023 0107 	bic.w	r1, r3, #7
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	4a78      	ldr	r2, [pc, #480]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a1c:	e003      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002a32:	f04f 0b00 	mov.w	fp, #0
 8002a36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a3a:	d04c      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a46:	d030      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4c:	d829      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a50:	d02d      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a52:	2bc0      	cmp	r3, #192	; 0xc0
 8002a54:	d825      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d018      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d821      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d007      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 f928 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a90:	3328      	adds	r3, #40	; 0x28
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 f9cf 	bl	8003e38 <RCCEx_PLL3_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	4a4c      	ldr	r2, [pc, #304]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6513      	str	r3, [r2, #80]	; 0x50
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002ae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002aec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002af0:	460b      	mov	r3, r1
 8002af2:	4313      	orrs	r3, r2
 8002af4:	d053      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b02:	d035      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b08:	d82e      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b0e:	d031      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b14:	d828      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d01a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d822      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d007      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2e:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	4a31      	ldr	r2, [pc, #196]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b40:	3308      	adds	r3, #8
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f8c5 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b50:	e011      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b56:	3328      	adds	r3, #40	; 0x28
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 f96c 	bl	8003e38 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b66:	e006      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002baa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	d056      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bca:	d038      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd0:	d831      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bd6:	d034      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bdc:	d82b      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be2:	d01d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be8:	d825      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002bf4:	e01f      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	4aa1      	ldr	r2, [pc, #644]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c08:	e01c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c0e:	3308      	adds	r3, #8
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f85e 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c24:	3328      	adds	r3, #40	; 0x28
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 f905 	bl	8003e38 <RCCEx_PLL3_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c4c:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c5c:	4a8a      	ldr	r2, [pc, #552]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002c82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002c86:	460b      	mov	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	d03a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	2b30      	cmp	r3, #48	; 0x30
 8002c94:	d01f      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c96:	2b30      	cmp	r3, #48	; 0x30
 8002c98:	d819      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d815      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d019      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d111      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002caa:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4a76      	ldr	r2, [pc, #472]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cb6:	e011      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 f807 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ccc:	e006      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	4a65      	ldr	r2, [pc, #404]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	d051      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d035      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d32:	d82e      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d38:	d031      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d3e:	d828      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d44:	d01a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d822      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d007      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d56:	e01c      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d64:	e01c      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 ffb0 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d7a:	e011      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d80:	3328      	adds	r3, #40	; 0x28
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 f857 	bl	8003e38 <RCCEx_PLL3_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d90:	e006      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002da8:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	4a34      	ldr	r2, [pc, #208]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6513      	str	r3, [r2, #80]	; 0x50
 8002dbc:	e003      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ddc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002de0:	460b      	mov	r3, r1
 8002de2:	4313      	orrs	r3, r2
 8002de4:	d056      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d033      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df6:	d82c      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfc:	d02f      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e02:	d826      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e08:	d02b      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e0e:	d820      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e14:	d012      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e1a:	d81a      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d022      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d115      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 ff50 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e3a:	e015      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e40:	3328      	adds	r3, #40	; 0x28
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fff7 	bl	8003e38 <RCCEx_PLL3_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e50:	e00a      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7e:	4a02      	ldr	r2, [pc, #8]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6513      	str	r3, [r2, #80]	; 0x50
 8002e84:	e006      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e86:	bf00      	nop
 8002e88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eaa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d055      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d033      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec6:	d82c      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d02f      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d826      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ed8:	d02b      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ede:	d820      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee4:	d012      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eea:	d81a      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef4:	d115      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efa:	3308      	adds	r3, #8
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fee8 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f0a:	e015      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f10:	3328      	adds	r3, #40	; 0x28
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff8f 	bl	8003e38 <RCCEx_PLL3_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f20:	e00a      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f28:	e006      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f2a:	bf00      	nop
 8002f2c:	e004      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f40:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f50:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
 8002f56:	e003      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	d037      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f8a:	d00e      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f90:	d816      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9a:	d111      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4a8b      	ldr	r2, [pc, #556]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fa8:	e00f      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fae:	3308      	adds	r3, #8
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fe8e 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fbe:	e004      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a7b      	ldr	r2, [pc, #492]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6513      	str	r3, [r2, #80]	; 0x50
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003006:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800300a:	460b      	mov	r3, r1
 800300c:	4313      	orrs	r3, r2
 800300e:	d039      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	2b03      	cmp	r3, #3
 8003018:	d81c      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	0800305d 	.word	0x0800305d
 8003024:	08003031 	.word	0x08003031
 8003028:	0800303f 	.word	0x0800303f
 800302c:	0800305d 	.word	0x0800305d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003030:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a66      	ldr	r2, [pc, #408]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800303c:	e00f      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003042:	3308      	adds	r3, #8
 8003044:	2102      	movs	r1, #2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fe44 	bl	8003cd4 <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	f023 0103 	bic.w	r1, r3, #3
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003076:	430b      	orrs	r3, r1
 8003078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800309a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800309e:	460b      	mov	r3, r1
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f000 809f 	beq.w	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a6:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fd fff3 	bl	800109c <HAL_GetTick>
 80030b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ba:	e00b      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fd ffee 	bl	800109c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	; 0x64
 80030ca:	d903      	bls.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ed      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80030e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d179      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030f4:	4053      	eors	r3, r2
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d118      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd ffb0 	bl	800109c <HAL_GetTick>
 800313c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003140:	e00d      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd ffab 	bl	800109c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800314c:	1ad2      	subs	r2, r2, r3
 800314e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003152:	429a      	cmp	r2, r3
 8003154:	d903      	bls.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800315c:	e005      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0eb      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800316a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800316e:	2b00      	cmp	r3, #0
 8003170:	d129      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003182:	d10e      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800318c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003190:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003194:	091a      	lsrs	r2, r3, #4
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003198:	4013      	ands	r3, r2
 800319a:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800319c:	430b      	orrs	r3, r1
 800319e:	6113      	str	r3, [r2, #16]
 80031a0:	e005      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031ac:	6113      	str	r3, [r2, #16]
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e00e      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80031ce:	e009      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80031d0:	58024400 	.word	0x58024400
 80031d4:	58024800 	.word	0x58024800
 80031d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f002 0301 	and.w	r3, r2, #1
 80031f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	f000 8089 	beq.w	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320c:	2b28      	cmp	r3, #40	; 0x28
 800320e:	d86b      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	080032f1 	.word	0x080032f1
 800321c:	080032e9 	.word	0x080032e9
 8003220:	080032e9 	.word	0x080032e9
 8003224:	080032e9 	.word	0x080032e9
 8003228:	080032e9 	.word	0x080032e9
 800322c:	080032e9 	.word	0x080032e9
 8003230:	080032e9 	.word	0x080032e9
 8003234:	080032e9 	.word	0x080032e9
 8003238:	080032bd 	.word	0x080032bd
 800323c:	080032e9 	.word	0x080032e9
 8003240:	080032e9 	.word	0x080032e9
 8003244:	080032e9 	.word	0x080032e9
 8003248:	080032e9 	.word	0x080032e9
 800324c:	080032e9 	.word	0x080032e9
 8003250:	080032e9 	.word	0x080032e9
 8003254:	080032e9 	.word	0x080032e9
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032e9 	.word	0x080032e9
 8003260:	080032e9 	.word	0x080032e9
 8003264:	080032e9 	.word	0x080032e9
 8003268:	080032e9 	.word	0x080032e9
 800326c:	080032e9 	.word	0x080032e9
 8003270:	080032e9 	.word	0x080032e9
 8003274:	080032e9 	.word	0x080032e9
 8003278:	080032f1 	.word	0x080032f1
 800327c:	080032e9 	.word	0x080032e9
 8003280:	080032e9 	.word	0x080032e9
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080032e9 	.word	0x080032e9
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032e9 	.word	0x080032e9
 8003294:	080032e9 	.word	0x080032e9
 8003298:	080032f1 	.word	0x080032f1
 800329c:	080032e9 	.word	0x080032e9
 80032a0:	080032e9 	.word	0x080032e9
 80032a4:	080032e9 	.word	0x080032e9
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032f1 	.word	0x080032f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c0:	3308      	adds	r3, #8
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fd05 	bl	8003cd4 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032d0:	e00f      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d6:	3328      	adds	r3, #40	; 0x28
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fdac 	bl	8003e38 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032e6:	e004      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80032f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032fa:	4bbf      	ldr	r3, [pc, #764]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003308:	4abb      	ldr	r2, [pc, #748]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800330a:	430b      	orrs	r3, r1
 800330c:	6553      	str	r3, [r2, #84]	; 0x54
 800330e:	e003      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f002 0302 	and.w	r3, r2, #2
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800332e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003332:	460b      	mov	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	d041      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333e:	2b05      	cmp	r3, #5
 8003340:	d824      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	08003395 	.word	0x08003395
 800334c:	08003361 	.word	0x08003361
 8003350:	08003377 	.word	0x08003377
 8003354:	08003395 	.word	0x08003395
 8003358:	08003395 	.word	0x08003395
 800335c:	08003395 	.word	0x08003395
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003364:	3308      	adds	r3, #8
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fcb3 	bl	8003cd4 <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337a:	3328      	adds	r3, #40	; 0x28
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd5a 	bl	8003e38 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800339e:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f023 0107 	bic.w	r1, r3, #7
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ac:	4a92      	ldr	r2, [pc, #584]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6553      	str	r3, [r2, #84]	; 0x54
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f002 0304 	and.w	r3, r2, #4
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	d044      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d825      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	0800343d 	.word	0x0800343d
 80033f4:	08003409 	.word	0x08003409
 80033f8:	0800341f 	.word	0x0800341f
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	0800343d 	.word	0x0800343d
 8003404:	0800343d 	.word	0x0800343d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340c:	3308      	adds	r3, #8
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fc5f 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800341c:	e00f      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003422:	3328      	adds	r3, #40	; 0x28
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd06 	bl	8003e38 <RCCEx_PLL3_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800343c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f023 0107 	bic.w	r1, r3, #7
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6593      	str	r3, [r2, #88]	; 0x58
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f002 0320 	and.w	r3, r2, #32
 8003472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800347c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d055      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003492:	d033      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d82c      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d02f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d826      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034aa:	d02b      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80034ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034b0:	d820      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b6:	d012      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034bc:	d81a      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d022      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80034c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c6:	d115      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	3308      	adds	r3, #8
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fbff 	bl	8003cd4 <RCCEx_PLL2_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034dc:	e015      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	3328      	adds	r3, #40	; 0x28
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fca6 	bl	8003e38 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034f2:	e00a      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034fa:	e006      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034fc:	bf00      	nop
 80034fe:	e004      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003500:	bf00      	nop
 8003502:	e002      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003504:	bf00      	nop
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	4a35      	ldr	r2, [pc, #212]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6553      	str	r3, [r2, #84]	; 0x54
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800352e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003548:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d058      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800355e:	d033      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003560:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003564:	d82c      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d02f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d826      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003576:	d02b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357c:	d820      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003582:	d012      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	d81a      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d022      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d115      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	3308      	adds	r3, #8
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fb99 	bl	8003cd4 <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035a8:	e015      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc40 	bl	8003e38 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035be:	e00a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035c6:	e006      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035c8:	bf00      	nop
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ee:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800361a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d055      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800362c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003630:	d033      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003632:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003636:	d82c      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	d02f      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003642:	d826      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003648:	d02b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800364a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800364e:	d820      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003654:	d012      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365a:	d81a      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d115      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	3308      	adds	r3, #8
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fb30 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800367a:	e015      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	3328      	adds	r3, #40	; 0x28
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fbd7 	bl	8003e38 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003698:	e006      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800369a:	bf00      	nop
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036b0:	4ba1      	ldr	r3, [pc, #644]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036c0:	4a9d      	ldr	r2, [pc, #628]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
 80036c6:	e003      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 0308 	and.w	r3, r2, #8
 80036dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d01e      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	3328      	adds	r3, #40	; 0x28
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fb96 	bl	8003e38 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003718:	4b87      	ldr	r3, [pc, #540]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003728:	4a83      	ldr	r2, [pc, #524]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f002 0310 	and.w	r3, r2, #16
 800373a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003744:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d01e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d10c      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003760:	3328      	adds	r3, #40	; 0x28
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fb67 	bl	8003e38 <RCCEx_PLL3_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003776:	4b70      	ldr	r3, [pc, #448]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003786:	4a6c      	ldr	r2, [pc, #432]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d03e      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b8:	d022      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80037ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037be:	d81b      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80037ca:	e015      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	3308      	adds	r3, #8
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fa7d 	bl	8003cd4 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037e0:	e00f      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	3328      	adds	r3, #40	; 0x28
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fb24 	bl	8003e38 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800381a:	4a47      	ldr	r2, [pc, #284]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6593      	str	r3, [r2, #88]	; 0x58
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003836:	67bb      	str	r3, [r7, #120]	; 0x78
 8003838:	2300      	movs	r3, #0
 800383a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800383c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003852:	d01f      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003858:	d818      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003866:	e011      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003874:	e00f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387a:	3328      	adds	r3, #40	; 0x28
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fada 	bl	8003e38 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800388a:	e004      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6553      	str	r3, [r2, #84]	; 0x54
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80038ca:	673b      	str	r3, [r7, #112]	; 0x70
 80038cc:	2300      	movs	r3, #0
 80038ce:	677b      	str	r3, [r7, #116]	; 0x74
 80038d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d034      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d007      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80038ea:	e011      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038f8:	e00e      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	3308      	adds	r3, #8
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9e6 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	4a02      	ldr	r2, [pc, #8]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003930:	430b      	orrs	r3, r1
 8003932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003936:	bf00      	nop
 8003938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	2300      	movs	r3, #0
 8003954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003956:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d00c      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	3328      	adds	r3, #40	; 0x28
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fa65 	bl	8003e38 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003986:	663b      	str	r3, [r7, #96]	; 0x60
 8003988:	2300      	movs	r3, #0
 800398a:	667b      	str	r3, [r7, #100]	; 0x64
 800398c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d038      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d018      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80039a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a8:	d811      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d014      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d80b      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d106      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4bc3      	ldr	r3, [pc, #780]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4ac2      	ldr	r2, [pc, #776]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039cc:	e008      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e8:	4bb9      	ldr	r3, [pc, #740]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f8:	4ab5      	ldr	r2, [pc, #724]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6553      	str	r3, [r2, #84]	; 0x54
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a16:	2300      	movs	r3, #0
 8003a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a24:	4baa      	ldr	r3, [pc, #680]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	4aa7      	ldr	r2, [pc, #668]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
 8003a46:	2300      	movs	r3, #0
 8003a48:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a54:	4b9e      	ldr	r3, [pc, #632]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a64:	4a9a      	ldr	r2, [pc, #616]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a78:	2300      	movs	r3, #0
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a86:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	4a8e      	ldr	r2, [pc, #568]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ab6:	4b86      	ldr	r3, [pc, #536]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4a85      	ldr	r2, [pc, #532]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003abc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ac0:	6113      	str	r3, [r2, #16]
 8003ac2:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac4:	6919      	ldr	r1, [r3, #16]
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ace:	4a80      	ldr	r2, [pc, #512]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003af0:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	4a74      	ldr	r2, [pc, #464]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
 8003b16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b20:	4b6b      	ldr	r3, [pc, #428]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d011      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b56:	3308      	adds	r3, #8
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f8ba 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6239      	str	r1, [r7, #32]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f89a 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	61b9      	str	r1, [r7, #24]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2102      	movs	r1, #2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f87a 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6139      	str	r1, [r7, #16]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d011      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c16:	3328      	adds	r3, #40	; 0x28
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f90c 	bl	8003e38 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8ec 	bl	8003e38 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d011      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	3328      	adds	r3, #40	; 0x28
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f8cc 	bl	8003e38 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003cb6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd0:	58024400 	.word	0x58024400

08003cd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce2:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d101      	bne.n	8003cf2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e099      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfe:	f7fd f9cd 	bl	800109c <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d06:	f7fd f9c9 	bl	800109c <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e086      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d18:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	493f      	ldr	r1, [pc, #252]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	628b      	str	r3, [r1, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d68:	4931      	ldr	r1, [pc, #196]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f023 0220 	bic.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4928      	ldr	r1, [pc, #160]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d92:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <RCCEx_PLL2_Config+0x160>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	69d2      	ldr	r2, [r2, #28]
 8003daa:	00d2      	lsls	r2, r2, #3
 8003dac:	4920      	ldr	r1, [pc, #128]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f043 0310 	orr.w	r3, r3, #16
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd0:	e00f      	b.n	8003df2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de4:	e005      	b.n	8003df2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fd f94d 	bl	800109c <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e06:	f7fd f949 	bl	800109c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e006      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	ffff0007 	.word	0xffff0007

08003e38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e46:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d101      	bne.n	8003e56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e099      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4e      	ldr	r2, [pc, #312]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fd f91b 	bl	800109c <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e6a:	f7fd f917 	bl	800109c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e086      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e7c:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	493f      	ldr	r1, [pc, #252]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ecc:	4931      	ldr	r1, [pc, #196]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	492d      	ldr	r1, [pc, #180]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4928      	ldr	r1, [pc, #160]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <RCCEx_PLL3_Config+0x160>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	69d2      	ldr	r2, [r2, #28]
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	4920      	ldr	r1, [pc, #128]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f34:	e00f      	b.n	8003f56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f48:	e005      	b.n	8003f56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fd f89b 	bl	800109c <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f6a:	f7fd f897 	bl	800109c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e006      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
 8003f98:	ffff0007 	.word	0xffff0007

08003f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e049      	b.n	8004042 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fc ff92 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 fa7e 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d122      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d11b      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0202 	mvn.w	r2, #2
 8004076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa07 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004092:	e005      	b.n	80040a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9f9 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fa0a 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d122      	bne.n	80040fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d11b      	bne.n	80040fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0204 	mvn.w	r2, #4
 80040ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f9dd 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80040e6:	e005      	b.n	80040f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f9cf 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9e0 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d122      	bne.n	800414e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d11b      	bne.n	800414e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f06f 0208 	mvn.w	r2, #8
 800411e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2204      	movs	r2, #4
 8004124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9b3 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 800413a:	e005      	b.n	8004148 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f9a5 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f9b6 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d122      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d11b      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0210 	mvn.w	r2, #16
 8004172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2208      	movs	r2, #8
 8004178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f989 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 800418e:	e005      	b.n	800419c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f97b 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f98c 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0201 	mvn.w	r2, #1
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f955 	bl	8004478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb41 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb34 	bl	8004890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f93a 	bl	80044c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0220 	mvn.w	r2, #32
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 faf4 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_ConfigClockSource+0x1c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e0dc      	b.n	800445e <HAL_TIM_ConfigClockSource+0x1d6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4b6a      	ldr	r3, [pc, #424]	; (8004468 <HAL_TIM_ConfigClockSource+0x1e0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a64      	ldr	r2, [pc, #400]	; (800446c <HAL_TIM_ConfigClockSource+0x1e4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f000 80a9 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 80042e0:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_TIM_ConfigClockSource+0x1e4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f200 80ae 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 80042e8:	4a61      	ldr	r2, [pc, #388]	; (8004470 <HAL_TIM_ConfigClockSource+0x1e8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f000 80a1 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 80042f0:	4a5f      	ldr	r2, [pc, #380]	; (8004470 <HAL_TIM_ConfigClockSource+0x1e8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f200 80a6 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 80042f8:	4a5e      	ldr	r2, [pc, #376]	; (8004474 <HAL_TIM_ConfigClockSource+0x1ec>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	f000 8099 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004300:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f200 809e 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800430c:	f000 8091 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004310:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004314:	f200 8096 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431c:	f000 8089 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004324:	f200 808e 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x124>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x1c2>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xf6>
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x16a>
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x14a>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x18a>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1aa>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	f000 f9bd 	bl	800470c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 f9a6 	bl	800470c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 f916 	bl	8004610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	; 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f970 	bl	80046d0 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f935 	bl	800466e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	; 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f960 	bl	80046d0 <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8f6 	bl	8004610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f950 	bl	80046d0 <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 f947 	bl	80046d0 <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	ffceff88 	.word	0xffceff88
 800446c:	00100040 	.word	0x00100040
 8004470:	00100030 	.word	0x00100030
 8004474:	00100020 	.word	0x00100020

08004478 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <TIM_Base_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3c      	ldr	r2, [pc, #240]	; (80045f8 <TIM_Base_SetConfig+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <TIM_Base_SetConfig+0x120>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <TIM_Base_SetConfig+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <TIM_Base_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <TIM_Base_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <TIM_Base_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0x124>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a28      	ldr	r2, [pc, #160]	; (8004604 <TIM_Base_SetConfig+0x128>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <TIM_Base_SetConfig+0x12c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a26      	ldr	r2, [pc, #152]	; (800460c <TIM_Base_SetConfig+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0f      	ldr	r2, [pc, #60]	; (800460c <TIM_Base_SetConfig+0x130>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40010400 	.word	0x40010400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 030a 	bic.w	r3, r3, #10
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0210 	bic.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <TIM_ITRx_SetConfig+0x38>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f043 0307 	orr.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	ffcfff8f 	.word	0xffcfff8f

0800470c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	431a      	orrs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e06d      	b.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a30      	ldr	r2, [pc, #192]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800479e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d01d      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10c      	bne.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40001800 	.word	0x40001800
 8004864:	40014000 	.word	0x40014000

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 b823 	b.w	80048f4 <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	24000068 	.word	0x24000068

080048b4 <sbrk_aligned>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4e0e      	ldr	r6, [pc, #56]	; (80048f0 <sbrk_aligned+0x3c>)
 80048b8:	460c      	mov	r4, r1
 80048ba:	6831      	ldr	r1, [r6, #0]
 80048bc:	4605      	mov	r5, r0
 80048be:	b911      	cbnz	r1, 80048c6 <sbrk_aligned+0x12>
 80048c0:	f001 f84a 	bl	8005958 <_sbrk_r>
 80048c4:	6030      	str	r0, [r6, #0]
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f001 f845 	bl	8005958 <_sbrk_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d00a      	beq.n	80048e8 <sbrk_aligned+0x34>
 80048d2:	1cc4      	adds	r4, r0, #3
 80048d4:	f024 0403 	bic.w	r4, r4, #3
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d007      	beq.n	80048ec <sbrk_aligned+0x38>
 80048dc:	1a21      	subs	r1, r4, r0
 80048de:	4628      	mov	r0, r5
 80048e0:	f001 f83a 	bl	8005958 <_sbrk_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d101      	bne.n	80048ec <sbrk_aligned+0x38>
 80048e8:	f04f 34ff 	mov.w	r4, #4294967295
 80048ec:	4620      	mov	r0, r4
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	240002a0 	.word	0x240002a0

080048f4 <_malloc_r>:
 80048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f8:	1ccd      	adds	r5, r1, #3
 80048fa:	f025 0503 	bic.w	r5, r5, #3
 80048fe:	3508      	adds	r5, #8
 8004900:	2d0c      	cmp	r5, #12
 8004902:	bf38      	it	cc
 8004904:	250c      	movcc	r5, #12
 8004906:	2d00      	cmp	r5, #0
 8004908:	4607      	mov	r7, r0
 800490a:	db01      	blt.n	8004910 <_malloc_r+0x1c>
 800490c:	42a9      	cmp	r1, r5
 800490e:	d905      	bls.n	800491c <_malloc_r+0x28>
 8004910:	230c      	movs	r3, #12
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	2600      	movs	r6, #0
 8004916:	4630      	mov	r0, r6
 8004918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049f0 <_malloc_r+0xfc>
 8004920:	f000 f868 	bl	80049f4 <__malloc_lock>
 8004924:	f8d8 3000 	ldr.w	r3, [r8]
 8004928:	461c      	mov	r4, r3
 800492a:	bb5c      	cbnz	r4, 8004984 <_malloc_r+0x90>
 800492c:	4629      	mov	r1, r5
 800492e:	4638      	mov	r0, r7
 8004930:	f7ff ffc0 	bl	80048b4 <sbrk_aligned>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	4604      	mov	r4, r0
 8004938:	d155      	bne.n	80049e6 <_malloc_r+0xf2>
 800493a:	f8d8 4000 	ldr.w	r4, [r8]
 800493e:	4626      	mov	r6, r4
 8004940:	2e00      	cmp	r6, #0
 8004942:	d145      	bne.n	80049d0 <_malloc_r+0xdc>
 8004944:	2c00      	cmp	r4, #0
 8004946:	d048      	beq.n	80049da <_malloc_r+0xe6>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	4631      	mov	r1, r6
 800494c:	4638      	mov	r0, r7
 800494e:	eb04 0903 	add.w	r9, r4, r3
 8004952:	f001 f801 	bl	8005958 <_sbrk_r>
 8004956:	4581      	cmp	r9, r0
 8004958:	d13f      	bne.n	80049da <_malloc_r+0xe6>
 800495a:	6821      	ldr	r1, [r4, #0]
 800495c:	1a6d      	subs	r5, r5, r1
 800495e:	4629      	mov	r1, r5
 8004960:	4638      	mov	r0, r7
 8004962:	f7ff ffa7 	bl	80048b4 <sbrk_aligned>
 8004966:	3001      	adds	r0, #1
 8004968:	d037      	beq.n	80049da <_malloc_r+0xe6>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	442b      	add	r3, r5
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	f8d8 3000 	ldr.w	r3, [r8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d038      	beq.n	80049ea <_malloc_r+0xf6>
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	42a2      	cmp	r2, r4
 800497c:	d12b      	bne.n	80049d6 <_malloc_r+0xe2>
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e00f      	b.n	80049a4 <_malloc_r+0xb0>
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	1b52      	subs	r2, r2, r5
 8004988:	d41f      	bmi.n	80049ca <_malloc_r+0xd6>
 800498a:	2a0b      	cmp	r2, #11
 800498c:	d917      	bls.n	80049be <_malloc_r+0xca>
 800498e:	1961      	adds	r1, r4, r5
 8004990:	42a3      	cmp	r3, r4
 8004992:	6025      	str	r5, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	6059      	strne	r1, [r3, #4]
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	bf08      	it	eq
 800499c:	f8c8 1000 	streq.w	r1, [r8]
 80049a0:	5162      	str	r2, [r4, r5]
 80049a2:	604b      	str	r3, [r1, #4]
 80049a4:	4638      	mov	r0, r7
 80049a6:	f104 060b 	add.w	r6, r4, #11
 80049aa:	f000 f829 	bl	8004a00 <__malloc_unlock>
 80049ae:	f026 0607 	bic.w	r6, r6, #7
 80049b2:	1d23      	adds	r3, r4, #4
 80049b4:	1af2      	subs	r2, r6, r3
 80049b6:	d0ae      	beq.n	8004916 <_malloc_r+0x22>
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	50a3      	str	r3, [r4, r2]
 80049bc:	e7ab      	b.n	8004916 <_malloc_r+0x22>
 80049be:	42a3      	cmp	r3, r4
 80049c0:	6862      	ldr	r2, [r4, #4]
 80049c2:	d1dd      	bne.n	8004980 <_malloc_r+0x8c>
 80049c4:	f8c8 2000 	str.w	r2, [r8]
 80049c8:	e7ec      	b.n	80049a4 <_malloc_r+0xb0>
 80049ca:	4623      	mov	r3, r4
 80049cc:	6864      	ldr	r4, [r4, #4]
 80049ce:	e7ac      	b.n	800492a <_malloc_r+0x36>
 80049d0:	4634      	mov	r4, r6
 80049d2:	6876      	ldr	r6, [r6, #4]
 80049d4:	e7b4      	b.n	8004940 <_malloc_r+0x4c>
 80049d6:	4613      	mov	r3, r2
 80049d8:	e7cc      	b.n	8004974 <_malloc_r+0x80>
 80049da:	230c      	movs	r3, #12
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4638      	mov	r0, r7
 80049e0:	f000 f80e 	bl	8004a00 <__malloc_unlock>
 80049e4:	e797      	b.n	8004916 <_malloc_r+0x22>
 80049e6:	6025      	str	r5, [r4, #0]
 80049e8:	e7dc      	b.n	80049a4 <_malloc_r+0xb0>
 80049ea:	605b      	str	r3, [r3, #4]
 80049ec:	deff      	udf	#255	; 0xff
 80049ee:	bf00      	nop
 80049f0:	2400029c 	.word	0x2400029c

080049f4 <__malloc_lock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_lock+0x8>)
 80049f6:	f000 bffc 	b.w	80059f2 <__retarget_lock_acquire_recursive>
 80049fa:	bf00      	nop
 80049fc:	240003e4 	.word	0x240003e4

08004a00 <__malloc_unlock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__malloc_unlock+0x8>)
 8004a02:	f000 bff7 	b.w	80059f4 <__retarget_lock_release_recursive>
 8004a06:	bf00      	nop
 8004a08:	240003e4 	.word	0x240003e4

08004a0c <__cvt>:
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	ed2d 8b02 	vpush	{d8}
 8004a12:	eeb0 8b40 	vmov.f64	d8, d0
 8004a16:	b085      	sub	sp, #20
 8004a18:	4617      	mov	r7, r2
 8004a1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004a1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004a1e:	ee18 2a90 	vmov	r2, s17
 8004a22:	f025 0520 	bic.w	r5, r5, #32
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	bfb6      	itet	lt
 8004a2a:	222d      	movlt	r2, #45	; 0x2d
 8004a2c:	2200      	movge	r2, #0
 8004a2e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004a32:	2d46      	cmp	r5, #70	; 0x46
 8004a34:	460c      	mov	r4, r1
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	d004      	beq.n	8004a44 <__cvt+0x38>
 8004a3a:	2d45      	cmp	r5, #69	; 0x45
 8004a3c:	d100      	bne.n	8004a40 <__cvt+0x34>
 8004a3e:	3401      	adds	r4, #1
 8004a40:	2102      	movs	r1, #2
 8004a42:	e000      	b.n	8004a46 <__cvt+0x3a>
 8004a44:	2103      	movs	r1, #3
 8004a46:	ab03      	add	r3, sp, #12
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	ab02      	add	r3, sp, #8
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4633      	mov	r3, r6
 8004a52:	eeb0 0b48 	vmov.f64	d0, d8
 8004a56:	f001 f86b 	bl	8005b30 <_dtoa_r>
 8004a5a:	2d47      	cmp	r5, #71	; 0x47
 8004a5c:	d101      	bne.n	8004a62 <__cvt+0x56>
 8004a5e:	07fb      	lsls	r3, r7, #31
 8004a60:	d51a      	bpl.n	8004a98 <__cvt+0x8c>
 8004a62:	2d46      	cmp	r5, #70	; 0x46
 8004a64:	eb00 0204 	add.w	r2, r0, r4
 8004a68:	d10c      	bne.n	8004a84 <__cvt+0x78>
 8004a6a:	7803      	ldrb	r3, [r0, #0]
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d107      	bne.n	8004a80 <__cvt+0x74>
 8004a70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	bf1c      	itt	ne
 8004a7a:	f1c4 0401 	rsbne	r4, r4, #1
 8004a7e:	6034      	strne	r4, [r6, #0]
 8004a80:	6833      	ldr	r3, [r6, #0]
 8004a82:	441a      	add	r2, r3
 8004a84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	bf08      	it	eq
 8004a8e:	9203      	streq	r2, [sp, #12]
 8004a90:	2130      	movs	r1, #48	; 0x30
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d307      	bcc.n	8004aa8 <__cvt+0x9c>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a9c:	1a1b      	subs	r3, r3, r0
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	b005      	add	sp, #20
 8004aa2:	ecbd 8b02 	vpop	{d8}
 8004aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa8:	1c5c      	adds	r4, r3, #1
 8004aaa:	9403      	str	r4, [sp, #12]
 8004aac:	7019      	strb	r1, [r3, #0]
 8004aae:	e7f0      	b.n	8004a92 <__cvt+0x86>

08004ab0 <__exponent>:
 8004ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	4249      	neglt	r1, r1
 8004aba:	f803 2b02 	strb.w	r2, [r3], #2
 8004abe:	bfb4      	ite	lt
 8004ac0:	222d      	movlt	r2, #45	; 0x2d
 8004ac2:	222b      	movge	r2, #43	; 0x2b
 8004ac4:	2909      	cmp	r1, #9
 8004ac6:	7042      	strb	r2, [r0, #1]
 8004ac8:	dd2a      	ble.n	8004b20 <__exponent+0x70>
 8004aca:	f10d 0207 	add.w	r2, sp, #7
 8004ace:	4617      	mov	r7, r2
 8004ad0:	260a      	movs	r6, #10
 8004ad2:	4694      	mov	ip, r2
 8004ad4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ad8:	fb06 1415 	mls	r4, r6, r5, r1
 8004adc:	3430      	adds	r4, #48	; 0x30
 8004ade:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	2c63      	cmp	r4, #99	; 0x63
 8004ae6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004aea:	4629      	mov	r1, r5
 8004aec:	dcf1      	bgt.n	8004ad2 <__exponent+0x22>
 8004aee:	3130      	adds	r1, #48	; 0x30
 8004af0:	f1ac 0402 	sub.w	r4, ip, #2
 8004af4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004af8:	1c41      	adds	r1, r0, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	42ba      	cmp	r2, r7
 8004afe:	d30a      	bcc.n	8004b16 <__exponent+0x66>
 8004b00:	f10d 0209 	add.w	r2, sp, #9
 8004b04:	eba2 020c 	sub.w	r2, r2, ip
 8004b08:	42bc      	cmp	r4, r7
 8004b0a:	bf88      	it	hi
 8004b0c:	2200      	movhi	r2, #0
 8004b0e:	4413      	add	r3, r2
 8004b10:	1a18      	subs	r0, r3, r0
 8004b12:	b003      	add	sp, #12
 8004b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004b1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004b1e:	e7ed      	b.n	8004afc <__exponent+0x4c>
 8004b20:	2330      	movs	r3, #48	; 0x30
 8004b22:	3130      	adds	r1, #48	; 0x30
 8004b24:	7083      	strb	r3, [r0, #2]
 8004b26:	70c1      	strb	r1, [r0, #3]
 8004b28:	1d03      	adds	r3, r0, #4
 8004b2a:	e7f1      	b.n	8004b10 <__exponent+0x60>
 8004b2c:	0000      	movs	r0, r0
	...

08004b30 <_printf_float>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	b08b      	sub	sp, #44	; 0x2c
 8004b36:	460c      	mov	r4, r1
 8004b38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	461f      	mov	r7, r3
 8004b40:	4605      	mov	r5, r0
 8004b42:	f000 fed1 	bl	80058e8 <_localeconv_r>
 8004b46:	f8d0 b000 	ldr.w	fp, [r0]
 8004b4a:	4658      	mov	r0, fp
 8004b4c:	f7fb fc18 	bl	8000380 <strlen>
 8004b50:	2300      	movs	r3, #0
 8004b52:	9308      	str	r3, [sp, #32]
 8004b54:	f8d8 3000 	ldr.w	r3, [r8]
 8004b58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	3307      	adds	r3, #7
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	f103 0108 	add.w	r1, r3, #8
 8004b68:	f8c8 1000 	str.w	r1, [r8]
 8004b6c:	ed93 0b00 	vldr	d0, [r3]
 8004b70:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004dd0 <_printf_float+0x2a0>
 8004b74:	eeb0 7bc0 	vabs.f64	d7, d0
 8004b78:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004b84:	4682      	mov	sl, r0
 8004b86:	dd24      	ble.n	8004bd2 <_printf_float+0xa2>
 8004b88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	d502      	bpl.n	8004b98 <_printf_float+0x68>
 8004b92:	232d      	movs	r3, #45	; 0x2d
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b98:	498f      	ldr	r1, [pc, #572]	; (8004dd8 <_printf_float+0x2a8>)
 8004b9a:	4b90      	ldr	r3, [pc, #576]	; (8004ddc <_printf_float+0x2ac>)
 8004b9c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ba0:	bf94      	ite	ls
 8004ba2:	4688      	movls	r8, r1
 8004ba4:	4698      	movhi	r8, r3
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	f022 0204 	bic.w	r2, r2, #4
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	9304      	str	r3, [sp, #16]
 8004bb4:	9700      	str	r7, [sp, #0]
 8004bb6:	4633      	mov	r3, r6
 8004bb8:	aa09      	add	r2, sp, #36	; 0x24
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 f9d1 	bl	8004f64 <_printf_common>
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f040 808a 	bne.w	8004cdc <_printf_float+0x1ac>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	b00b      	add	sp, #44	; 0x2c
 8004bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd2:	eeb4 0b40 	vcmp.f64	d0, d0
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d709      	bvc.n	8004bf0 <_printf_float+0xc0>
 8004bdc:	ee10 3a90 	vmov	r3, s1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfbc      	itt	lt
 8004be4:	232d      	movlt	r3, #45	; 0x2d
 8004be6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bea:	497d      	ldr	r1, [pc, #500]	; (8004de0 <_printf_float+0x2b0>)
 8004bec:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <_printf_float+0x2b4>)
 8004bee:	e7d5      	b.n	8004b9c <_printf_float+0x6c>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bf6:	9104      	str	r1, [sp, #16]
 8004bf8:	1c59      	adds	r1, r3, #1
 8004bfa:	d13c      	bne.n	8004c76 <_printf_float+0x146>
 8004bfc:	2306      	movs	r3, #6
 8004bfe:	6063      	str	r3, [r4, #4]
 8004c00:	2300      	movs	r3, #0
 8004c02:	9303      	str	r3, [sp, #12]
 8004c04:	ab08      	add	r3, sp, #32
 8004c06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c0e:	ab07      	add	r3, sp, #28
 8004c10:	6861      	ldr	r1, [r4, #4]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6022      	str	r2, [r4, #0]
 8004c16:	f10d 031b 	add.w	r3, sp, #27
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7ff fef6 	bl	8004a0c <__cvt>
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	9907      	ldr	r1, [sp, #28]
 8004c24:	2b47      	cmp	r3, #71	; 0x47
 8004c26:	4680      	mov	r8, r0
 8004c28:	d108      	bne.n	8004c3c <_printf_float+0x10c>
 8004c2a:	1cc8      	adds	r0, r1, #3
 8004c2c:	db02      	blt.n	8004c34 <_printf_float+0x104>
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	4299      	cmp	r1, r3
 8004c32:	dd41      	ble.n	8004cb8 <_printf_float+0x188>
 8004c34:	f1a9 0902 	sub.w	r9, r9, #2
 8004c38:	fa5f f989 	uxtb.w	r9, r9
 8004c3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c40:	d820      	bhi.n	8004c84 <_printf_float+0x154>
 8004c42:	3901      	subs	r1, #1
 8004c44:	464a      	mov	r2, r9
 8004c46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c4a:	9107      	str	r1, [sp, #28]
 8004c4c:	f7ff ff30 	bl	8004ab0 <__exponent>
 8004c50:	9a08      	ldr	r2, [sp, #32]
 8004c52:	9004      	str	r0, [sp, #16]
 8004c54:	1813      	adds	r3, r2, r0
 8004c56:	2a01      	cmp	r2, #1
 8004c58:	6123      	str	r3, [r4, #16]
 8004c5a:	dc02      	bgt.n	8004c62 <_printf_float+0x132>
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	07d2      	lsls	r2, r2, #31
 8004c60:	d501      	bpl.n	8004c66 <_printf_float+0x136>
 8004c62:	3301      	adds	r3, #1
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0a2      	beq.n	8004bb4 <_printf_float+0x84>
 8004c6e:	232d      	movs	r3, #45	; 0x2d
 8004c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c74:	e79e      	b.n	8004bb4 <_printf_float+0x84>
 8004c76:	9904      	ldr	r1, [sp, #16]
 8004c78:	2947      	cmp	r1, #71	; 0x47
 8004c7a:	d1c1      	bne.n	8004c00 <_printf_float+0xd0>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1bf      	bne.n	8004c00 <_printf_float+0xd0>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e7bc      	b.n	8004bfe <_printf_float+0xce>
 8004c84:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c88:	d118      	bne.n	8004cbc <_printf_float+0x18c>
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	dd0b      	ble.n	8004ca8 <_printf_float+0x178>
 8004c90:	6121      	str	r1, [r4, #16]
 8004c92:	b913      	cbnz	r3, 8004c9a <_printf_float+0x16a>
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	07d0      	lsls	r0, r2, #31
 8004c98:	d502      	bpl.n	8004ca0 <_printf_float+0x170>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	440b      	add	r3, r1
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	e7de      	b.n	8004c66 <_printf_float+0x136>
 8004ca8:	b913      	cbnz	r3, 8004cb0 <_printf_float+0x180>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	07d2      	lsls	r2, r2, #31
 8004cae:	d501      	bpl.n	8004cb4 <_printf_float+0x184>
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	e7f4      	b.n	8004c9e <_printf_float+0x16e>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e7f2      	b.n	8004c9e <_printf_float+0x16e>
 8004cb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004cbc:	9b08      	ldr	r3, [sp, #32]
 8004cbe:	4299      	cmp	r1, r3
 8004cc0:	db05      	blt.n	8004cce <_printf_float+0x19e>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	6121      	str	r1, [r4, #16]
 8004cc6:	07d8      	lsls	r0, r3, #31
 8004cc8:	d5ea      	bpl.n	8004ca0 <_printf_float+0x170>
 8004cca:	1c4b      	adds	r3, r1, #1
 8004ccc:	e7e7      	b.n	8004c9e <_printf_float+0x16e>
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	bfd4      	ite	le
 8004cd2:	f1c1 0202 	rsble	r2, r1, #2
 8004cd6:	2201      	movgt	r2, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	e7e0      	b.n	8004c9e <_printf_float+0x16e>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	055a      	lsls	r2, r3, #21
 8004ce0:	d407      	bmi.n	8004cf2 <_printf_float+0x1c2>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	d12a      	bne.n	8004d46 <_printf_float+0x216>
 8004cf0:	e76a      	b.n	8004bc8 <_printf_float+0x98>
 8004cf2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cf6:	f240 80e0 	bls.w	8004eba <_printf_float+0x38a>
 8004cfa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004cfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	d133      	bne.n	8004d70 <_printf_float+0x240>
 8004d08:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <_printf_float+0x2b8>)
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f af58 	beq.w	8004bc8 <_printf_float+0x98>
 8004d18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	db02      	blt.n	8004d26 <_printf_float+0x1f6>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	07d8      	lsls	r0, r3, #31
 8004d24:	d50f      	bpl.n	8004d46 <_printf_float+0x216>
 8004d26:	4653      	mov	r3, sl
 8004d28:	465a      	mov	r2, fp
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f af49 	beq.w	8004bc8 <_printf_float+0x98>
 8004d36:	f04f 0800 	mov.w	r8, #0
 8004d3a:	f104 091a 	add.w	r9, r4, #26
 8004d3e:	9b08      	ldr	r3, [sp, #32]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4543      	cmp	r3, r8
 8004d44:	dc09      	bgt.n	8004d5a <_printf_float+0x22a>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079b      	lsls	r3, r3, #30
 8004d4a:	f100 8106 	bmi.w	8004f5a <_printf_float+0x42a>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e738      	b.n	8004bcc <_printf_float+0x9c>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	464a      	mov	r2, r9
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f af2f 	beq.w	8004bc8 <_printf_float+0x98>
 8004d6a:	f108 0801 	add.w	r8, r8, #1
 8004d6e:	e7e6      	b.n	8004d3e <_printf_float+0x20e>
 8004d70:	9b07      	ldr	r3, [sp, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dc3a      	bgt.n	8004dec <_printf_float+0x2bc>
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <_printf_float+0x2b8>)
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f af21 	beq.w	8004bc8 <_printf_float+0x98>
 8004d86:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d102      	bne.n	8004d94 <_printf_float+0x264>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	07d9      	lsls	r1, r3, #31
 8004d92:	d5d8      	bpl.n	8004d46 <_printf_float+0x216>
 8004d94:	4653      	mov	r3, sl
 8004d96:	465a      	mov	r2, fp
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af12 	beq.w	8004bc8 <_printf_float+0x98>
 8004da4:	f04f 0900 	mov.w	r9, #0
 8004da8:	f104 0a1a 	add.w	sl, r4, #26
 8004dac:	9b07      	ldr	r3, [sp, #28]
 8004dae:	425b      	negs	r3, r3
 8004db0:	454b      	cmp	r3, r9
 8004db2:	dc01      	bgt.n	8004db8 <_printf_float+0x288>
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	e795      	b.n	8004ce4 <_printf_float+0x1b4>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4652      	mov	r2, sl
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f af00 	beq.w	8004bc8 <_printf_float+0x98>
 8004dc8:	f109 0901 	add.w	r9, r9, #1
 8004dcc:	e7ee      	b.n	8004dac <_printf_float+0x27c>
 8004dce:	bf00      	nop
 8004dd0:	ffffffff 	.word	0xffffffff
 8004dd4:	7fefffff 	.word	0x7fefffff
 8004dd8:	08008e78 	.word	0x08008e78
 8004ddc:	08008e7c 	.word	0x08008e7c
 8004de0:	08008e80 	.word	0x08008e80
 8004de4:	08008e84 	.word	0x08008e84
 8004de8:	08008e88 	.word	0x08008e88
 8004dec:	9a08      	ldr	r2, [sp, #32]
 8004dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bfa8      	it	ge
 8004df4:	461a      	movge	r2, r3
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	4691      	mov	r9, r2
 8004dfa:	dc38      	bgt.n	8004e6e <_printf_float+0x33e>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9305      	str	r3, [sp, #20]
 8004e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e04:	f104 021a 	add.w	r2, r4, #26
 8004e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e0a:	9905      	ldr	r1, [sp, #20]
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	eba3 0309 	sub.w	r3, r3, r9
 8004e12:	428b      	cmp	r3, r1
 8004e14:	dc33      	bgt.n	8004e7e <_printf_float+0x34e>
 8004e16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	db3c      	blt.n	8004e98 <_printf_float+0x368>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	07da      	lsls	r2, r3, #31
 8004e22:	d439      	bmi.n	8004e98 <_printf_float+0x368>
 8004e24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004e28:	eba2 0903 	sub.w	r9, r2, r3
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	4591      	cmp	r9, r2
 8004e32:	bfa8      	it	ge
 8004e34:	4691      	movge	r9, r2
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	dc35      	bgt.n	8004ea8 <_printf_float+0x378>
 8004e3c:	f04f 0800 	mov.w	r8, #0
 8004e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e44:	f104 0a1a 	add.w	sl, r4, #26
 8004e48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	eba3 0309 	sub.w	r3, r3, r9
 8004e52:	4543      	cmp	r3, r8
 8004e54:	f77f af77 	ble.w	8004d46 <_printf_float+0x216>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f aeb0 	beq.w	8004bc8 <_printf_float+0x98>
 8004e68:	f108 0801 	add.w	r8, r8, #1
 8004e6c:	e7ec      	b.n	8004e48 <_printf_float+0x318>
 8004e6e:	4613      	mov	r3, r2
 8004e70:	4631      	mov	r1, r6
 8004e72:	4642      	mov	r2, r8
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b8      	blx	r7
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d1bf      	bne.n	8004dfc <_printf_float+0x2cc>
 8004e7c:	e6a4      	b.n	8004bc8 <_printf_float+0x98>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4631      	mov	r1, r6
 8004e82:	4628      	mov	r0, r5
 8004e84:	9204      	str	r2, [sp, #16]
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f ae9d 	beq.w	8004bc8 <_printf_float+0x98>
 8004e8e:	9b05      	ldr	r3, [sp, #20]
 8004e90:	9a04      	ldr	r2, [sp, #16]
 8004e92:	3301      	adds	r3, #1
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	e7b7      	b.n	8004e08 <_printf_float+0x2d8>
 8004e98:	4653      	mov	r3, sl
 8004e9a:	465a      	mov	r2, fp
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d1be      	bne.n	8004e24 <_printf_float+0x2f4>
 8004ea6:	e68f      	b.n	8004bc8 <_printf_float+0x98>
 8004ea8:	9a04      	ldr	r2, [sp, #16]
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4442      	add	r2, r8
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d1c1      	bne.n	8004e3c <_printf_float+0x30c>
 8004eb8:	e686      	b.n	8004bc8 <_printf_float+0x98>
 8004eba:	9a08      	ldr	r2, [sp, #32]
 8004ebc:	2a01      	cmp	r2, #1
 8004ebe:	dc01      	bgt.n	8004ec4 <_printf_float+0x394>
 8004ec0:	07db      	lsls	r3, r3, #31
 8004ec2:	d537      	bpl.n	8004f34 <_printf_float+0x404>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f ae7a 	beq.w	8004bc8 <_printf_float+0x98>
 8004ed4:	4653      	mov	r3, sl
 8004ed6:	465a      	mov	r2, fp
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4628      	mov	r0, r5
 8004edc:	47b8      	blx	r7
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f43f ae72 	beq.w	8004bc8 <_printf_float+0x98>
 8004ee4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ee8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	9b08      	ldr	r3, [sp, #32]
 8004ef2:	d01a      	beq.n	8004f2a <_printf_float+0x3fa>
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f108 0201 	add.w	r2, r8, #1
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	d10e      	bne.n	8004f22 <_printf_float+0x3f2>
 8004f04:	e660      	b.n	8004bc8 <_printf_float+0x98>
 8004f06:	2301      	movs	r3, #1
 8004f08:	464a      	mov	r2, r9
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae59 	beq.w	8004bc8 <_printf_float+0x98>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	9b08      	ldr	r3, [sp, #32]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4543      	cmp	r3, r8
 8004f20:	dcf1      	bgt.n	8004f06 <_printf_float+0x3d6>
 8004f22:	9b04      	ldr	r3, [sp, #16]
 8004f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f28:	e6dd      	b.n	8004ce6 <_printf_float+0x1b6>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	f104 091a 	add.w	r9, r4, #26
 8004f32:	e7f2      	b.n	8004f1a <_printf_float+0x3ea>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4642      	mov	r2, r8
 8004f38:	e7df      	b.n	8004efa <_printf_float+0x3ca>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae3f 	beq.w	8004bc8 <_printf_float+0x98>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f52:	1a5b      	subs	r3, r3, r1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dcf0      	bgt.n	8004f3a <_printf_float+0x40a>
 8004f58:	e6f9      	b.n	8004d4e <_printf_float+0x21e>
 8004f5a:	f04f 0800 	mov.w	r8, #0
 8004f5e:	f104 0919 	add.w	r9, r4, #25
 8004f62:	e7f4      	b.n	8004f4e <_printf_float+0x41e>

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bfb8      	it	lt
 8004f78:	4613      	movlt	r3, r2
 8004f7a:	6033      	str	r3, [r6, #0]
 8004f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f80:	4607      	mov	r7, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc26      	bgt.n	8004ffa <_printf_common+0x96>
 8004fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb0:	1e13      	subs	r3, r2, #0
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d42b      	bmi.n	8005014 <_printf_common+0xb0>
 8004fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d01e      	beq.n	8005008 <_printf_common+0xa4>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf02      	ittt	eq
 8004fd6:	68e5      	ldreq	r5, [r4, #12]
 8004fd8:	6833      	ldreq	r3, [r6, #0]
 8004fda:	1aed      	subeq	r5, r5, r3
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	bf0c      	ite	eq
 8004fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe4:	2500      	movne	r5, #0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfc4      	itt	gt
 8004fea:	1a9b      	subgt	r3, r3, r2
 8004fec:	18ed      	addgt	r5, r5, r3
 8004fee:	2600      	movs	r6, #0
 8004ff0:	341a      	adds	r4, #26
 8004ff2:	42b5      	cmp	r5, r6
 8004ff4:	d11a      	bne.n	800502c <_printf_common+0xc8>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e008      	b.n	800500c <_printf_common+0xa8>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4649      	mov	r1, r9
 8005000:	4638      	mov	r0, r7
 8005002:	47c0      	blx	r8
 8005004:	3001      	adds	r0, #1
 8005006:	d103      	bne.n	8005010 <_printf_common+0xac>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	3501      	adds	r5, #1
 8005012:	e7c6      	b.n	8004fa2 <_printf_common+0x3e>
 8005014:	18e1      	adds	r1, r4, r3
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	2030      	movs	r0, #48	; 0x30
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800501e:	4422      	add	r2, r4
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005028:	3302      	adds	r3, #2
 800502a:	e7c7      	b.n	8004fbc <_printf_common+0x58>
 800502c:	2301      	movs	r3, #1
 800502e:	4622      	mov	r2, r4
 8005030:	4649      	mov	r1, r9
 8005032:	4638      	mov	r0, r7
 8005034:	47c0      	blx	r8
 8005036:	3001      	adds	r0, #1
 8005038:	d0e6      	beq.n	8005008 <_printf_common+0xa4>
 800503a:	3601      	adds	r6, #1
 800503c:	e7d9      	b.n	8004ff2 <_printf_common+0x8e>
	...

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	7e0f      	ldrb	r7, [r1, #24]
 8005046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005048:	2f78      	cmp	r7, #120	; 0x78
 800504a:	4691      	mov	r9, r2
 800504c:	4680      	mov	r8, r0
 800504e:	460c      	mov	r4, r1
 8005050:	469a      	mov	sl, r3
 8005052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	; 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d4 	beq.w	800520a <_printf_i+0x1ca>
 8005062:	2f58      	cmp	r7, #88	; 0x58
 8005064:	f000 80c0 	beq.w	80051e8 <_printf_i+0x1a8>
 8005068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a101      	add	r1, pc, #4	; (adr r1, 8005080 <_printf_i+0x40>)
 800507c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051f1 	.word	0x080051f1
 80050b0:	08005119 	.word	0x08005119
 80050b4:	080051ab 	.word	0x080051ab
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	08005213 	.word	0x08005213
 80050c4:	08005069 	.word	0x08005069
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051b3 	.word	0x080051b3
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	602a      	str	r2, [r5, #0]
 80050e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09f      	b.n	800522c <_printf_i+0x1ec>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	682b      	ldr	r3, [r5, #0]
 80050f0:	0607      	lsls	r7, r0, #24
 80050f2:	f103 0104 	add.w	r1, r3, #4
 80050f6:	6029      	str	r1, [r5, #0]
 80050f8:	d501      	bpl.n	80050fe <_printf_i+0xbe>
 80050fa:	681e      	ldr	r6, [r3, #0]
 80050fc:	e003      	b.n	8005106 <_printf_i+0xc6>
 80050fe:	0646      	lsls	r6, r0, #25
 8005100:	d5fb      	bpl.n	80050fa <_printf_i+0xba>
 8005102:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005106:	2e00      	cmp	r6, #0
 8005108:	da03      	bge.n	8005112 <_printf_i+0xd2>
 800510a:	232d      	movs	r3, #45	; 0x2d
 800510c:	4276      	negs	r6, r6
 800510e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005112:	485a      	ldr	r0, [pc, #360]	; (800527c <_printf_i+0x23c>)
 8005114:	230a      	movs	r3, #10
 8005116:	e012      	b.n	800513e <_printf_i+0xfe>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	6820      	ldr	r0, [r4, #0]
 800511c:	1d19      	adds	r1, r3, #4
 800511e:	6029      	str	r1, [r5, #0]
 8005120:	0605      	lsls	r5, r0, #24
 8005122:	d501      	bpl.n	8005128 <_printf_i+0xe8>
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0xee>
 8005128:	0641      	lsls	r1, r0, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0xe4>
 800512c:	881e      	ldrh	r6, [r3, #0]
 800512e:	4853      	ldr	r0, [pc, #332]	; (800527c <_printf_i+0x23c>)
 8005130:	2f6f      	cmp	r7, #111	; 0x6f
 8005132:	bf0c      	ite	eq
 8005134:	2308      	moveq	r3, #8
 8005136:	230a      	movne	r3, #10
 8005138:	2100      	movs	r1, #0
 800513a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800513e:	6865      	ldr	r5, [r4, #4]
 8005140:	60a5      	str	r5, [r4, #8]
 8005142:	2d00      	cmp	r5, #0
 8005144:	bfa2      	ittt	ge
 8005146:	6821      	ldrge	r1, [r4, #0]
 8005148:	f021 0104 	bicge.w	r1, r1, #4
 800514c:	6021      	strge	r1, [r4, #0]
 800514e:	b90e      	cbnz	r6, 8005154 <_printf_i+0x114>
 8005150:	2d00      	cmp	r5, #0
 8005152:	d04b      	beq.n	80051ec <_printf_i+0x1ac>
 8005154:	4615      	mov	r5, r2
 8005156:	fbb6 f1f3 	udiv	r1, r6, r3
 800515a:	fb03 6711 	mls	r7, r3, r1, r6
 800515e:	5dc7      	ldrb	r7, [r0, r7]
 8005160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005164:	4637      	mov	r7, r6
 8005166:	42bb      	cmp	r3, r7
 8005168:	460e      	mov	r6, r1
 800516a:	d9f4      	bls.n	8005156 <_printf_i+0x116>
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10b      	bne.n	8005188 <_printf_i+0x148>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07de      	lsls	r6, r3, #31
 8005174:	d508      	bpl.n	8005188 <_printf_i+0x148>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6861      	ldr	r1, [r4, #4]
 800517a:	4299      	cmp	r1, r3
 800517c:	bfde      	ittt	le
 800517e:	2330      	movle	r3, #48	; 0x30
 8005180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005188:	1b52      	subs	r2, r2, r5
 800518a:	6122      	str	r2, [r4, #16]
 800518c:	f8cd a000 	str.w	sl, [sp]
 8005190:	464b      	mov	r3, r9
 8005192:	aa03      	add	r2, sp, #12
 8005194:	4621      	mov	r1, r4
 8005196:	4640      	mov	r0, r8
 8005198:	f7ff fee4 	bl	8004f64 <_printf_common>
 800519c:	3001      	adds	r0, #1
 800519e:	d14a      	bne.n	8005236 <_printf_i+0x1f6>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	b004      	add	sp, #16
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f043 0320 	orr.w	r3, r3, #32
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	4833      	ldr	r0, [pc, #204]	; (8005280 <_printf_i+0x240>)
 80051b4:	2778      	movs	r7, #120	; 0x78
 80051b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	6829      	ldr	r1, [r5, #0]
 80051be:	061f      	lsls	r7, r3, #24
 80051c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80051c4:	d402      	bmi.n	80051cc <_printf_i+0x18c>
 80051c6:	065f      	lsls	r7, r3, #25
 80051c8:	bf48      	it	mi
 80051ca:	b2b6      	uxthmi	r6, r6
 80051cc:	07df      	lsls	r7, r3, #31
 80051ce:	bf48      	it	mi
 80051d0:	f043 0320 	orrmi.w	r3, r3, #32
 80051d4:	6029      	str	r1, [r5, #0]
 80051d6:	bf48      	it	mi
 80051d8:	6023      	strmi	r3, [r4, #0]
 80051da:	b91e      	cbnz	r6, 80051e4 <_printf_i+0x1a4>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	2310      	movs	r3, #16
 80051e6:	e7a7      	b.n	8005138 <_printf_i+0xf8>
 80051e8:	4824      	ldr	r0, [pc, #144]	; (800527c <_printf_i+0x23c>)
 80051ea:	e7e4      	b.n	80051b6 <_printf_i+0x176>
 80051ec:	4615      	mov	r5, r2
 80051ee:	e7bd      	b.n	800516c <_printf_i+0x12c>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	6826      	ldr	r6, [r4, #0]
 80051f4:	6961      	ldr	r1, [r4, #20]
 80051f6:	1d18      	adds	r0, r3, #4
 80051f8:	6028      	str	r0, [r5, #0]
 80051fa:	0635      	lsls	r5, r6, #24
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0x1c4>
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	e002      	b.n	800520a <_printf_i+0x1ca>
 8005204:	0670      	lsls	r0, r6, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0x1c0>
 8005208:	8019      	strh	r1, [r3, #0]
 800520a:	2300      	movs	r3, #0
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	4615      	mov	r5, r2
 8005210:	e7bc      	b.n	800518c <_printf_i+0x14c>
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	602a      	str	r2, [r5, #0]
 8005218:	681d      	ldr	r5, [r3, #0]
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	2100      	movs	r1, #0
 800521e:	4628      	mov	r0, r5
 8005220:	f7fb f85e 	bl	80002e0 <memchr>
 8005224:	b108      	cbz	r0, 800522a <_printf_i+0x1ea>
 8005226:	1b40      	subs	r0, r0, r5
 8005228:	6060      	str	r0, [r4, #4]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	2300      	movs	r3, #0
 8005230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005234:	e7aa      	b.n	800518c <_printf_i+0x14c>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	462a      	mov	r2, r5
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d0ad      	beq.n	80051a0 <_printf_i+0x160>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	079b      	lsls	r3, r3, #30
 8005248:	d413      	bmi.n	8005272 <_printf_i+0x232>
 800524a:	68e0      	ldr	r0, [r4, #12]
 800524c:	9b03      	ldr	r3, [sp, #12]
 800524e:	4298      	cmp	r0, r3
 8005250:	bfb8      	it	lt
 8005252:	4618      	movlt	r0, r3
 8005254:	e7a6      	b.n	80051a4 <_printf_i+0x164>
 8005256:	2301      	movs	r3, #1
 8005258:	4632      	mov	r2, r6
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	47d0      	blx	sl
 8005260:	3001      	adds	r0, #1
 8005262:	d09d      	beq.n	80051a0 <_printf_i+0x160>
 8005264:	3501      	adds	r5, #1
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	9903      	ldr	r1, [sp, #12]
 800526a:	1a5b      	subs	r3, r3, r1
 800526c:	42ab      	cmp	r3, r5
 800526e:	dcf2      	bgt.n	8005256 <_printf_i+0x216>
 8005270:	e7eb      	b.n	800524a <_printf_i+0x20a>
 8005272:	2500      	movs	r5, #0
 8005274:	f104 0619 	add.w	r6, r4, #25
 8005278:	e7f5      	b.n	8005266 <_printf_i+0x226>
 800527a:	bf00      	nop
 800527c:	08008e8a 	.word	0x08008e8a
 8005280:	08008e9b 	.word	0x08008e9b

08005284 <_scanf_float>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	b087      	sub	sp, #28
 800528a:	4617      	mov	r7, r2
 800528c:	9303      	str	r3, [sp, #12]
 800528e:	688b      	ldr	r3, [r1, #8]
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005296:	bf83      	ittte	hi
 8005298:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800529c:	195b      	addhi	r3, r3, r5
 800529e:	9302      	strhi	r3, [sp, #8]
 80052a0:	2300      	movls	r3, #0
 80052a2:	bf86      	itte	hi
 80052a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052a8:	608b      	strhi	r3, [r1, #8]
 80052aa:	9302      	strls	r3, [sp, #8]
 80052ac:	680b      	ldr	r3, [r1, #0]
 80052ae:	468b      	mov	fp, r1
 80052b0:	2500      	movs	r5, #0
 80052b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80052b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80052ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052be:	4680      	mov	r8, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	465e      	mov	r6, fp
 80052c4:	46aa      	mov	sl, r5
 80052c6:	46a9      	mov	r9, r5
 80052c8:	9501      	str	r5, [sp, #4]
 80052ca:	68a2      	ldr	r2, [r4, #8]
 80052cc:	b152      	cbz	r2, 80052e4 <_scanf_float+0x60>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b4e      	cmp	r3, #78	; 0x4e
 80052d4:	d864      	bhi.n	80053a0 <_scanf_float+0x11c>
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d83c      	bhi.n	8005354 <_scanf_float+0xd0>
 80052da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80052de:	b2c8      	uxtb	r0, r1
 80052e0:	280e      	cmp	r0, #14
 80052e2:	d93a      	bls.n	800535a <_scanf_float+0xd6>
 80052e4:	f1b9 0f00 	cmp.w	r9, #0
 80052e8:	d003      	beq.n	80052f2 <_scanf_float+0x6e>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052f6:	f1ba 0f01 	cmp.w	sl, #1
 80052fa:	f200 8113 	bhi.w	8005524 <_scanf_float+0x2a0>
 80052fe:	455e      	cmp	r6, fp
 8005300:	f200 8105 	bhi.w	800550e <_scanf_float+0x28a>
 8005304:	2501      	movs	r5, #1
 8005306:	4628      	mov	r0, r5
 8005308:	b007      	add	sp, #28
 800530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005312:	2a0d      	cmp	r2, #13
 8005314:	d8e6      	bhi.n	80052e4 <_scanf_float+0x60>
 8005316:	a101      	add	r1, pc, #4	; (adr r1, 800531c <_scanf_float+0x98>)
 8005318:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800531c:	0800545b 	.word	0x0800545b
 8005320:	080052e5 	.word	0x080052e5
 8005324:	080052e5 	.word	0x080052e5
 8005328:	080052e5 	.word	0x080052e5
 800532c:	080054bb 	.word	0x080054bb
 8005330:	08005493 	.word	0x08005493
 8005334:	080052e5 	.word	0x080052e5
 8005338:	080052e5 	.word	0x080052e5
 800533c:	08005469 	.word	0x08005469
 8005340:	080052e5 	.word	0x080052e5
 8005344:	080052e5 	.word	0x080052e5
 8005348:	080052e5 	.word	0x080052e5
 800534c:	080052e5 	.word	0x080052e5
 8005350:	08005421 	.word	0x08005421
 8005354:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005358:	e7db      	b.n	8005312 <_scanf_float+0x8e>
 800535a:	290e      	cmp	r1, #14
 800535c:	d8c2      	bhi.n	80052e4 <_scanf_float+0x60>
 800535e:	a001      	add	r0, pc, #4	; (adr r0, 8005364 <_scanf_float+0xe0>)
 8005360:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005364:	08005413 	.word	0x08005413
 8005368:	080052e5 	.word	0x080052e5
 800536c:	08005413 	.word	0x08005413
 8005370:	080054a7 	.word	0x080054a7
 8005374:	080052e5 	.word	0x080052e5
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053fd 	.word	0x080053fd
 8005380:	080053fd 	.word	0x080053fd
 8005384:	080053fd 	.word	0x080053fd
 8005388:	080053fd 	.word	0x080053fd
 800538c:	080053fd 	.word	0x080053fd
 8005390:	080053fd 	.word	0x080053fd
 8005394:	080053fd 	.word	0x080053fd
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080053fd 	.word	0x080053fd
 80053a0:	2b6e      	cmp	r3, #110	; 0x6e
 80053a2:	d809      	bhi.n	80053b8 <_scanf_float+0x134>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d8b2      	bhi.n	800530e <_scanf_float+0x8a>
 80053a8:	2b54      	cmp	r3, #84	; 0x54
 80053aa:	d077      	beq.n	800549c <_scanf_float+0x218>
 80053ac:	2b59      	cmp	r3, #89	; 0x59
 80053ae:	d199      	bne.n	80052e4 <_scanf_float+0x60>
 80053b0:	2d07      	cmp	r5, #7
 80053b2:	d197      	bne.n	80052e4 <_scanf_float+0x60>
 80053b4:	2508      	movs	r5, #8
 80053b6:	e029      	b.n	800540c <_scanf_float+0x188>
 80053b8:	2b74      	cmp	r3, #116	; 0x74
 80053ba:	d06f      	beq.n	800549c <_scanf_float+0x218>
 80053bc:	2b79      	cmp	r3, #121	; 0x79
 80053be:	e7f6      	b.n	80053ae <_scanf_float+0x12a>
 80053c0:	6821      	ldr	r1, [r4, #0]
 80053c2:	05c8      	lsls	r0, r1, #23
 80053c4:	d51a      	bpl.n	80053fc <_scanf_float+0x178>
 80053c6:	9b02      	ldr	r3, [sp, #8]
 80053c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80053cc:	6021      	str	r1, [r4, #0]
 80053ce:	f109 0901 	add.w	r9, r9, #1
 80053d2:	b11b      	cbz	r3, 80053dc <_scanf_float+0x158>
 80053d4:	3b01      	subs	r3, #1
 80053d6:	3201      	adds	r2, #1
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	60a2      	str	r2, [r4, #8]
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	3b01      	subs	r3, #1
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	3301      	adds	r3, #1
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	f340 8084 	ble.w	80054fc <_scanf_float+0x278>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	e766      	b.n	80052ca <_scanf_float+0x46>
 80053fc:	eb1a 0f05 	cmn.w	sl, r5
 8005400:	f47f af70 	bne.w	80052e4 <_scanf_float+0x60>
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	f806 3b01 	strb.w	r3, [r6], #1
 8005410:	e7e4      	b.n	80053dc <_scanf_float+0x158>
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	0610      	lsls	r0, r2, #24
 8005416:	f57f af65 	bpl.w	80052e4 <_scanf_float+0x60>
 800541a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800541e:	e7f4      	b.n	800540a <_scanf_float+0x186>
 8005420:	f1ba 0f00 	cmp.w	sl, #0
 8005424:	d10e      	bne.n	8005444 <_scanf_float+0x1c0>
 8005426:	f1b9 0f00 	cmp.w	r9, #0
 800542a:	d10e      	bne.n	800544a <_scanf_float+0x1c6>
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005432:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005436:	d108      	bne.n	800544a <_scanf_float+0x1c6>
 8005438:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800543c:	6022      	str	r2, [r4, #0]
 800543e:	f04f 0a01 	mov.w	sl, #1
 8005442:	e7e3      	b.n	800540c <_scanf_float+0x188>
 8005444:	f1ba 0f02 	cmp.w	sl, #2
 8005448:	d055      	beq.n	80054f6 <_scanf_float+0x272>
 800544a:	2d01      	cmp	r5, #1
 800544c:	d002      	beq.n	8005454 <_scanf_float+0x1d0>
 800544e:	2d04      	cmp	r5, #4
 8005450:	f47f af48 	bne.w	80052e4 <_scanf_float+0x60>
 8005454:	3501      	adds	r5, #1
 8005456:	b2ed      	uxtb	r5, r5
 8005458:	e7d8      	b.n	800540c <_scanf_float+0x188>
 800545a:	f1ba 0f01 	cmp.w	sl, #1
 800545e:	f47f af41 	bne.w	80052e4 <_scanf_float+0x60>
 8005462:	f04f 0a02 	mov.w	sl, #2
 8005466:	e7d1      	b.n	800540c <_scanf_float+0x188>
 8005468:	b97d      	cbnz	r5, 800548a <_scanf_float+0x206>
 800546a:	f1b9 0f00 	cmp.w	r9, #0
 800546e:	f47f af3c 	bne.w	80052ea <_scanf_float+0x66>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005478:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800547c:	f47f af39 	bne.w	80052f2 <_scanf_float+0x6e>
 8005480:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	2501      	movs	r5, #1
 8005488:	e7c0      	b.n	800540c <_scanf_float+0x188>
 800548a:	2d03      	cmp	r5, #3
 800548c:	d0e2      	beq.n	8005454 <_scanf_float+0x1d0>
 800548e:	2d05      	cmp	r5, #5
 8005490:	e7de      	b.n	8005450 <_scanf_float+0x1cc>
 8005492:	2d02      	cmp	r5, #2
 8005494:	f47f af26 	bne.w	80052e4 <_scanf_float+0x60>
 8005498:	2503      	movs	r5, #3
 800549a:	e7b7      	b.n	800540c <_scanf_float+0x188>
 800549c:	2d06      	cmp	r5, #6
 800549e:	f47f af21 	bne.w	80052e4 <_scanf_float+0x60>
 80054a2:	2507      	movs	r5, #7
 80054a4:	e7b2      	b.n	800540c <_scanf_float+0x188>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	0591      	lsls	r1, r2, #22
 80054aa:	f57f af1b 	bpl.w	80052e4 <_scanf_float+0x60>
 80054ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80054b8:	e7a8      	b.n	800540c <_scanf_float+0x188>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80054c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80054c4:	d006      	beq.n	80054d4 <_scanf_float+0x250>
 80054c6:	0550      	lsls	r0, r2, #21
 80054c8:	f57f af0c 	bpl.w	80052e4 <_scanf_float+0x60>
 80054cc:	f1b9 0f00 	cmp.w	r9, #0
 80054d0:	f43f af0f 	beq.w	80052f2 <_scanf_float+0x6e>
 80054d4:	0591      	lsls	r1, r2, #22
 80054d6:	bf58      	it	pl
 80054d8:	9901      	ldrpl	r1, [sp, #4]
 80054da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054de:	bf58      	it	pl
 80054e0:	eba9 0101 	subpl.w	r1, r9, r1
 80054e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80054e8:	bf58      	it	pl
 80054ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054ee:	6022      	str	r2, [r4, #0]
 80054f0:	f04f 0900 	mov.w	r9, #0
 80054f4:	e78a      	b.n	800540c <_scanf_float+0x188>
 80054f6:	f04f 0a03 	mov.w	sl, #3
 80054fa:	e787      	b.n	800540c <_scanf_float+0x188>
 80054fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005500:	4639      	mov	r1, r7
 8005502:	4640      	mov	r0, r8
 8005504:	4798      	blx	r3
 8005506:	2800      	cmp	r0, #0
 8005508:	f43f aedf 	beq.w	80052ca <_scanf_float+0x46>
 800550c:	e6ea      	b.n	80052e4 <_scanf_float+0x60>
 800550e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005516:	463a      	mov	r2, r7
 8005518:	4640      	mov	r0, r8
 800551a:	4798      	blx	r3
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	3b01      	subs	r3, #1
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	e6ec      	b.n	80052fe <_scanf_float+0x7a>
 8005524:	1e6b      	subs	r3, r5, #1
 8005526:	2b06      	cmp	r3, #6
 8005528:	d825      	bhi.n	8005576 <_scanf_float+0x2f2>
 800552a:	2d02      	cmp	r5, #2
 800552c:	d836      	bhi.n	800559c <_scanf_float+0x318>
 800552e:	455e      	cmp	r6, fp
 8005530:	f67f aee8 	bls.w	8005304 <_scanf_float+0x80>
 8005534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005538:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800553c:	463a      	mov	r2, r7
 800553e:	4640      	mov	r0, r8
 8005540:	4798      	blx	r3
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	3b01      	subs	r3, #1
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	e7f1      	b.n	800552e <_scanf_float+0x2aa>
 800554a:	9802      	ldr	r0, [sp, #8]
 800554c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005550:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005554:	9002      	str	r0, [sp, #8]
 8005556:	463a      	mov	r2, r7
 8005558:	4640      	mov	r0, r8
 800555a:	4798      	blx	r3
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	3b01      	subs	r3, #1
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005566:	fa5f fa8a 	uxtb.w	sl, sl
 800556a:	f1ba 0f02 	cmp.w	sl, #2
 800556e:	d1ec      	bne.n	800554a <_scanf_float+0x2c6>
 8005570:	3d03      	subs	r5, #3
 8005572:	b2ed      	uxtb	r5, r5
 8005574:	1b76      	subs	r6, r6, r5
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	05da      	lsls	r2, r3, #23
 800557a:	d52f      	bpl.n	80055dc <_scanf_float+0x358>
 800557c:	055b      	lsls	r3, r3, #21
 800557e:	d510      	bpl.n	80055a2 <_scanf_float+0x31e>
 8005580:	455e      	cmp	r6, fp
 8005582:	f67f aebf 	bls.w	8005304 <_scanf_float+0x80>
 8005586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800558a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800558e:	463a      	mov	r2, r7
 8005590:	4640      	mov	r0, r8
 8005592:	4798      	blx	r3
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	3b01      	subs	r3, #1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	e7f1      	b.n	8005580 <_scanf_float+0x2fc>
 800559c:	46aa      	mov	sl, r5
 800559e:	9602      	str	r6, [sp, #8]
 80055a0:	e7df      	b.n	8005562 <_scanf_float+0x2de>
 80055a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	2965      	cmp	r1, #101	; 0x65
 80055aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80055ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80055b2:	6123      	str	r3, [r4, #16]
 80055b4:	d00c      	beq.n	80055d0 <_scanf_float+0x34c>
 80055b6:	2945      	cmp	r1, #69	; 0x45
 80055b8:	d00a      	beq.n	80055d0 <_scanf_float+0x34c>
 80055ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055be:	463a      	mov	r2, r7
 80055c0:	4640      	mov	r0, r8
 80055c2:	4798      	blx	r3
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	1eb5      	subs	r5, r6, #2
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055d4:	463a      	mov	r2, r7
 80055d6:	4640      	mov	r0, r8
 80055d8:	4798      	blx	r3
 80055da:	462e      	mov	r6, r5
 80055dc:	6825      	ldr	r5, [r4, #0]
 80055de:	f015 0510 	ands.w	r5, r5, #16
 80055e2:	d14d      	bne.n	8005680 <_scanf_float+0x3fc>
 80055e4:	7035      	strb	r5, [r6, #0]
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f0:	d11a      	bne.n	8005628 <_scanf_float+0x3a4>
 80055f2:	9b01      	ldr	r3, [sp, #4]
 80055f4:	454b      	cmp	r3, r9
 80055f6:	eba3 0209 	sub.w	r2, r3, r9
 80055fa:	d122      	bne.n	8005642 <_scanf_float+0x3be>
 80055fc:	2200      	movs	r2, #0
 80055fe:	4659      	mov	r1, fp
 8005600:	4640      	mov	r0, r8
 8005602:	f002 fac3 	bl	8007b8c <_strtod_r>
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	6821      	ldr	r1, [r4, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f011 0f02 	tst.w	r1, #2
 8005610:	f103 0204 	add.w	r2, r3, #4
 8005614:	d020      	beq.n	8005658 <_scanf_float+0x3d4>
 8005616:	9903      	ldr	r1, [sp, #12]
 8005618:	600a      	str	r2, [r1, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	ed83 0b00 	vstr	d0, [r3]
 8005620:	68e3      	ldr	r3, [r4, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60e3      	str	r3, [r4, #12]
 8005626:	e66e      	b.n	8005306 <_scanf_float+0x82>
 8005628:	9b04      	ldr	r3, [sp, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0e6      	beq.n	80055fc <_scanf_float+0x378>
 800562e:	9905      	ldr	r1, [sp, #20]
 8005630:	230a      	movs	r3, #10
 8005632:	462a      	mov	r2, r5
 8005634:	3101      	adds	r1, #1
 8005636:	4640      	mov	r0, r8
 8005638:	f002 fb30 	bl	8007c9c <_strtol_r>
 800563c:	9b04      	ldr	r3, [sp, #16]
 800563e:	9e05      	ldr	r6, [sp, #20]
 8005640:	1ac2      	subs	r2, r0, r3
 8005642:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005646:	429e      	cmp	r6, r3
 8005648:	bf28      	it	cs
 800564a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800564e:	490d      	ldr	r1, [pc, #52]	; (8005684 <_scanf_float+0x400>)
 8005650:	4630      	mov	r0, r6
 8005652:	f000 f8dd 	bl	8005810 <siprintf>
 8005656:	e7d1      	b.n	80055fc <_scanf_float+0x378>
 8005658:	f011 0f04 	tst.w	r1, #4
 800565c:	9903      	ldr	r1, [sp, #12]
 800565e:	600a      	str	r2, [r1, #0]
 8005660:	d1db      	bne.n	800561a <_scanf_float+0x396>
 8005662:	eeb4 0b40 	vcmp.f64	d0, d0
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	681e      	ldr	r6, [r3, #0]
 800566c:	d705      	bvc.n	800567a <_scanf_float+0x3f6>
 800566e:	4806      	ldr	r0, [pc, #24]	; (8005688 <_scanf_float+0x404>)
 8005670:	f000 f9d0 	bl	8005a14 <nanf>
 8005674:	ed86 0a00 	vstr	s0, [r6]
 8005678:	e7d2      	b.n	8005620 <_scanf_float+0x39c>
 800567a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800567e:	e7f9      	b.n	8005674 <_scanf_float+0x3f0>
 8005680:	2500      	movs	r5, #0
 8005682:	e640      	b.n	8005306 <_scanf_float+0x82>
 8005684:	08008eac 	.word	0x08008eac
 8005688:	0800923d 	.word	0x0800923d

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	; 0x5c
 80056aa:	f000 f914 	bl	80058d6 <memset>
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <std+0x58>)
 80056b0:	6263      	str	r3, [r4, #36]	; 0x24
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <std+0x5c>)
 80056b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <std+0x60>)
 80056b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <std+0x64>)
 80056bc:	6323      	str	r3, [r4, #48]	; 0x30
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <std+0x68>)
 80056c0:	6224      	str	r4, [r4, #32]
 80056c2:	429c      	cmp	r4, r3
 80056c4:	d006      	beq.n	80056d4 <std+0x48>
 80056c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056ca:	4294      	cmp	r4, r2
 80056cc:	d002      	beq.n	80056d4 <std+0x48>
 80056ce:	33d0      	adds	r3, #208	; 0xd0
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d105      	bne.n	80056e0 <std+0x54>
 80056d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f000 b988 	b.w	80059f0 <__retarget_lock_init_recursive>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	08005851 	.word	0x08005851
 80056e8:	08005873 	.word	0x08005873
 80056ec:	080058ab 	.word	0x080058ab
 80056f0:	080058cf 	.word	0x080058cf
 80056f4:	240002a4 	.word	0x240002a4

080056f8 <stdio_exit_handler>:
 80056f8:	4a02      	ldr	r2, [pc, #8]	; (8005704 <stdio_exit_handler+0xc>)
 80056fa:	4903      	ldr	r1, [pc, #12]	; (8005708 <stdio_exit_handler+0x10>)
 80056fc:	4803      	ldr	r0, [pc, #12]	; (800570c <stdio_exit_handler+0x14>)
 80056fe:	f000 b869 	b.w	80057d4 <_fwalk_sglue>
 8005702:	bf00      	nop
 8005704:	24000010 	.word	0x24000010
 8005708:	0800805d 	.word	0x0800805d
 800570c:	2400001c 	.word	0x2400001c

08005710 <cleanup_stdio>:
 8005710:	6841      	ldr	r1, [r0, #4]
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <cleanup_stdio+0x34>)
 8005714:	4299      	cmp	r1, r3
 8005716:	b510      	push	{r4, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	d001      	beq.n	8005720 <cleanup_stdio+0x10>
 800571c:	f002 fc9e 	bl	800805c <_fflush_r>
 8005720:	68a1      	ldr	r1, [r4, #8]
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <cleanup_stdio+0x38>)
 8005724:	4299      	cmp	r1, r3
 8005726:	d002      	beq.n	800572e <cleanup_stdio+0x1e>
 8005728:	4620      	mov	r0, r4
 800572a:	f002 fc97 	bl	800805c <_fflush_r>
 800572e:	68e1      	ldr	r1, [r4, #12]
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <cleanup_stdio+0x3c>)
 8005732:	4299      	cmp	r1, r3
 8005734:	d004      	beq.n	8005740 <cleanup_stdio+0x30>
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f002 bc8e 	b.w	800805c <_fflush_r>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	240002a4 	.word	0x240002a4
 8005748:	2400030c 	.word	0x2400030c
 800574c:	24000374 	.word	0x24000374

08005750 <global_stdio_init.part.0>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <global_stdio_init.part.0+0x30>)
 8005754:	4c0b      	ldr	r4, [pc, #44]	; (8005784 <global_stdio_init.part.0+0x34>)
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <global_stdio_init.part.0+0x38>)
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	4620      	mov	r0, r4
 800575c:	2200      	movs	r2, #0
 800575e:	2104      	movs	r1, #4
 8005760:	f7ff ff94 	bl	800568c <std>
 8005764:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005768:	2201      	movs	r2, #1
 800576a:	2109      	movs	r1, #9
 800576c:	f7ff ff8e 	bl	800568c <std>
 8005770:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005774:	2202      	movs	r2, #2
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577a:	2112      	movs	r1, #18
 800577c:	f7ff bf86 	b.w	800568c <std>
 8005780:	240003dc 	.word	0x240003dc
 8005784:	240002a4 	.word	0x240002a4
 8005788:	080056f9 	.word	0x080056f9

0800578c <__sfp_lock_acquire>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__sfp_lock_acquire+0x8>)
 800578e:	f000 b930 	b.w	80059f2 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	240003e5 	.word	0x240003e5

08005798 <__sfp_lock_release>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__sfp_lock_release+0x8>)
 800579a:	f000 b92b 	b.w	80059f4 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	240003e5 	.word	0x240003e5

080057a4 <__sinit>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4604      	mov	r4, r0
 80057a8:	f7ff fff0 	bl	800578c <__sfp_lock_acquire>
 80057ac:	6a23      	ldr	r3, [r4, #32]
 80057ae:	b11b      	cbz	r3, 80057b8 <__sinit+0x14>
 80057b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b4:	f7ff bff0 	b.w	8005798 <__sfp_lock_release>
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <__sinit+0x28>)
 80057ba:	6223      	str	r3, [r4, #32]
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__sinit+0x2c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f5      	bne.n	80057b0 <__sinit+0xc>
 80057c4:	f7ff ffc4 	bl	8005750 <global_stdio_init.part.0>
 80057c8:	e7f2      	b.n	80057b0 <__sinit+0xc>
 80057ca:	bf00      	nop
 80057cc:	08005711 	.word	0x08005711
 80057d0:	240003dc 	.word	0x240003dc

080057d4 <_fwalk_sglue>:
 80057d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d8:	4607      	mov	r7, r0
 80057da:	4688      	mov	r8, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	2600      	movs	r6, #0
 80057e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057e4:	f1b9 0901 	subs.w	r9, r9, #1
 80057e8:	d505      	bpl.n	80057f6 <_fwalk_sglue+0x22>
 80057ea:	6824      	ldr	r4, [r4, #0]
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d1f7      	bne.n	80057e0 <_fwalk_sglue+0xc>
 80057f0:	4630      	mov	r0, r6
 80057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f6:	89ab      	ldrh	r3, [r5, #12]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d907      	bls.n	800580c <_fwalk_sglue+0x38>
 80057fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005800:	3301      	adds	r3, #1
 8005802:	d003      	beq.n	800580c <_fwalk_sglue+0x38>
 8005804:	4629      	mov	r1, r5
 8005806:	4638      	mov	r0, r7
 8005808:	47c0      	blx	r8
 800580a:	4306      	orrs	r6, r0
 800580c:	3568      	adds	r5, #104	; 0x68
 800580e:	e7e9      	b.n	80057e4 <_fwalk_sglue+0x10>

08005810 <siprintf>:
 8005810:	b40e      	push	{r1, r2, r3}
 8005812:	b500      	push	{lr}
 8005814:	b09c      	sub	sp, #112	; 0x70
 8005816:	ab1d      	add	r3, sp, #116	; 0x74
 8005818:	9002      	str	r0, [sp, #8]
 800581a:	9006      	str	r0, [sp, #24]
 800581c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <siprintf+0x38>)
 8005822:	9107      	str	r1, [sp, #28]
 8005824:	9104      	str	r1, [sp, #16]
 8005826:	4909      	ldr	r1, [pc, #36]	; (800584c <siprintf+0x3c>)
 8005828:	f853 2b04 	ldr.w	r2, [r3], #4
 800582c:	9105      	str	r1, [sp, #20]
 800582e:	6800      	ldr	r0, [r0, #0]
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	a902      	add	r1, sp, #8
 8005834:	f002 fa8e 	bl	8007d54 <_svfiprintf_r>
 8005838:	9b02      	ldr	r3, [sp, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	b01c      	add	sp, #112	; 0x70
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b003      	add	sp, #12
 8005846:	4770      	bx	lr
 8005848:	24000068 	.word	0x24000068
 800584c:	ffff0208 	.word	0xffff0208

08005850 <__sread>:
 8005850:	b510      	push	{r4, lr}
 8005852:	460c      	mov	r4, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	f000 f86c 	bl	8005934 <_read_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	bfab      	itete	ge
 8005860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005862:	89a3      	ldrhlt	r3, [r4, #12]
 8005864:	181b      	addge	r3, r3, r0
 8005866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800586a:	bfac      	ite	ge
 800586c:	6563      	strge	r3, [r4, #84]	; 0x54
 800586e:	81a3      	strhlt	r3, [r4, #12]
 8005870:	bd10      	pop	{r4, pc}

08005872 <__swrite>:
 8005872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005876:	461f      	mov	r7, r3
 8005878:	898b      	ldrh	r3, [r1, #12]
 800587a:	05db      	lsls	r3, r3, #23
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	4616      	mov	r6, r2
 8005882:	d505      	bpl.n	8005890 <__swrite+0x1e>
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	2302      	movs	r3, #2
 800588a:	2200      	movs	r2, #0
 800588c:	f000 f840 	bl	8005910 <_lseek_r>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	4632      	mov	r2, r6
 800589e:	463b      	mov	r3, r7
 80058a0:	4628      	mov	r0, r5
 80058a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	f000 b867 	b.w	8005978 <_write_r>

080058aa <__sseek>:
 80058aa:	b510      	push	{r4, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b2:	f000 f82d 	bl	8005910 <_lseek_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	bf15      	itete	ne
 80058bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058c6:	81a3      	strheq	r3, [r4, #12]
 80058c8:	bf18      	it	ne
 80058ca:	81a3      	strhne	r3, [r4, #12]
 80058cc:	bd10      	pop	{r4, pc}

080058ce <__sclose>:
 80058ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d2:	f000 b80d 	b.w	80058f0 <_close_r>

080058d6 <memset>:
 80058d6:	4402      	add	r2, r0
 80058d8:	4603      	mov	r3, r0
 80058da:	4293      	cmp	r3, r2
 80058dc:	d100      	bne.n	80058e0 <memset+0xa>
 80058de:	4770      	bx	lr
 80058e0:	f803 1b01 	strb.w	r1, [r3], #1
 80058e4:	e7f9      	b.n	80058da <memset+0x4>
	...

080058e8 <_localeconv_r>:
 80058e8:	4800      	ldr	r0, [pc, #0]	; (80058ec <_localeconv_r+0x4>)
 80058ea:	4770      	bx	lr
 80058ec:	2400015c 	.word	0x2400015c

080058f0 <_close_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d06      	ldr	r5, [pc, #24]	; (800590c <_close_r+0x1c>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb f9b3 	bl	8000c66 <_close>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_close_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_close_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	240003e0 	.word	0x240003e0

08005910 <_lseek_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_lseek_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb f9c8 	bl	8000cb4 <_lseek>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_lseek_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_lseek_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	240003e0 	.word	0x240003e0

08005934 <_read_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d07      	ldr	r5, [pc, #28]	; (8005954 <_read_r+0x20>)
 8005938:	4604      	mov	r4, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb f956 	bl	8000bf4 <_read>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_read_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_read_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	240003e0 	.word	0x240003e0

08005958 <_sbrk_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d06      	ldr	r5, [pc, #24]	; (8005974 <_sbrk_r+0x1c>)
 800595c:	2300      	movs	r3, #0
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	f7fb f9b4 	bl	8000cd0 <_sbrk>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_sbrk_r+0x1a>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	b103      	cbz	r3, 8005972 <_sbrk_r+0x1a>
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	240003e0 	.word	0x240003e0

08005978 <_write_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	; (8005998 <_write_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fb f951 	bl	8000c2e <_write>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_write_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_write_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	240003e0 	.word	0x240003e0

0800599c <__errno>:
 800599c:	4b01      	ldr	r3, [pc, #4]	; (80059a4 <__errno+0x8>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	24000068 	.word	0x24000068

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4d0d      	ldr	r5, [pc, #52]	; (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	; (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1b64      	subs	r4, r4, r5
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2600      	movs	r6, #0
 80059b4:	42a6      	cmp	r6, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4d0b      	ldr	r5, [pc, #44]	; (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	; (80059ec <__libc_init_array+0x44>)
 80059bc:	f003 fa48 	bl	8008e50 <_init>
 80059c0:	1b64      	subs	r4, r4, r5
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2600      	movs	r6, #0
 80059c6:	42a6      	cmp	r6, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d0:	4798      	blx	r3
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059da:	4798      	blx	r3
 80059dc:	3601      	adds	r6, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	080092a0 	.word	0x080092a0
 80059e4:	080092a0 	.word	0x080092a0
 80059e8:	080092a0 	.word	0x080092a0
 80059ec:	080092a4 	.word	0x080092a4

080059f0 <__retarget_lock_init_recursive>:
 80059f0:	4770      	bx	lr

080059f2 <__retarget_lock_acquire_recursive>:
 80059f2:	4770      	bx	lr

080059f4 <__retarget_lock_release_recursive>:
 80059f4:	4770      	bx	lr

080059f6 <memcpy>:
 80059f6:	440a      	add	r2, r1
 80059f8:	4291      	cmp	r1, r2
 80059fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80059fe:	d100      	bne.n	8005a02 <memcpy+0xc>
 8005a00:	4770      	bx	lr
 8005a02:	b510      	push	{r4, lr}
 8005a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0c:	4291      	cmp	r1, r2
 8005a0e:	d1f9      	bne.n	8005a04 <memcpy+0xe>
 8005a10:	bd10      	pop	{r4, pc}
	...

08005a14 <nanf>:
 8005a14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a1c <nanf+0x8>
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	7fc00000 	.word	0x7fc00000

08005a20 <quorem>:
 8005a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	6903      	ldr	r3, [r0, #16]
 8005a26:	690c      	ldr	r4, [r1, #16]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	4607      	mov	r7, r0
 8005a2c:	db7e      	blt.n	8005b2c <quorem+0x10c>
 8005a2e:	3c01      	subs	r4, #1
 8005a30:	f101 0814 	add.w	r8, r1, #20
 8005a34:	f100 0514 	add.w	r5, r0, #20
 8005a38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a46:	3301      	adds	r3, #1
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a52:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a56:	d331      	bcc.n	8005abc <quorem+0x9c>
 8005a58:	f04f 0e00 	mov.w	lr, #0
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	46ac      	mov	ip, r5
 8005a60:	46f2      	mov	sl, lr
 8005a62:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a66:	b293      	uxth	r3, r2
 8005a68:	fb06 e303 	mla	r3, r6, r3, lr
 8005a6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a70:	0c1a      	lsrs	r2, r3, #16
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	ebaa 0303 	sub.w	r3, sl, r3
 8005a78:	f8dc a000 	ldr.w	sl, [ip]
 8005a7c:	fa13 f38a 	uxtah	r3, r3, sl
 8005a80:	fb06 220e 	mla	r2, r6, lr, r2
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a96:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a9a:	4581      	cmp	r9, r0
 8005a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8005aa4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005aa8:	d2db      	bcs.n	8005a62 <quorem+0x42>
 8005aaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8005aae:	b92b      	cbnz	r3, 8005abc <quorem+0x9c>
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	429d      	cmp	r5, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	d32c      	bcc.n	8005b14 <quorem+0xf4>
 8005aba:	613c      	str	r4, [r7, #16]
 8005abc:	4638      	mov	r0, r7
 8005abe:	f001 f8b5 	bl	8006c2c <__mcmp>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	db22      	blt.n	8005b0c <quorem+0xec>
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	2000      	movs	r0, #0
 8005acc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ad0:	f8d1 c000 	ldr.w	ip, [r1]
 8005ad4:	b293      	uxth	r3, r2
 8005ad6:	1ac3      	subs	r3, r0, r3
 8005ad8:	0c12      	lsrs	r2, r2, #16
 8005ada:	fa13 f38c 	uxtah	r3, r3, ip
 8005ade:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ae2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aec:	45c1      	cmp	r9, r8
 8005aee:	f841 3b04 	str.w	r3, [r1], #4
 8005af2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005af6:	d2e9      	bcs.n	8005acc <quorem+0xac>
 8005af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005afc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b00:	b922      	cbnz	r2, 8005b0c <quorem+0xec>
 8005b02:	3b04      	subs	r3, #4
 8005b04:	429d      	cmp	r5, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	d30a      	bcc.n	8005b20 <quorem+0x100>
 8005b0a:	613c      	str	r4, [r7, #16]
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	b003      	add	sp, #12
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	3b04      	subs	r3, #4
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	d1ce      	bne.n	8005aba <quorem+0x9a>
 8005b1c:	3c01      	subs	r4, #1
 8005b1e:	e7c9      	b.n	8005ab4 <quorem+0x94>
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	3b04      	subs	r3, #4
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	d1f0      	bne.n	8005b0a <quorem+0xea>
 8005b28:	3c01      	subs	r4, #1
 8005b2a:	e7eb      	b.n	8005b04 <quorem+0xe4>
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e7ee      	b.n	8005b0e <quorem+0xee>

08005b30 <_dtoa_r>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	ed2d 8b02 	vpush	{d8}
 8005b38:	69c5      	ldr	r5, [r0, #28]
 8005b3a:	b091      	sub	sp, #68	; 0x44
 8005b3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b40:	ec59 8b10 	vmov	r8, r9, d0
 8005b44:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005b46:	9106      	str	r1, [sp, #24]
 8005b48:	4606      	mov	r6, r0
 8005b4a:	9208      	str	r2, [sp, #32]
 8005b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b4e:	b975      	cbnz	r5, 8005b6e <_dtoa_r+0x3e>
 8005b50:	2010      	movs	r0, #16
 8005b52:	f7fe fea7 	bl	80048a4 <malloc>
 8005b56:	4602      	mov	r2, r0
 8005b58:	61f0      	str	r0, [r6, #28]
 8005b5a:	b920      	cbnz	r0, 8005b66 <_dtoa_r+0x36>
 8005b5c:	4ba6      	ldr	r3, [pc, #664]	; (8005df8 <_dtoa_r+0x2c8>)
 8005b5e:	21ef      	movs	r1, #239	; 0xef
 8005b60:	48a6      	ldr	r0, [pc, #664]	; (8005dfc <_dtoa_r+0x2cc>)
 8005b62:	f002 fad9 	bl	8008118 <__assert_func>
 8005b66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b6a:	6005      	str	r5, [r0, #0]
 8005b6c:	60c5      	str	r5, [r0, #12]
 8005b6e:	69f3      	ldr	r3, [r6, #28]
 8005b70:	6819      	ldr	r1, [r3, #0]
 8005b72:	b151      	cbz	r1, 8005b8a <_dtoa_r+0x5a>
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	604a      	str	r2, [r1, #4]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4093      	lsls	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 fdce 	bl	8006720 <_Bfree>
 8005b84:	69f3      	ldr	r3, [r6, #28]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f1b9 0300 	subs.w	r3, r9, #0
 8005b8e:	bfbb      	ittet	lt
 8005b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	9303      	strlt	r3, [sp, #12]
 8005b96:	2300      	movge	r3, #0
 8005b98:	2201      	movlt	r2, #1
 8005b9a:	bfac      	ite	ge
 8005b9c:	6023      	strge	r3, [r4, #0]
 8005b9e:	6022      	strlt	r2, [r4, #0]
 8005ba0:	4b97      	ldr	r3, [pc, #604]	; (8005e00 <_dtoa_r+0x2d0>)
 8005ba2:	9c03      	ldr	r4, [sp, #12]
 8005ba4:	43a3      	bics	r3, r4
 8005ba6:	d11c      	bne.n	8005be2 <_dtoa_r+0xb2>
 8005ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005bb4:	ea53 0308 	orrs.w	r3, r3, r8
 8005bb8:	f000 84fb 	beq.w	80065b2 <_dtoa_r+0xa82>
 8005bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bbe:	b963      	cbnz	r3, 8005bda <_dtoa_r+0xaa>
 8005bc0:	4b90      	ldr	r3, [pc, #576]	; (8005e04 <_dtoa_r+0x2d4>)
 8005bc2:	e020      	b.n	8005c06 <_dtoa_r+0xd6>
 8005bc4:	4b90      	ldr	r3, [pc, #576]	; (8005e08 <_dtoa_r+0x2d8>)
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	9801      	ldr	r0, [sp, #4]
 8005bd0:	b011      	add	sp, #68	; 0x44
 8005bd2:	ecbd 8b02 	vpop	{d8}
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <_dtoa_r+0x2d4>)
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	3303      	adds	r3, #3
 8005be0:	e7f3      	b.n	8005bca <_dtoa_r+0x9a>
 8005be2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005be6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	d10c      	bne.n	8005c0a <_dtoa_r+0xda>
 8005bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 84d7 	beq.w	80065ac <_dtoa_r+0xa7c>
 8005bfe:	4b83      	ldr	r3, [pc, #524]	; (8005e0c <_dtoa_r+0x2dc>)
 8005c00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	e7e1      	b.n	8005bce <_dtoa_r+0x9e>
 8005c0a:	aa0e      	add	r2, sp, #56	; 0x38
 8005c0c:	a90f      	add	r1, sp, #60	; 0x3c
 8005c0e:	4630      	mov	r0, r6
 8005c10:	eeb0 0b48 	vmov.f64	d0, d8
 8005c14:	f001 f920 	bl	8006e58 <__d2b>
 8005c18:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c1e:	4605      	mov	r5, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d046      	beq.n	8005cb2 <_dtoa_r+0x182>
 8005c24:	eeb0 7b48 	vmov.f64	d7, d8
 8005c28:	ee18 1a90 	vmov	r1, s17
 8005c2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005c30:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005c34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005c38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	ee07 1a90 	vmov	s15, r1
 8005c42:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005c46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005de0 <_dtoa_r+0x2b0>
 8005c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c4e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005de8 <_dtoa_r+0x2b8>
 8005c52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005c56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005df0 <_dtoa_r+0x2c0>
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005c62:	eeb0 7b46 	vmov.f64	d7, d6
 8005c66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005c6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005c6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	ee16 ba90 	vmov	fp, s13
 8005c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8005c7c:	d508      	bpl.n	8005c90 <_dtoa_r+0x160>
 8005c7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005c82:	eeb4 6b47 	vcmp.f64	d6, d7
 8005c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8a:	bf18      	it	ne
 8005c8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005c90:	f1bb 0f16 	cmp.w	fp, #22
 8005c94:	d82b      	bhi.n	8005cee <_dtoa_r+0x1be>
 8005c96:	495e      	ldr	r1, [pc, #376]	; (8005e10 <_dtoa_r+0x2e0>)
 8005c98:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005c9c:	ed91 7b00 	vldr	d7, [r1]
 8005ca0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	d501      	bpl.n	8005cae <_dtoa_r+0x17e>
 8005caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cae:	2100      	movs	r1, #0
 8005cb0:	e01e      	b.n	8005cf0 <_dtoa_r+0x1c0>
 8005cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005cba:	2920      	cmp	r1, #32
 8005cbc:	bfc1      	itttt	gt
 8005cbe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005cc2:	408c      	lslgt	r4, r1
 8005cc4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005cc8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005ccc:	bfd6      	itet	le
 8005cce:	f1c1 0120 	rsble	r1, r1, #32
 8005cd2:	4321      	orrgt	r1, r4
 8005cd4:	fa08 f101 	lslle.w	r1, r8, r1
 8005cd8:	ee07 1a90 	vmov	s15, r1
 8005cdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	ee17 1a90 	vmov	r1, s15
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005cec:	e7a7      	b.n	8005c3e <_dtoa_r+0x10e>
 8005cee:	2101      	movs	r1, #1
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	1e53      	subs	r3, r2, #1
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	bf45      	ittet	mi
 8005cf8:	f1c2 0301 	rsbmi	r3, r2, #1
 8005cfc:	9304      	strmi	r3, [sp, #16]
 8005cfe:	2300      	movpl	r3, #0
 8005d00:	2300      	movmi	r3, #0
 8005d02:	bf4c      	ite	mi
 8005d04:	9305      	strmi	r3, [sp, #20]
 8005d06:	9304      	strpl	r3, [sp, #16]
 8005d08:	f1bb 0f00 	cmp.w	fp, #0
 8005d0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d0e:	db18      	blt.n	8005d42 <_dtoa_r+0x212>
 8005d10:	9b05      	ldr	r3, [sp, #20]
 8005d12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005d16:	445b      	add	r3, fp
 8005d18:	9305      	str	r3, [sp, #20]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9a06      	ldr	r2, [sp, #24]
 8005d1e:	2a09      	cmp	r2, #9
 8005d20:	d848      	bhi.n	8005db4 <_dtoa_r+0x284>
 8005d22:	2a05      	cmp	r2, #5
 8005d24:	bfc4      	itt	gt
 8005d26:	3a04      	subgt	r2, #4
 8005d28:	9206      	strgt	r2, [sp, #24]
 8005d2a:	9a06      	ldr	r2, [sp, #24]
 8005d2c:	f1a2 0202 	sub.w	r2, r2, #2
 8005d30:	bfcc      	ite	gt
 8005d32:	2400      	movgt	r4, #0
 8005d34:	2401      	movle	r4, #1
 8005d36:	2a03      	cmp	r2, #3
 8005d38:	d847      	bhi.n	8005dca <_dtoa_r+0x29a>
 8005d3a:	e8df f002 	tbb	[pc, r2]
 8005d3e:	2d0b      	.short	0x2d0b
 8005d40:	392b      	.short	0x392b
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	2200      	movs	r2, #0
 8005d46:	eba3 030b 	sub.w	r3, r3, fp
 8005d4a:	9304      	str	r3, [sp, #16]
 8005d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d4e:	f1cb 0300 	rsb	r3, fp, #0
 8005d52:	e7e3      	b.n	8005d1c <_dtoa_r+0x1ec>
 8005d54:	2200      	movs	r2, #0
 8005d56:	9207      	str	r2, [sp, #28]
 8005d58:	9a08      	ldr	r2, [sp, #32]
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	dc38      	bgt.n	8005dd0 <_dtoa_r+0x2a0>
 8005d5e:	f04f 0a01 	mov.w	sl, #1
 8005d62:	46d1      	mov	r9, sl
 8005d64:	4652      	mov	r2, sl
 8005d66:	f8cd a020 	str.w	sl, [sp, #32]
 8005d6a:	69f7      	ldr	r7, [r6, #28]
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	2004      	movs	r0, #4
 8005d70:	f100 0c14 	add.w	ip, r0, #20
 8005d74:	4594      	cmp	ip, r2
 8005d76:	d930      	bls.n	8005dda <_dtoa_r+0x2aa>
 8005d78:	6079      	str	r1, [r7, #4]
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005d7e:	f000 fc8f 	bl	80066a0 <_Balloc>
 8005d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d84:	9001      	str	r0, [sp, #4]
 8005d86:	4602      	mov	r2, r0
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d145      	bne.n	8005e18 <_dtoa_r+0x2e8>
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <_dtoa_r+0x2e4>)
 8005d8e:	f240 11af 	movw	r1, #431	; 0x1af
 8005d92:	e6e5      	b.n	8005b60 <_dtoa_r+0x30>
 8005d94:	2201      	movs	r2, #1
 8005d96:	e7de      	b.n	8005d56 <_dtoa_r+0x226>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	9207      	str	r2, [sp, #28]
 8005d9c:	9a08      	ldr	r2, [sp, #32]
 8005d9e:	eb0b 0a02 	add.w	sl, fp, r2
 8005da2:	f10a 0901 	add.w	r9, sl, #1
 8005da6:	464a      	mov	r2, r9
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	bfb8      	it	lt
 8005dac:	2201      	movlt	r2, #1
 8005dae:	e7dc      	b.n	8005d6a <_dtoa_r+0x23a>
 8005db0:	2201      	movs	r2, #1
 8005db2:	e7f2      	b.n	8005d9a <_dtoa_r+0x26a>
 8005db4:	2401      	movs	r4, #1
 8005db6:	2200      	movs	r2, #0
 8005db8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	46d1      	mov	r9, sl
 8005dc4:	2212      	movs	r2, #18
 8005dc6:	9108      	str	r1, [sp, #32]
 8005dc8:	e7cf      	b.n	8005d6a <_dtoa_r+0x23a>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	e7f5      	b.n	8005dbc <_dtoa_r+0x28c>
 8005dd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005dd4:	46d1      	mov	r9, sl
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	e7c7      	b.n	8005d6a <_dtoa_r+0x23a>
 8005dda:	3101      	adds	r1, #1
 8005ddc:	0040      	lsls	r0, r0, #1
 8005dde:	e7c7      	b.n	8005d70 <_dtoa_r+0x240>
 8005de0:	636f4361 	.word	0x636f4361
 8005de4:	3fd287a7 	.word	0x3fd287a7
 8005de8:	8b60c8b3 	.word	0x8b60c8b3
 8005dec:	3fc68a28 	.word	0x3fc68a28
 8005df0:	509f79fb 	.word	0x509f79fb
 8005df4:	3fd34413 	.word	0x3fd34413
 8005df8:	08008ebe 	.word	0x08008ebe
 8005dfc:	08008ed5 	.word	0x08008ed5
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	08008eba 	.word	0x08008eba
 8005e08:	08008eb1 	.word	0x08008eb1
 8005e0c:	08008e89 	.word	0x08008e89
 8005e10:	08008fc0 	.word	0x08008fc0
 8005e14:	08008f2d 	.word	0x08008f2d
 8005e18:	69f2      	ldr	r2, [r6, #28]
 8005e1a:	9901      	ldr	r1, [sp, #4]
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	f1b9 0f0e 	cmp.w	r9, #14
 8005e22:	d86c      	bhi.n	8005efe <_dtoa_r+0x3ce>
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	d06a      	beq.n	8005efe <_dtoa_r+0x3ce>
 8005e28:	f1bb 0f00 	cmp.w	fp, #0
 8005e2c:	f340 80a0 	ble.w	8005f70 <_dtoa_r+0x440>
 8005e30:	4ac1      	ldr	r2, [pc, #772]	; (8006138 <_dtoa_r+0x608>)
 8005e32:	f00b 010f 	and.w	r1, fp, #15
 8005e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005e3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e3e:	ed92 7b00 	vldr	d7, [r2]
 8005e42:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005e46:	f000 8087 	beq.w	8005f58 <_dtoa_r+0x428>
 8005e4a:	49bc      	ldr	r1, [pc, #752]	; (800613c <_dtoa_r+0x60c>)
 8005e4c:	ed91 6b08 	vldr	d6, [r1, #32]
 8005e50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005e54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005e58:	f002 020f 	and.w	r2, r2, #15
 8005e5c:	2103      	movs	r1, #3
 8005e5e:	48b7      	ldr	r0, [pc, #732]	; (800613c <_dtoa_r+0x60c>)
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d17b      	bne.n	8005f5c <_dtoa_r+0x42c>
 8005e64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	f000 80a0 	beq.w	8005fbc <_dtoa_r+0x48c>
 8005e7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	f140 8098 	bpl.w	8005fbc <_dtoa_r+0x48c>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	f000 8094 	beq.w	8005fbc <_dtoa_r+0x48c>
 8005e94:	f1ba 0f00 	cmp.w	sl, #0
 8005e98:	dd2f      	ble.n	8005efa <_dtoa_r+0x3ca>
 8005e9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ea2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ea6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005eaa:	3101      	adds	r1, #1
 8005eac:	4654      	mov	r4, sl
 8005eae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005eb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005eb6:	ee07 1a90 	vmov	s15, r1
 8005eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ebe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ec2:	ee15 7a90 	vmov	r7, s11
 8005ec6:	ec51 0b15 	vmov	r0, r1, d5
 8005eca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	d177      	bne.n	8005fc2 <_dtoa_r+0x492>
 8005ed2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005ed6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005eda:	ec41 0b17 	vmov	d7, r0, r1
 8005ede:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee6:	f300 826a 	bgt.w	80063be <_dtoa_r+0x88e>
 8005eea:	eeb1 7b47 	vneg.f64	d7, d7
 8005eee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef6:	f100 8260 	bmi.w	80063ba <_dtoa_r+0x88a>
 8005efa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	f2c0 811d 	blt.w	8006140 <_dtoa_r+0x610>
 8005f06:	f1bb 0f0e 	cmp.w	fp, #14
 8005f0a:	f300 8119 	bgt.w	8006140 <_dtoa_r+0x610>
 8005f0e:	4b8a      	ldr	r3, [pc, #552]	; (8006138 <_dtoa_r+0x608>)
 8005f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f14:	ed93 6b00 	vldr	d6, [r3]
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f280 80b7 	bge.w	800608e <_dtoa_r+0x55e>
 8005f20:	f1b9 0f00 	cmp.w	r9, #0
 8005f24:	f300 80b3 	bgt.w	800608e <_dtoa_r+0x55e>
 8005f28:	f040 8246 	bne.w	80063b8 <_dtoa_r+0x888>
 8005f2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005f30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f40:	464c      	mov	r4, r9
 8005f42:	464f      	mov	r7, r9
 8005f44:	f280 821c 	bge.w	8006380 <_dtoa_r+0x850>
 8005f48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f4c:	2331      	movs	r3, #49	; 0x31
 8005f4e:	f808 3b01 	strb.w	r3, [r8], #1
 8005f52:	f10b 0b01 	add.w	fp, fp, #1
 8005f56:	e218      	b.n	800638a <_dtoa_r+0x85a>
 8005f58:	2102      	movs	r1, #2
 8005f5a:	e780      	b.n	8005e5e <_dtoa_r+0x32e>
 8005f5c:	07d4      	lsls	r4, r2, #31
 8005f5e:	d504      	bpl.n	8005f6a <_dtoa_r+0x43a>
 8005f60:	ed90 6b00 	vldr	d6, [r0]
 8005f64:	3101      	adds	r1, #1
 8005f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f6a:	1052      	asrs	r2, r2, #1
 8005f6c:	3008      	adds	r0, #8
 8005f6e:	e777      	b.n	8005e60 <_dtoa_r+0x330>
 8005f70:	d022      	beq.n	8005fb8 <_dtoa_r+0x488>
 8005f72:	f1cb 0200 	rsb	r2, fp, #0
 8005f76:	4970      	ldr	r1, [pc, #448]	; (8006138 <_dtoa_r+0x608>)
 8005f78:	f002 000f 	and.w	r0, r2, #15
 8005f7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005f80:	ed91 7b00 	vldr	d7, [r1]
 8005f84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f8c:	486b      	ldr	r0, [pc, #428]	; (800613c <_dtoa_r+0x60c>)
 8005f8e:	1112      	asrs	r2, r2, #4
 8005f90:	2400      	movs	r4, #0
 8005f92:	2102      	movs	r1, #2
 8005f94:	b92a      	cbnz	r2, 8005fa2 <_dtoa_r+0x472>
 8005f96:	2c00      	cmp	r4, #0
 8005f98:	f43f af6a 	beq.w	8005e70 <_dtoa_r+0x340>
 8005f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fa0:	e766      	b.n	8005e70 <_dtoa_r+0x340>
 8005fa2:	07d7      	lsls	r7, r2, #31
 8005fa4:	d505      	bpl.n	8005fb2 <_dtoa_r+0x482>
 8005fa6:	ed90 6b00 	vldr	d6, [r0]
 8005faa:	3101      	adds	r1, #1
 8005fac:	2401      	movs	r4, #1
 8005fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fb2:	1052      	asrs	r2, r2, #1
 8005fb4:	3008      	adds	r0, #8
 8005fb6:	e7ed      	b.n	8005f94 <_dtoa_r+0x464>
 8005fb8:	2102      	movs	r1, #2
 8005fba:	e759      	b.n	8005e70 <_dtoa_r+0x340>
 8005fbc:	465a      	mov	r2, fp
 8005fbe:	464c      	mov	r4, r9
 8005fc0:	e775      	b.n	8005eae <_dtoa_r+0x37e>
 8005fc2:	ec41 0b17 	vmov	d7, r0, r1
 8005fc6:	495c      	ldr	r1, [pc, #368]	; (8006138 <_dtoa_r+0x608>)
 8005fc8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005fcc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005fd0:	9901      	ldr	r1, [sp, #4]
 8005fd2:	440c      	add	r4, r1
 8005fd4:	9907      	ldr	r1, [sp, #28]
 8005fd6:	b351      	cbz	r1, 800602e <_dtoa_r+0x4fe>
 8005fd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005fdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005fe0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005fe4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005fe8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005fec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005ff0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ff4:	ee14 1a90 	vmov	r1, s9
 8005ff8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ffc:	3130      	adds	r1, #48	; 0x30
 8005ffe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006002:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600a:	f808 1b01 	strb.w	r1, [r8], #1
 800600e:	d439      	bmi.n	8006084 <_dtoa_r+0x554>
 8006010:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006014:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	d472      	bmi.n	8006104 <_dtoa_r+0x5d4>
 800601e:	45a0      	cmp	r8, r4
 8006020:	f43f af6b 	beq.w	8005efa <_dtoa_r+0x3ca>
 8006024:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006028:	ee26 6b03 	vmul.f64	d6, d6, d3
 800602c:	e7e0      	b.n	8005ff0 <_dtoa_r+0x4c0>
 800602e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006032:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006036:	4620      	mov	r0, r4
 8006038:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800603c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006040:	ee14 1a90 	vmov	r1, s9
 8006044:	3130      	adds	r1, #48	; 0x30
 8006046:	f808 1b01 	strb.w	r1, [r8], #1
 800604a:	45a0      	cmp	r8, r4
 800604c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006050:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006054:	d118      	bne.n	8006088 <_dtoa_r+0x558>
 8006056:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800605a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800605e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006066:	dc4d      	bgt.n	8006104 <_dtoa_r+0x5d4>
 8006068:	ee35 5b47 	vsub.f64	d5, d5, d7
 800606c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	f57f af41 	bpl.w	8005efa <_dtoa_r+0x3ca>
 8006078:	4680      	mov	r8, r0
 800607a:	3801      	subs	r0, #1
 800607c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d0f9      	beq.n	8006078 <_dtoa_r+0x548>
 8006084:	4693      	mov	fp, r2
 8006086:	e02a      	b.n	80060de <_dtoa_r+0x5ae>
 8006088:	ee26 6b03 	vmul.f64	d6, d6, d3
 800608c:	e7d6      	b.n	800603c <_dtoa_r+0x50c>
 800608e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006092:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800609a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800609e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80060a2:	ee15 3a10 	vmov	r3, s10
 80060a6:	3330      	adds	r3, #48	; 0x30
 80060a8:	f808 3b01 	strb.w	r3, [r8], #1
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	eba8 0303 	sub.w	r3, r8, r3
 80060b2:	4599      	cmp	r9, r3
 80060b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80060b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80060bc:	d133      	bne.n	8006126 <_dtoa_r+0x5f6>
 80060be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80060c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80060c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ca:	dc1a      	bgt.n	8006102 <_dtoa_r+0x5d2>
 80060cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80060d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d4:	d103      	bne.n	80060de <_dtoa_r+0x5ae>
 80060d6:	ee15 3a10 	vmov	r3, s10
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d411      	bmi.n	8006102 <_dtoa_r+0x5d2>
 80060de:	4629      	mov	r1, r5
 80060e0:	4630      	mov	r0, r6
 80060e2:	f000 fb1d 	bl	8006720 <_Bfree>
 80060e6:	2300      	movs	r3, #0
 80060e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060ea:	f888 3000 	strb.w	r3, [r8]
 80060ee:	f10b 0301 	add.w	r3, fp, #1
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f43f ad69 	beq.w	8005bce <_dtoa_r+0x9e>
 80060fc:	f8c3 8000 	str.w	r8, [r3]
 8006100:	e565      	b.n	8005bce <_dtoa_r+0x9e>
 8006102:	465a      	mov	r2, fp
 8006104:	4643      	mov	r3, r8
 8006106:	4698      	mov	r8, r3
 8006108:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800610c:	2939      	cmp	r1, #57	; 0x39
 800610e:	d106      	bne.n	800611e <_dtoa_r+0x5ee>
 8006110:	9901      	ldr	r1, [sp, #4]
 8006112:	4299      	cmp	r1, r3
 8006114:	d1f7      	bne.n	8006106 <_dtoa_r+0x5d6>
 8006116:	9801      	ldr	r0, [sp, #4]
 8006118:	2130      	movs	r1, #48	; 0x30
 800611a:	3201      	adds	r2, #1
 800611c:	7001      	strb	r1, [r0, #0]
 800611e:	7819      	ldrb	r1, [r3, #0]
 8006120:	3101      	adds	r1, #1
 8006122:	7019      	strb	r1, [r3, #0]
 8006124:	e7ae      	b.n	8006084 <_dtoa_r+0x554>
 8006126:	ee27 7b04 	vmul.f64	d7, d7, d4
 800612a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006132:	d1b2      	bne.n	800609a <_dtoa_r+0x56a>
 8006134:	e7d3      	b.n	80060de <_dtoa_r+0x5ae>
 8006136:	bf00      	nop
 8006138:	08008fc0 	.word	0x08008fc0
 800613c:	08008f98 	.word	0x08008f98
 8006140:	9907      	ldr	r1, [sp, #28]
 8006142:	2900      	cmp	r1, #0
 8006144:	f000 80d0 	beq.w	80062e8 <_dtoa_r+0x7b8>
 8006148:	9906      	ldr	r1, [sp, #24]
 800614a:	2901      	cmp	r1, #1
 800614c:	f300 80b4 	bgt.w	80062b8 <_dtoa_r+0x788>
 8006150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006152:	2900      	cmp	r1, #0
 8006154:	f000 80ac 	beq.w	80062b0 <_dtoa_r+0x780>
 8006158:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800615c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006160:	461c      	mov	r4, r3
 8006162:	9309      	str	r3, [sp, #36]	; 0x24
 8006164:	9b04      	ldr	r3, [sp, #16]
 8006166:	4413      	add	r3, r2
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	9b05      	ldr	r3, [sp, #20]
 800616c:	2101      	movs	r1, #1
 800616e:	4413      	add	r3, r2
 8006170:	4630      	mov	r0, r6
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f000 fbd4 	bl	8006920 <__i2b>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	4607      	mov	r7, r0
 800617c:	f1b8 0f00 	cmp.w	r8, #0
 8006180:	d00d      	beq.n	800619e <_dtoa_r+0x66e>
 8006182:	9a05      	ldr	r2, [sp, #20]
 8006184:	2a00      	cmp	r2, #0
 8006186:	dd0a      	ble.n	800619e <_dtoa_r+0x66e>
 8006188:	4542      	cmp	r2, r8
 800618a:	9904      	ldr	r1, [sp, #16]
 800618c:	bfa8      	it	ge
 800618e:	4642      	movge	r2, r8
 8006190:	1a89      	subs	r1, r1, r2
 8006192:	9104      	str	r1, [sp, #16]
 8006194:	9905      	ldr	r1, [sp, #20]
 8006196:	eba8 0802 	sub.w	r8, r8, r2
 800619a:	1a8a      	subs	r2, r1, r2
 800619c:	9205      	str	r2, [sp, #20]
 800619e:	b303      	cbz	r3, 80061e2 <_dtoa_r+0x6b2>
 80061a0:	9a07      	ldr	r2, [sp, #28]
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f000 80a5 	beq.w	80062f2 <_dtoa_r+0x7c2>
 80061a8:	2c00      	cmp	r4, #0
 80061aa:	dd13      	ble.n	80061d4 <_dtoa_r+0x6a4>
 80061ac:	4639      	mov	r1, r7
 80061ae:	4622      	mov	r2, r4
 80061b0:	4630      	mov	r0, r6
 80061b2:	930d      	str	r3, [sp, #52]	; 0x34
 80061b4:	f000 fc74 	bl	8006aa0 <__pow5mult>
 80061b8:	462a      	mov	r2, r5
 80061ba:	4601      	mov	r1, r0
 80061bc:	4607      	mov	r7, r0
 80061be:	4630      	mov	r0, r6
 80061c0:	f000 fbc4 	bl	800694c <__multiply>
 80061c4:	4629      	mov	r1, r5
 80061c6:	9009      	str	r0, [sp, #36]	; 0x24
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 faa9 	bl	8006720 <_Bfree>
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d2:	4615      	mov	r5, r2
 80061d4:	1b1a      	subs	r2, r3, r4
 80061d6:	d004      	beq.n	80061e2 <_dtoa_r+0x6b2>
 80061d8:	4629      	mov	r1, r5
 80061da:	4630      	mov	r0, r6
 80061dc:	f000 fc60 	bl	8006aa0 <__pow5mult>
 80061e0:	4605      	mov	r5, r0
 80061e2:	2101      	movs	r1, #1
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 fb9b 	bl	8006920 <__i2b>
 80061ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	f340 8081 	ble.w	80062f6 <_dtoa_r+0x7c6>
 80061f4:	461a      	mov	r2, r3
 80061f6:	4601      	mov	r1, r0
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 fc51 	bl	8006aa0 <__pow5mult>
 80061fe:	9b06      	ldr	r3, [sp, #24]
 8006200:	2b01      	cmp	r3, #1
 8006202:	4604      	mov	r4, r0
 8006204:	dd7a      	ble.n	80062fc <_dtoa_r+0x7cc>
 8006206:	2300      	movs	r3, #0
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	6922      	ldr	r2, [r4, #16]
 800620c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006210:	6910      	ldr	r0, [r2, #16]
 8006212:	f000 fb37 	bl	8006884 <__hi0bits>
 8006216:	f1c0 0020 	rsb	r0, r0, #32
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	4418      	add	r0, r3
 800621e:	f010 001f 	ands.w	r0, r0, #31
 8006222:	f000 8093 	beq.w	800634c <_dtoa_r+0x81c>
 8006226:	f1c0 0220 	rsb	r2, r0, #32
 800622a:	2a04      	cmp	r2, #4
 800622c:	f340 8085 	ble.w	800633a <_dtoa_r+0x80a>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	f1c0 001c 	rsb	r0, r0, #28
 8006236:	4403      	add	r3, r0
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	4480      	add	r8, r0
 800623e:	4403      	add	r3, r0
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	9b04      	ldr	r3, [sp, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	dd05      	ble.n	8006254 <_dtoa_r+0x724>
 8006248:	4629      	mov	r1, r5
 800624a:	461a      	mov	r2, r3
 800624c:	4630      	mov	r0, r6
 800624e:	f000 fc81 	bl	8006b54 <__lshift>
 8006252:	4605      	mov	r5, r0
 8006254:	9b05      	ldr	r3, [sp, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	dd05      	ble.n	8006266 <_dtoa_r+0x736>
 800625a:	4621      	mov	r1, r4
 800625c:	461a      	mov	r2, r3
 800625e:	4630      	mov	r0, r6
 8006260:	f000 fc78 	bl	8006b54 <__lshift>
 8006264:	4604      	mov	r4, r0
 8006266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d071      	beq.n	8006350 <_dtoa_r+0x820>
 800626c:	4621      	mov	r1, r4
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fcdc 	bl	8006c2c <__mcmp>
 8006274:	2800      	cmp	r0, #0
 8006276:	da6b      	bge.n	8006350 <_dtoa_r+0x820>
 8006278:	2300      	movs	r3, #0
 800627a:	4629      	mov	r1, r5
 800627c:	220a      	movs	r2, #10
 800627e:	4630      	mov	r0, r6
 8006280:	f000 fa70 	bl	8006764 <__multadd>
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	f10b 3bff 	add.w	fp, fp, #4294967295
 800628a:	4605      	mov	r5, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8197 	beq.w	80065c0 <_dtoa_r+0xa90>
 8006292:	4639      	mov	r1, r7
 8006294:	2300      	movs	r3, #0
 8006296:	220a      	movs	r2, #10
 8006298:	4630      	mov	r0, r6
 800629a:	f000 fa63 	bl	8006764 <__multadd>
 800629e:	f1ba 0f00 	cmp.w	sl, #0
 80062a2:	4607      	mov	r7, r0
 80062a4:	f300 8093 	bgt.w	80063ce <_dtoa_r+0x89e>
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	dc57      	bgt.n	800635e <_dtoa_r+0x82e>
 80062ae:	e08e      	b.n	80063ce <_dtoa_r+0x89e>
 80062b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80062b6:	e751      	b.n	800615c <_dtoa_r+0x62c>
 80062b8:	f109 34ff 	add.w	r4, r9, #4294967295
 80062bc:	42a3      	cmp	r3, r4
 80062be:	bfbf      	itttt	lt
 80062c0:	1ae2      	sublt	r2, r4, r3
 80062c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062c4:	189b      	addlt	r3, r3, r2
 80062c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062c8:	bfae      	itee	ge
 80062ca:	1b1c      	subge	r4, r3, r4
 80062cc:	4623      	movlt	r3, r4
 80062ce:	2400      	movlt	r4, #0
 80062d0:	f1b9 0f00 	cmp.w	r9, #0
 80062d4:	bfb5      	itete	lt
 80062d6:	9a04      	ldrlt	r2, [sp, #16]
 80062d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80062dc:	eba2 0809 	sublt.w	r8, r2, r9
 80062e0:	464a      	movge	r2, r9
 80062e2:	bfb8      	it	lt
 80062e4:	2200      	movlt	r2, #0
 80062e6:	e73c      	b.n	8006162 <_dtoa_r+0x632>
 80062e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80062ec:	9f07      	ldr	r7, [sp, #28]
 80062ee:	461c      	mov	r4, r3
 80062f0:	e744      	b.n	800617c <_dtoa_r+0x64c>
 80062f2:	461a      	mov	r2, r3
 80062f4:	e770      	b.n	80061d8 <_dtoa_r+0x6a8>
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	dc18      	bgt.n	800632e <_dtoa_r+0x7fe>
 80062fc:	9b02      	ldr	r3, [sp, #8]
 80062fe:	b9b3      	cbnz	r3, 800632e <_dtoa_r+0x7fe>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006306:	b9a2      	cbnz	r2, 8006332 <_dtoa_r+0x802>
 8006308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800630c:	0d12      	lsrs	r2, r2, #20
 800630e:	0512      	lsls	r2, r2, #20
 8006310:	b18a      	cbz	r2, 8006336 <_dtoa_r+0x806>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	3301      	adds	r3, #1
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	9b05      	ldr	r3, [sp, #20]
 800631a:	3301      	adds	r3, #1
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	2301      	movs	r3, #1
 8006320:	9309      	str	r3, [sp, #36]	; 0x24
 8006322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af70 	bne.w	800620a <_dtoa_r+0x6da>
 800632a:	2001      	movs	r0, #1
 800632c:	e775      	b.n	800621a <_dtoa_r+0x6ea>
 800632e:	2300      	movs	r3, #0
 8006330:	e7f6      	b.n	8006320 <_dtoa_r+0x7f0>
 8006332:	9b02      	ldr	r3, [sp, #8]
 8006334:	e7f4      	b.n	8006320 <_dtoa_r+0x7f0>
 8006336:	9209      	str	r2, [sp, #36]	; 0x24
 8006338:	e7f3      	b.n	8006322 <_dtoa_r+0x7f2>
 800633a:	d082      	beq.n	8006242 <_dtoa_r+0x712>
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	321c      	adds	r2, #28
 8006340:	4413      	add	r3, r2
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	4490      	add	r8, r2
 8006348:	4413      	add	r3, r2
 800634a:	e779      	b.n	8006240 <_dtoa_r+0x710>
 800634c:	4602      	mov	r2, r0
 800634e:	e7f5      	b.n	800633c <_dtoa_r+0x80c>
 8006350:	f1b9 0f00 	cmp.w	r9, #0
 8006354:	dc36      	bgt.n	80063c4 <_dtoa_r+0x894>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	dd33      	ble.n	80063c4 <_dtoa_r+0x894>
 800635c:	46ca      	mov	sl, r9
 800635e:	f1ba 0f00 	cmp.w	sl, #0
 8006362:	d10d      	bne.n	8006380 <_dtoa_r+0x850>
 8006364:	4621      	mov	r1, r4
 8006366:	4653      	mov	r3, sl
 8006368:	2205      	movs	r2, #5
 800636a:	4630      	mov	r0, r6
 800636c:	f000 f9fa 	bl	8006764 <__multadd>
 8006370:	4601      	mov	r1, r0
 8006372:	4604      	mov	r4, r0
 8006374:	4628      	mov	r0, r5
 8006376:	f000 fc59 	bl	8006c2c <__mcmp>
 800637a:	2800      	cmp	r0, #0
 800637c:	f73f ade4 	bgt.w	8005f48 <_dtoa_r+0x418>
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006386:	ea6f 0b03 	mvn.w	fp, r3
 800638a:	f04f 0900 	mov.w	r9, #0
 800638e:	4621      	mov	r1, r4
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f9c5 	bl	8006720 <_Bfree>
 8006396:	2f00      	cmp	r7, #0
 8006398:	f43f aea1 	beq.w	80060de <_dtoa_r+0x5ae>
 800639c:	f1b9 0f00 	cmp.w	r9, #0
 80063a0:	d005      	beq.n	80063ae <_dtoa_r+0x87e>
 80063a2:	45b9      	cmp	r9, r7
 80063a4:	d003      	beq.n	80063ae <_dtoa_r+0x87e>
 80063a6:	4649      	mov	r1, r9
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 f9b9 	bl	8006720 <_Bfree>
 80063ae:	4639      	mov	r1, r7
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f9b5 	bl	8006720 <_Bfree>
 80063b6:	e692      	b.n	80060de <_dtoa_r+0x5ae>
 80063b8:	2400      	movs	r4, #0
 80063ba:	4627      	mov	r7, r4
 80063bc:	e7e0      	b.n	8006380 <_dtoa_r+0x850>
 80063be:	4693      	mov	fp, r2
 80063c0:	4627      	mov	r7, r4
 80063c2:	e5c1      	b.n	8005f48 <_dtoa_r+0x418>
 80063c4:	9b07      	ldr	r3, [sp, #28]
 80063c6:	46ca      	mov	sl, r9
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8100 	beq.w	80065ce <_dtoa_r+0xa9e>
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd05      	ble.n	80063e0 <_dtoa_r+0x8b0>
 80063d4:	4639      	mov	r1, r7
 80063d6:	4642      	mov	r2, r8
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 fbbb 	bl	8006b54 <__lshift>
 80063de:	4607      	mov	r7, r0
 80063e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d05d      	beq.n	80064a2 <_dtoa_r+0x972>
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f959 	bl	80066a0 <_Balloc>
 80063ee:	4680      	mov	r8, r0
 80063f0:	b928      	cbnz	r0, 80063fe <_dtoa_r+0x8ce>
 80063f2:	4b82      	ldr	r3, [pc, #520]	; (80065fc <_dtoa_r+0xacc>)
 80063f4:	4602      	mov	r2, r0
 80063f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063fa:	f7ff bbb1 	b.w	8005b60 <_dtoa_r+0x30>
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	3202      	adds	r2, #2
 8006402:	0092      	lsls	r2, r2, #2
 8006404:	f107 010c 	add.w	r1, r7, #12
 8006408:	300c      	adds	r0, #12
 800640a:	f7ff faf4 	bl	80059f6 <memcpy>
 800640e:	2201      	movs	r2, #1
 8006410:	4641      	mov	r1, r8
 8006412:	4630      	mov	r0, r6
 8006414:	f000 fb9e 	bl	8006b54 <__lshift>
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	3301      	adds	r3, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	4453      	add	r3, sl
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	46b9      	mov	r9, r7
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	4607      	mov	r7, r0
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	4621      	mov	r1, r4
 8006434:	3b01      	subs	r3, #1
 8006436:	4628      	mov	r0, r5
 8006438:	9302      	str	r3, [sp, #8]
 800643a:	f7ff faf1 	bl	8005a20 <quorem>
 800643e:	4603      	mov	r3, r0
 8006440:	3330      	adds	r3, #48	; 0x30
 8006442:	9005      	str	r0, [sp, #20]
 8006444:	4649      	mov	r1, r9
 8006446:	4628      	mov	r0, r5
 8006448:	9309      	str	r3, [sp, #36]	; 0x24
 800644a:	f000 fbef 	bl	8006c2c <__mcmp>
 800644e:	463a      	mov	r2, r7
 8006450:	4682      	mov	sl, r0
 8006452:	4621      	mov	r1, r4
 8006454:	4630      	mov	r0, r6
 8006456:	f000 fc05 	bl	8006c64 <__mdiff>
 800645a:	68c2      	ldr	r2, [r0, #12]
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	4680      	mov	r8, r0
 8006460:	bb0a      	cbnz	r2, 80064a6 <_dtoa_r+0x976>
 8006462:	4601      	mov	r1, r0
 8006464:	4628      	mov	r0, r5
 8006466:	f000 fbe1 	bl	8006c2c <__mcmp>
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	4602      	mov	r2, r0
 800646e:	4641      	mov	r1, r8
 8006470:	4630      	mov	r0, r6
 8006472:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006476:	f000 f953 	bl	8006720 <_Bfree>
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800647e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006482:	ea43 0102 	orr.w	r1, r3, r2
 8006486:	9b07      	ldr	r3, [sp, #28]
 8006488:	4319      	orrs	r1, r3
 800648a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648c:	d10d      	bne.n	80064aa <_dtoa_r+0x97a>
 800648e:	2b39      	cmp	r3, #57	; 0x39
 8006490:	d029      	beq.n	80064e6 <_dtoa_r+0x9b6>
 8006492:	f1ba 0f00 	cmp.w	sl, #0
 8006496:	dd01      	ble.n	800649c <_dtoa_r+0x96c>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	3331      	adds	r3, #49	; 0x31
 800649c:	9a02      	ldr	r2, [sp, #8]
 800649e:	7013      	strb	r3, [r2, #0]
 80064a0:	e775      	b.n	800638e <_dtoa_r+0x85e>
 80064a2:	4638      	mov	r0, r7
 80064a4:	e7b8      	b.n	8006418 <_dtoa_r+0x8e8>
 80064a6:	2201      	movs	r2, #1
 80064a8:	e7e1      	b.n	800646e <_dtoa_r+0x93e>
 80064aa:	f1ba 0f00 	cmp.w	sl, #0
 80064ae:	db06      	blt.n	80064be <_dtoa_r+0x98e>
 80064b0:	9906      	ldr	r1, [sp, #24]
 80064b2:	ea41 0a0a 	orr.w	sl, r1, sl
 80064b6:	9907      	ldr	r1, [sp, #28]
 80064b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80064bc:	d120      	bne.n	8006500 <_dtoa_r+0x9d0>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	ddec      	ble.n	800649c <_dtoa_r+0x96c>
 80064c2:	4629      	mov	r1, r5
 80064c4:	2201      	movs	r2, #1
 80064c6:	4630      	mov	r0, r6
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	f000 fb43 	bl	8006b54 <__lshift>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4605      	mov	r5, r0
 80064d2:	f000 fbab 	bl	8006c2c <__mcmp>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	9b04      	ldr	r3, [sp, #16]
 80064da:	dc02      	bgt.n	80064e2 <_dtoa_r+0x9b2>
 80064dc:	d1de      	bne.n	800649c <_dtoa_r+0x96c>
 80064de:	07da      	lsls	r2, r3, #31
 80064e0:	d5dc      	bpl.n	800649c <_dtoa_r+0x96c>
 80064e2:	2b39      	cmp	r3, #57	; 0x39
 80064e4:	d1d8      	bne.n	8006498 <_dtoa_r+0x968>
 80064e6:	9a02      	ldr	r2, [sp, #8]
 80064e8:	2339      	movs	r3, #57	; 0x39
 80064ea:	7013      	strb	r3, [r2, #0]
 80064ec:	4643      	mov	r3, r8
 80064ee:	4698      	mov	r8, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80064f6:	2a39      	cmp	r2, #57	; 0x39
 80064f8:	d051      	beq.n	800659e <_dtoa_r+0xa6e>
 80064fa:	3201      	adds	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e746      	b.n	800638e <_dtoa_r+0x85e>
 8006500:	2a00      	cmp	r2, #0
 8006502:	dd03      	ble.n	800650c <_dtoa_r+0x9dc>
 8006504:	2b39      	cmp	r3, #57	; 0x39
 8006506:	d0ee      	beq.n	80064e6 <_dtoa_r+0x9b6>
 8006508:	3301      	adds	r3, #1
 800650a:	e7c7      	b.n	800649c <_dtoa_r+0x96c>
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	9908      	ldr	r1, [sp, #32]
 8006510:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006514:	428a      	cmp	r2, r1
 8006516:	d02b      	beq.n	8006570 <_dtoa_r+0xa40>
 8006518:	4629      	mov	r1, r5
 800651a:	2300      	movs	r3, #0
 800651c:	220a      	movs	r2, #10
 800651e:	4630      	mov	r0, r6
 8006520:	f000 f920 	bl	8006764 <__multadd>
 8006524:	45b9      	cmp	r9, r7
 8006526:	4605      	mov	r5, r0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f04f 020a 	mov.w	r2, #10
 8006530:	4649      	mov	r1, r9
 8006532:	4630      	mov	r0, r6
 8006534:	d107      	bne.n	8006546 <_dtoa_r+0xa16>
 8006536:	f000 f915 	bl	8006764 <__multadd>
 800653a:	4681      	mov	r9, r0
 800653c:	4607      	mov	r7, r0
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	e774      	b.n	8006430 <_dtoa_r+0x900>
 8006546:	f000 f90d 	bl	8006764 <__multadd>
 800654a:	4639      	mov	r1, r7
 800654c:	4681      	mov	r9, r0
 800654e:	2300      	movs	r3, #0
 8006550:	220a      	movs	r2, #10
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f906 	bl	8006764 <__multadd>
 8006558:	4607      	mov	r7, r0
 800655a:	e7f0      	b.n	800653e <_dtoa_r+0xa0e>
 800655c:	f1ba 0f00 	cmp.w	sl, #0
 8006560:	9a01      	ldr	r2, [sp, #4]
 8006562:	bfcc      	ite	gt
 8006564:	46d0      	movgt	r8, sl
 8006566:	f04f 0801 	movle.w	r8, #1
 800656a:	4490      	add	r8, r2
 800656c:	f04f 0900 	mov.w	r9, #0
 8006570:	4629      	mov	r1, r5
 8006572:	2201      	movs	r2, #1
 8006574:	4630      	mov	r0, r6
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	f000 faec 	bl	8006b54 <__lshift>
 800657c:	4621      	mov	r1, r4
 800657e:	4605      	mov	r5, r0
 8006580:	f000 fb54 	bl	8006c2c <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	dcb1      	bgt.n	80064ec <_dtoa_r+0x9bc>
 8006588:	d102      	bne.n	8006590 <_dtoa_r+0xa60>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d4ad      	bmi.n	80064ec <_dtoa_r+0x9bc>
 8006590:	4643      	mov	r3, r8
 8006592:	4698      	mov	r8, r3
 8006594:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006598:	2a30      	cmp	r2, #48	; 0x30
 800659a:	d0fa      	beq.n	8006592 <_dtoa_r+0xa62>
 800659c:	e6f7      	b.n	800638e <_dtoa_r+0x85e>
 800659e:	9a01      	ldr	r2, [sp, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d1a4      	bne.n	80064ee <_dtoa_r+0x9be>
 80065a4:	f10b 0b01 	add.w	fp, fp, #1
 80065a8:	2331      	movs	r3, #49	; 0x31
 80065aa:	e778      	b.n	800649e <_dtoa_r+0x96e>
 80065ac:	4b14      	ldr	r3, [pc, #80]	; (8006600 <_dtoa_r+0xad0>)
 80065ae:	f7ff bb2a 	b.w	8005c06 <_dtoa_r+0xd6>
 80065b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f47f ab05 	bne.w	8005bc4 <_dtoa_r+0x94>
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <_dtoa_r+0xad4>)
 80065bc:	f7ff bb23 	b.w	8005c06 <_dtoa_r+0xd6>
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	dc03      	bgt.n	80065ce <_dtoa_r+0xa9e>
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	f73f aec8 	bgt.w	800635e <_dtoa_r+0x82e>
 80065ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7ff fa23 	bl	8005a20 <quorem>
 80065da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80065de:	f808 3b01 	strb.w	r3, [r8], #1
 80065e2:	9a01      	ldr	r2, [sp, #4]
 80065e4:	eba8 0202 	sub.w	r2, r8, r2
 80065e8:	4592      	cmp	sl, r2
 80065ea:	ddb7      	ble.n	800655c <_dtoa_r+0xa2c>
 80065ec:	4629      	mov	r1, r5
 80065ee:	2300      	movs	r3, #0
 80065f0:	220a      	movs	r2, #10
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 f8b6 	bl	8006764 <__multadd>
 80065f8:	4605      	mov	r5, r0
 80065fa:	e7ea      	b.n	80065d2 <_dtoa_r+0xaa2>
 80065fc:	08008f2d 	.word	0x08008f2d
 8006600:	08008e88 	.word	0x08008e88
 8006604:	08008eb1 	.word	0x08008eb1

08006608 <_free_r>:
 8006608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800660a:	2900      	cmp	r1, #0
 800660c:	d044      	beq.n	8006698 <_free_r+0x90>
 800660e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006612:	9001      	str	r0, [sp, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f1a1 0404 	sub.w	r4, r1, #4
 800661a:	bfb8      	it	lt
 800661c:	18e4      	addlt	r4, r4, r3
 800661e:	f7fe f9e9 	bl	80049f4 <__malloc_lock>
 8006622:	4a1e      	ldr	r2, [pc, #120]	; (800669c <_free_r+0x94>)
 8006624:	9801      	ldr	r0, [sp, #4]
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	b933      	cbnz	r3, 8006638 <_free_r+0x30>
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	6014      	str	r4, [r2, #0]
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006634:	f7fe b9e4 	b.w	8004a00 <__malloc_unlock>
 8006638:	42a3      	cmp	r3, r4
 800663a:	d908      	bls.n	800664e <_free_r+0x46>
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	1961      	adds	r1, r4, r5
 8006640:	428b      	cmp	r3, r1
 8006642:	bf01      	itttt	eq
 8006644:	6819      	ldreq	r1, [r3, #0]
 8006646:	685b      	ldreq	r3, [r3, #4]
 8006648:	1949      	addeq	r1, r1, r5
 800664a:	6021      	streq	r1, [r4, #0]
 800664c:	e7ed      	b.n	800662a <_free_r+0x22>
 800664e:	461a      	mov	r2, r3
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	b10b      	cbz	r3, 8006658 <_free_r+0x50>
 8006654:	42a3      	cmp	r3, r4
 8006656:	d9fa      	bls.n	800664e <_free_r+0x46>
 8006658:	6811      	ldr	r1, [r2, #0]
 800665a:	1855      	adds	r5, r2, r1
 800665c:	42a5      	cmp	r5, r4
 800665e:	d10b      	bne.n	8006678 <_free_r+0x70>
 8006660:	6824      	ldr	r4, [r4, #0]
 8006662:	4421      	add	r1, r4
 8006664:	1854      	adds	r4, r2, r1
 8006666:	42a3      	cmp	r3, r4
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	d1e0      	bne.n	800662e <_free_r+0x26>
 800666c:	681c      	ldr	r4, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	440c      	add	r4, r1
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	e7da      	b.n	800662e <_free_r+0x26>
 8006678:	d902      	bls.n	8006680 <_free_r+0x78>
 800667a:	230c      	movs	r3, #12
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	e7d6      	b.n	800662e <_free_r+0x26>
 8006680:	6825      	ldr	r5, [r4, #0]
 8006682:	1961      	adds	r1, r4, r5
 8006684:	428b      	cmp	r3, r1
 8006686:	bf04      	itt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	bf04      	itt	eq
 8006690:	1949      	addeq	r1, r1, r5
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	6054      	str	r4, [r2, #4]
 8006696:	e7ca      	b.n	800662e <_free_r+0x26>
 8006698:	b003      	add	sp, #12
 800669a:	bd30      	pop	{r4, r5, pc}
 800669c:	2400029c 	.word	0x2400029c

080066a0 <_Balloc>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	69c6      	ldr	r6, [r0, #28]
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	b976      	cbnz	r6, 80066c8 <_Balloc+0x28>
 80066aa:	2010      	movs	r0, #16
 80066ac:	f7fe f8fa 	bl	80048a4 <malloc>
 80066b0:	4602      	mov	r2, r0
 80066b2:	61e0      	str	r0, [r4, #28]
 80066b4:	b920      	cbnz	r0, 80066c0 <_Balloc+0x20>
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <_Balloc+0x78>)
 80066b8:	4818      	ldr	r0, [pc, #96]	; (800671c <_Balloc+0x7c>)
 80066ba:	216b      	movs	r1, #107	; 0x6b
 80066bc:	f001 fd2c 	bl	8008118 <__assert_func>
 80066c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066c4:	6006      	str	r6, [r0, #0]
 80066c6:	60c6      	str	r6, [r0, #12]
 80066c8:	69e6      	ldr	r6, [r4, #28]
 80066ca:	68f3      	ldr	r3, [r6, #12]
 80066cc:	b183      	cbz	r3, 80066f0 <_Balloc+0x50>
 80066ce:	69e3      	ldr	r3, [r4, #28]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066d6:	b9b8      	cbnz	r0, 8006708 <_Balloc+0x68>
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f605 	lsl.w	r6, r1, r5
 80066de:	1d72      	adds	r2, r6, #5
 80066e0:	0092      	lsls	r2, r2, #2
 80066e2:	4620      	mov	r0, r4
 80066e4:	f001 fd36 	bl	8008154 <_calloc_r>
 80066e8:	b160      	cbz	r0, 8006704 <_Balloc+0x64>
 80066ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066ee:	e00e      	b.n	800670e <_Balloc+0x6e>
 80066f0:	2221      	movs	r2, #33	; 0x21
 80066f2:	2104      	movs	r1, #4
 80066f4:	4620      	mov	r0, r4
 80066f6:	f001 fd2d 	bl	8008154 <_calloc_r>
 80066fa:	69e3      	ldr	r3, [r4, #28]
 80066fc:	60f0      	str	r0, [r6, #12]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e4      	bne.n	80066ce <_Balloc+0x2e>
 8006704:	2000      	movs	r0, #0
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	6802      	ldr	r2, [r0, #0]
 800670a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800670e:	2300      	movs	r3, #0
 8006710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006714:	e7f7      	b.n	8006706 <_Balloc+0x66>
 8006716:	bf00      	nop
 8006718:	08008ebe 	.word	0x08008ebe
 800671c:	08008f3e 	.word	0x08008f3e

08006720 <_Bfree>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	69c6      	ldr	r6, [r0, #28]
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	b976      	cbnz	r6, 8006748 <_Bfree+0x28>
 800672a:	2010      	movs	r0, #16
 800672c:	f7fe f8ba 	bl	80048a4 <malloc>
 8006730:	4602      	mov	r2, r0
 8006732:	61e8      	str	r0, [r5, #28]
 8006734:	b920      	cbnz	r0, 8006740 <_Bfree+0x20>
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <_Bfree+0x3c>)
 8006738:	4809      	ldr	r0, [pc, #36]	; (8006760 <_Bfree+0x40>)
 800673a:	218f      	movs	r1, #143	; 0x8f
 800673c:	f001 fcec 	bl	8008118 <__assert_func>
 8006740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006744:	6006      	str	r6, [r0, #0]
 8006746:	60c6      	str	r6, [r0, #12]
 8006748:	b13c      	cbz	r4, 800675a <_Bfree+0x3a>
 800674a:	69eb      	ldr	r3, [r5, #28]
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006754:	6021      	str	r1, [r4, #0]
 8006756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	08008ebe 	.word	0x08008ebe
 8006760:	08008f3e 	.word	0x08008f3e

08006764 <__multadd>:
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	690d      	ldr	r5, [r1, #16]
 800676a:	4607      	mov	r7, r0
 800676c:	460c      	mov	r4, r1
 800676e:	461e      	mov	r6, r3
 8006770:	f101 0c14 	add.w	ip, r1, #20
 8006774:	2000      	movs	r0, #0
 8006776:	f8dc 3000 	ldr.w	r3, [ip]
 800677a:	b299      	uxth	r1, r3
 800677c:	fb02 6101 	mla	r1, r2, r1, r6
 8006780:	0c1e      	lsrs	r6, r3, #16
 8006782:	0c0b      	lsrs	r3, r1, #16
 8006784:	fb02 3306 	mla	r3, r2, r6, r3
 8006788:	b289      	uxth	r1, r1
 800678a:	3001      	adds	r0, #1
 800678c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006790:	4285      	cmp	r5, r0
 8006792:	f84c 1b04 	str.w	r1, [ip], #4
 8006796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800679a:	dcec      	bgt.n	8006776 <__multadd+0x12>
 800679c:	b30e      	cbz	r6, 80067e2 <__multadd+0x7e>
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dc19      	bgt.n	80067d8 <__multadd+0x74>
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	4638      	mov	r0, r7
 80067a8:	3101      	adds	r1, #1
 80067aa:	f7ff ff79 	bl	80066a0 <_Balloc>
 80067ae:	4680      	mov	r8, r0
 80067b0:	b928      	cbnz	r0, 80067be <__multadd+0x5a>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <__multadd+0x84>)
 80067b6:	480d      	ldr	r0, [pc, #52]	; (80067ec <__multadd+0x88>)
 80067b8:	21ba      	movs	r1, #186	; 0xba
 80067ba:	f001 fcad 	bl	8008118 <__assert_func>
 80067be:	6922      	ldr	r2, [r4, #16]
 80067c0:	3202      	adds	r2, #2
 80067c2:	f104 010c 	add.w	r1, r4, #12
 80067c6:	0092      	lsls	r2, r2, #2
 80067c8:	300c      	adds	r0, #12
 80067ca:	f7ff f914 	bl	80059f6 <memcpy>
 80067ce:	4621      	mov	r1, r4
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff ffa5 	bl	8006720 <_Bfree>
 80067d6:	4644      	mov	r4, r8
 80067d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067dc:	3501      	adds	r5, #1
 80067de:	615e      	str	r6, [r3, #20]
 80067e0:	6125      	str	r5, [r4, #16]
 80067e2:	4620      	mov	r0, r4
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e8:	08008f2d 	.word	0x08008f2d
 80067ec:	08008f3e 	.word	0x08008f3e

080067f0 <__s2b>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	4615      	mov	r5, r2
 80067f8:	461f      	mov	r7, r3
 80067fa:	2209      	movs	r2, #9
 80067fc:	3308      	adds	r3, #8
 80067fe:	4606      	mov	r6, r0
 8006800:	fb93 f3f2 	sdiv	r3, r3, r2
 8006804:	2100      	movs	r1, #0
 8006806:	2201      	movs	r2, #1
 8006808:	429a      	cmp	r2, r3
 800680a:	db09      	blt.n	8006820 <__s2b+0x30>
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff ff47 	bl	80066a0 <_Balloc>
 8006812:	b940      	cbnz	r0, 8006826 <__s2b+0x36>
 8006814:	4602      	mov	r2, r0
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <__s2b+0x8c>)
 8006818:	4819      	ldr	r0, [pc, #100]	; (8006880 <__s2b+0x90>)
 800681a:	21d3      	movs	r1, #211	; 0xd3
 800681c:	f001 fc7c 	bl	8008118 <__assert_func>
 8006820:	0052      	lsls	r2, r2, #1
 8006822:	3101      	adds	r1, #1
 8006824:	e7f0      	b.n	8006808 <__s2b+0x18>
 8006826:	9b08      	ldr	r3, [sp, #32]
 8006828:	6143      	str	r3, [r0, #20]
 800682a:	2d09      	cmp	r5, #9
 800682c:	f04f 0301 	mov.w	r3, #1
 8006830:	6103      	str	r3, [r0, #16]
 8006832:	dd16      	ble.n	8006862 <__s2b+0x72>
 8006834:	f104 0909 	add.w	r9, r4, #9
 8006838:	46c8      	mov	r8, r9
 800683a:	442c      	add	r4, r5
 800683c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006840:	4601      	mov	r1, r0
 8006842:	3b30      	subs	r3, #48	; 0x30
 8006844:	220a      	movs	r2, #10
 8006846:	4630      	mov	r0, r6
 8006848:	f7ff ff8c 	bl	8006764 <__multadd>
 800684c:	45a0      	cmp	r8, r4
 800684e:	d1f5      	bne.n	800683c <__s2b+0x4c>
 8006850:	f1a5 0408 	sub.w	r4, r5, #8
 8006854:	444c      	add	r4, r9
 8006856:	1b2d      	subs	r5, r5, r4
 8006858:	1963      	adds	r3, r4, r5
 800685a:	42bb      	cmp	r3, r7
 800685c:	db04      	blt.n	8006868 <__s2b+0x78>
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006862:	340a      	adds	r4, #10
 8006864:	2509      	movs	r5, #9
 8006866:	e7f6      	b.n	8006856 <__s2b+0x66>
 8006868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800686c:	4601      	mov	r1, r0
 800686e:	3b30      	subs	r3, #48	; 0x30
 8006870:	220a      	movs	r2, #10
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff ff76 	bl	8006764 <__multadd>
 8006878:	e7ee      	b.n	8006858 <__s2b+0x68>
 800687a:	bf00      	nop
 800687c:	08008f2d 	.word	0x08008f2d
 8006880:	08008f3e 	.word	0x08008f3e

08006884 <__hi0bits>:
 8006884:	0c03      	lsrs	r3, r0, #16
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	b9d3      	cbnz	r3, 80068c0 <__hi0bits+0x3c>
 800688a:	0400      	lsls	r0, r0, #16
 800688c:	2310      	movs	r3, #16
 800688e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006892:	bf04      	itt	eq
 8006894:	0200      	lsleq	r0, r0, #8
 8006896:	3308      	addeq	r3, #8
 8006898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800689c:	bf04      	itt	eq
 800689e:	0100      	lsleq	r0, r0, #4
 80068a0:	3304      	addeq	r3, #4
 80068a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068a6:	bf04      	itt	eq
 80068a8:	0080      	lsleq	r0, r0, #2
 80068aa:	3302      	addeq	r3, #2
 80068ac:	2800      	cmp	r0, #0
 80068ae:	db05      	blt.n	80068bc <__hi0bits+0x38>
 80068b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068b4:	f103 0301 	add.w	r3, r3, #1
 80068b8:	bf08      	it	eq
 80068ba:	2320      	moveq	r3, #32
 80068bc:	4618      	mov	r0, r3
 80068be:	4770      	bx	lr
 80068c0:	2300      	movs	r3, #0
 80068c2:	e7e4      	b.n	800688e <__hi0bits+0xa>

080068c4 <__lo0bits>:
 80068c4:	6803      	ldr	r3, [r0, #0]
 80068c6:	f013 0207 	ands.w	r2, r3, #7
 80068ca:	d00c      	beq.n	80068e6 <__lo0bits+0x22>
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	d422      	bmi.n	8006916 <__lo0bits+0x52>
 80068d0:	079a      	lsls	r2, r3, #30
 80068d2:	bf49      	itett	mi
 80068d4:	085b      	lsrmi	r3, r3, #1
 80068d6:	089b      	lsrpl	r3, r3, #2
 80068d8:	6003      	strmi	r3, [r0, #0]
 80068da:	2201      	movmi	r2, #1
 80068dc:	bf5c      	itt	pl
 80068de:	6003      	strpl	r3, [r0, #0]
 80068e0:	2202      	movpl	r2, #2
 80068e2:	4610      	mov	r0, r2
 80068e4:	4770      	bx	lr
 80068e6:	b299      	uxth	r1, r3
 80068e8:	b909      	cbnz	r1, 80068ee <__lo0bits+0x2a>
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	2210      	movs	r2, #16
 80068ee:	b2d9      	uxtb	r1, r3
 80068f0:	b909      	cbnz	r1, 80068f6 <__lo0bits+0x32>
 80068f2:	3208      	adds	r2, #8
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	0719      	lsls	r1, r3, #28
 80068f8:	bf04      	itt	eq
 80068fa:	091b      	lsreq	r3, r3, #4
 80068fc:	3204      	addeq	r2, #4
 80068fe:	0799      	lsls	r1, r3, #30
 8006900:	bf04      	itt	eq
 8006902:	089b      	lsreq	r3, r3, #2
 8006904:	3202      	addeq	r2, #2
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d403      	bmi.n	8006912 <__lo0bits+0x4e>
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f102 0201 	add.w	r2, r2, #1
 8006910:	d003      	beq.n	800691a <__lo0bits+0x56>
 8006912:	6003      	str	r3, [r0, #0]
 8006914:	e7e5      	b.n	80068e2 <__lo0bits+0x1e>
 8006916:	2200      	movs	r2, #0
 8006918:	e7e3      	b.n	80068e2 <__lo0bits+0x1e>
 800691a:	2220      	movs	r2, #32
 800691c:	e7e1      	b.n	80068e2 <__lo0bits+0x1e>
	...

08006920 <__i2b>:
 8006920:	b510      	push	{r4, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	2101      	movs	r1, #1
 8006926:	f7ff febb 	bl	80066a0 <_Balloc>
 800692a:	4602      	mov	r2, r0
 800692c:	b928      	cbnz	r0, 800693a <__i2b+0x1a>
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <__i2b+0x24>)
 8006930:	4805      	ldr	r0, [pc, #20]	; (8006948 <__i2b+0x28>)
 8006932:	f240 1145 	movw	r1, #325	; 0x145
 8006936:	f001 fbef 	bl	8008118 <__assert_func>
 800693a:	2301      	movs	r3, #1
 800693c:	6144      	str	r4, [r0, #20]
 800693e:	6103      	str	r3, [r0, #16]
 8006940:	bd10      	pop	{r4, pc}
 8006942:	bf00      	nop
 8006944:	08008f2d 	.word	0x08008f2d
 8006948:	08008f3e 	.word	0x08008f3e

0800694c <__multiply>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	4691      	mov	r9, r2
 8006952:	690a      	ldr	r2, [r1, #16]
 8006954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	bfb8      	it	lt
 800695c:	460b      	movlt	r3, r1
 800695e:	460c      	mov	r4, r1
 8006960:	bfbc      	itt	lt
 8006962:	464c      	movlt	r4, r9
 8006964:	4699      	movlt	r9, r3
 8006966:	6927      	ldr	r7, [r4, #16]
 8006968:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800696c:	68a3      	ldr	r3, [r4, #8]
 800696e:	6861      	ldr	r1, [r4, #4]
 8006970:	eb07 060a 	add.w	r6, r7, sl
 8006974:	42b3      	cmp	r3, r6
 8006976:	b085      	sub	sp, #20
 8006978:	bfb8      	it	lt
 800697a:	3101      	addlt	r1, #1
 800697c:	f7ff fe90 	bl	80066a0 <_Balloc>
 8006980:	b930      	cbnz	r0, 8006990 <__multiply+0x44>
 8006982:	4602      	mov	r2, r0
 8006984:	4b44      	ldr	r3, [pc, #272]	; (8006a98 <__multiply+0x14c>)
 8006986:	4845      	ldr	r0, [pc, #276]	; (8006a9c <__multiply+0x150>)
 8006988:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800698c:	f001 fbc4 	bl	8008118 <__assert_func>
 8006990:	f100 0514 	add.w	r5, r0, #20
 8006994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006998:	462b      	mov	r3, r5
 800699a:	2200      	movs	r2, #0
 800699c:	4543      	cmp	r3, r8
 800699e:	d321      	bcc.n	80069e4 <__multiply+0x98>
 80069a0:	f104 0314 	add.w	r3, r4, #20
 80069a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069a8:	f109 0314 	add.w	r3, r9, #20
 80069ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	1b3a      	subs	r2, r7, r4
 80069b4:	3a15      	subs	r2, #21
 80069b6:	f022 0203 	bic.w	r2, r2, #3
 80069ba:	3204      	adds	r2, #4
 80069bc:	f104 0115 	add.w	r1, r4, #21
 80069c0:	428f      	cmp	r7, r1
 80069c2:	bf38      	it	cc
 80069c4:	2204      	movcc	r2, #4
 80069c6:	9201      	str	r2, [sp, #4]
 80069c8:	9a02      	ldr	r2, [sp, #8]
 80069ca:	9303      	str	r3, [sp, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d80c      	bhi.n	80069ea <__multiply+0x9e>
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	dd03      	ble.n	80069dc <__multiply+0x90>
 80069d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d05b      	beq.n	8006a94 <__multiply+0x148>
 80069dc:	6106      	str	r6, [r0, #16]
 80069de:	b005      	add	sp, #20
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	f843 2b04 	str.w	r2, [r3], #4
 80069e8:	e7d8      	b.n	800699c <__multiply+0x50>
 80069ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80069ee:	f1ba 0f00 	cmp.w	sl, #0
 80069f2:	d024      	beq.n	8006a3e <__multiply+0xf2>
 80069f4:	f104 0e14 	add.w	lr, r4, #20
 80069f8:	46a9      	mov	r9, r5
 80069fa:	f04f 0c00 	mov.w	ip, #0
 80069fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a02:	f8d9 1000 	ldr.w	r1, [r9]
 8006a06:	fa1f fb82 	uxth.w	fp, r2
 8006a0a:	b289      	uxth	r1, r1
 8006a0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a14:	f8d9 2000 	ldr.w	r2, [r9]
 8006a18:	4461      	add	r1, ip
 8006a1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a26:	b289      	uxth	r1, r1
 8006a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a2c:	4577      	cmp	r7, lr
 8006a2e:	f849 1b04 	str.w	r1, [r9], #4
 8006a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a36:	d8e2      	bhi.n	80069fe <__multiply+0xb2>
 8006a38:	9a01      	ldr	r2, [sp, #4]
 8006a3a:	f845 c002 	str.w	ip, [r5, r2]
 8006a3e:	9a03      	ldr	r2, [sp, #12]
 8006a40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a44:	3304      	adds	r3, #4
 8006a46:	f1b9 0f00 	cmp.w	r9, #0
 8006a4a:	d021      	beq.n	8006a90 <__multiply+0x144>
 8006a4c:	6829      	ldr	r1, [r5, #0]
 8006a4e:	f104 0c14 	add.w	ip, r4, #20
 8006a52:	46ae      	mov	lr, r5
 8006a54:	f04f 0a00 	mov.w	sl, #0
 8006a58:	f8bc b000 	ldrh.w	fp, [ip]
 8006a5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a60:	fb09 220b 	mla	r2, r9, fp, r2
 8006a64:	4452      	add	r2, sl
 8006a66:	b289      	uxth	r1, r1
 8006a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a6c:	f84e 1b04 	str.w	r1, [lr], #4
 8006a70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a78:	f8be 1000 	ldrh.w	r1, [lr]
 8006a7c:	fb09 110a 	mla	r1, r9, sl, r1
 8006a80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006a84:	4567      	cmp	r7, ip
 8006a86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a8a:	d8e5      	bhi.n	8006a58 <__multiply+0x10c>
 8006a8c:	9a01      	ldr	r2, [sp, #4]
 8006a8e:	50a9      	str	r1, [r5, r2]
 8006a90:	3504      	adds	r5, #4
 8006a92:	e799      	b.n	80069c8 <__multiply+0x7c>
 8006a94:	3e01      	subs	r6, #1
 8006a96:	e79b      	b.n	80069d0 <__multiply+0x84>
 8006a98:	08008f2d 	.word	0x08008f2d
 8006a9c:	08008f3e 	.word	0x08008f3e

08006aa0 <__pow5mult>:
 8006aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	4615      	mov	r5, r2
 8006aa6:	f012 0203 	ands.w	r2, r2, #3
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	d007      	beq.n	8006ac0 <__pow5mult+0x20>
 8006ab0:	4c25      	ldr	r4, [pc, #148]	; (8006b48 <__pow5mult+0xa8>)
 8006ab2:	3a01      	subs	r2, #1
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aba:	f7ff fe53 	bl	8006764 <__multadd>
 8006abe:	4607      	mov	r7, r0
 8006ac0:	10ad      	asrs	r5, r5, #2
 8006ac2:	d03d      	beq.n	8006b40 <__pow5mult+0xa0>
 8006ac4:	69f4      	ldr	r4, [r6, #28]
 8006ac6:	b97c      	cbnz	r4, 8006ae8 <__pow5mult+0x48>
 8006ac8:	2010      	movs	r0, #16
 8006aca:	f7fd feeb 	bl	80048a4 <malloc>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	61f0      	str	r0, [r6, #28]
 8006ad2:	b928      	cbnz	r0, 8006ae0 <__pow5mult+0x40>
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <__pow5mult+0xac>)
 8006ad6:	481e      	ldr	r0, [pc, #120]	; (8006b50 <__pow5mult+0xb0>)
 8006ad8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006adc:	f001 fb1c 	bl	8008118 <__assert_func>
 8006ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ae4:	6004      	str	r4, [r0, #0]
 8006ae6:	60c4      	str	r4, [r0, #12]
 8006ae8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006af0:	b94c      	cbnz	r4, 8006b06 <__pow5mult+0x66>
 8006af2:	f240 2171 	movw	r1, #625	; 0x271
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ff12 	bl	8006920 <__i2b>
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b02:	4604      	mov	r4, r0
 8006b04:	6003      	str	r3, [r0, #0]
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	07eb      	lsls	r3, r5, #31
 8006b0c:	d50a      	bpl.n	8006b24 <__pow5mult+0x84>
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4622      	mov	r2, r4
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff1a 	bl	800694c <__multiply>
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fdff 	bl	8006720 <_Bfree>
 8006b22:	4647      	mov	r7, r8
 8006b24:	106d      	asrs	r5, r5, #1
 8006b26:	d00b      	beq.n	8006b40 <__pow5mult+0xa0>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	b938      	cbnz	r0, 8006b3c <__pow5mult+0x9c>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ff0b 	bl	800694c <__multiply>
 8006b36:	6020      	str	r0, [r4, #0]
 8006b38:	f8c0 9000 	str.w	r9, [r0]
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	e7e4      	b.n	8006b0a <__pow5mult+0x6a>
 8006b40:	4638      	mov	r0, r7
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	bf00      	nop
 8006b48:	08009088 	.word	0x08009088
 8006b4c:	08008ebe 	.word	0x08008ebe
 8006b50:	08008f3e 	.word	0x08008f3e

08006b54 <__lshift>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	6849      	ldr	r1, [r1, #4]
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	4607      	mov	r7, r0
 8006b66:	4691      	mov	r9, r2
 8006b68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b6c:	f108 0601 	add.w	r6, r8, #1
 8006b70:	42b3      	cmp	r3, r6
 8006b72:	db0b      	blt.n	8006b8c <__lshift+0x38>
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff fd93 	bl	80066a0 <_Balloc>
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	b948      	cbnz	r0, 8006b92 <__lshift+0x3e>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <__lshift+0xd0>)
 8006b82:	4829      	ldr	r0, [pc, #164]	; (8006c28 <__lshift+0xd4>)
 8006b84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006b88:	f001 fac6 	bl	8008118 <__assert_func>
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	e7ee      	b.n	8006b70 <__lshift+0x1c>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f100 0114 	add.w	r1, r0, #20
 8006b98:	f100 0210 	add.w	r2, r0, #16
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	4553      	cmp	r3, sl
 8006ba0:	db33      	blt.n	8006c0a <__lshift+0xb6>
 8006ba2:	6920      	ldr	r0, [r4, #16]
 8006ba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ba8:	f104 0314 	add.w	r3, r4, #20
 8006bac:	f019 091f 	ands.w	r9, r9, #31
 8006bb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bb8:	d02b      	beq.n	8006c12 <__lshift+0xbe>
 8006bba:	f1c9 0e20 	rsb	lr, r9, #32
 8006bbe:	468a      	mov	sl, r1
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	fa00 f009 	lsl.w	r0, r0, r9
 8006bc8:	4310      	orrs	r0, r2
 8006bca:	f84a 0b04 	str.w	r0, [sl], #4
 8006bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd2:	459c      	cmp	ip, r3
 8006bd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006bd8:	d8f3      	bhi.n	8006bc2 <__lshift+0x6e>
 8006bda:	ebac 0304 	sub.w	r3, ip, r4
 8006bde:	3b15      	subs	r3, #21
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	3304      	adds	r3, #4
 8006be6:	f104 0015 	add.w	r0, r4, #21
 8006bea:	4584      	cmp	ip, r0
 8006bec:	bf38      	it	cc
 8006bee:	2304      	movcc	r3, #4
 8006bf0:	50ca      	str	r2, [r1, r3]
 8006bf2:	b10a      	cbz	r2, 8006bf8 <__lshift+0xa4>
 8006bf4:	f108 0602 	add.w	r6, r8, #2
 8006bf8:	3e01      	subs	r6, #1
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	612e      	str	r6, [r5, #16]
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f7ff fd8e 	bl	8006720 <_Bfree>
 8006c04:	4628      	mov	r0, r5
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c0e:	3301      	adds	r3, #1
 8006c10:	e7c5      	b.n	8006b9e <__lshift+0x4a>
 8006c12:	3904      	subs	r1, #4
 8006c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c18:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c1c:	459c      	cmp	ip, r3
 8006c1e:	d8f9      	bhi.n	8006c14 <__lshift+0xc0>
 8006c20:	e7ea      	b.n	8006bf8 <__lshift+0xa4>
 8006c22:	bf00      	nop
 8006c24:	08008f2d 	.word	0x08008f2d
 8006c28:	08008f3e 	.word	0x08008f3e

08006c2c <__mcmp>:
 8006c2c:	b530      	push	{r4, r5, lr}
 8006c2e:	6902      	ldr	r2, [r0, #16]
 8006c30:	690c      	ldr	r4, [r1, #16]
 8006c32:	1b12      	subs	r2, r2, r4
 8006c34:	d10e      	bne.n	8006c54 <__mcmp+0x28>
 8006c36:	f100 0314 	add.w	r3, r0, #20
 8006c3a:	3114      	adds	r1, #20
 8006c3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c4c:	42a5      	cmp	r5, r4
 8006c4e:	d003      	beq.n	8006c58 <__mcmp+0x2c>
 8006c50:	d305      	bcc.n	8006c5e <__mcmp+0x32>
 8006c52:	2201      	movs	r2, #1
 8006c54:	4610      	mov	r0, r2
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	d3f3      	bcc.n	8006c44 <__mcmp+0x18>
 8006c5c:	e7fa      	b.n	8006c54 <__mcmp+0x28>
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	e7f7      	b.n	8006c54 <__mcmp+0x28>

08006c64 <__mdiff>:
 8006c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4690      	mov	r8, r2
 8006c72:	f7ff ffdb 	bl	8006c2c <__mcmp>
 8006c76:	1e05      	subs	r5, r0, #0
 8006c78:	d110      	bne.n	8006c9c <__mdiff+0x38>
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f7ff fd0f 	bl	80066a0 <_Balloc>
 8006c82:	b930      	cbnz	r0, 8006c92 <__mdiff+0x2e>
 8006c84:	4b3a      	ldr	r3, [pc, #232]	; (8006d70 <__mdiff+0x10c>)
 8006c86:	4602      	mov	r2, r0
 8006c88:	f240 2137 	movw	r1, #567	; 0x237
 8006c8c:	4839      	ldr	r0, [pc, #228]	; (8006d74 <__mdiff+0x110>)
 8006c8e:	f001 fa43 	bl	8008118 <__assert_func>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	bfa4      	itt	ge
 8006c9e:	4643      	movge	r3, r8
 8006ca0:	46a0      	movge	r8, r4
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ca8:	bfa6      	itte	ge
 8006caa:	461c      	movge	r4, r3
 8006cac:	2500      	movge	r5, #0
 8006cae:	2501      	movlt	r5, #1
 8006cb0:	f7ff fcf6 	bl	80066a0 <_Balloc>
 8006cb4:	b920      	cbnz	r0, 8006cc0 <__mdiff+0x5c>
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <__mdiff+0x10c>)
 8006cb8:	4602      	mov	r2, r0
 8006cba:	f240 2145 	movw	r1, #581	; 0x245
 8006cbe:	e7e5      	b.n	8006c8c <__mdiff+0x28>
 8006cc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cc4:	6926      	ldr	r6, [r4, #16]
 8006cc6:	60c5      	str	r5, [r0, #12]
 8006cc8:	f104 0914 	add.w	r9, r4, #20
 8006ccc:	f108 0514 	add.w	r5, r8, #20
 8006cd0:	f100 0e14 	add.w	lr, r0, #20
 8006cd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006cd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cdc:	f108 0210 	add.w	r2, r8, #16
 8006ce0:	46f2      	mov	sl, lr
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006cec:	fa11 f88b 	uxtah	r8, r1, fp
 8006cf0:	b299      	uxth	r1, r3
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	eba8 0801 	sub.w	r8, r8, r1
 8006cf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d00:	fa1f f888 	uxth.w	r8, r8
 8006d04:	1419      	asrs	r1, r3, #16
 8006d06:	454e      	cmp	r6, r9
 8006d08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d0c:	f84a 3b04 	str.w	r3, [sl], #4
 8006d10:	d8e8      	bhi.n	8006ce4 <__mdiff+0x80>
 8006d12:	1b33      	subs	r3, r6, r4
 8006d14:	3b15      	subs	r3, #21
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	3415      	adds	r4, #21
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	bf38      	it	cc
 8006d22:	2304      	movcc	r3, #4
 8006d24:	441d      	add	r5, r3
 8006d26:	4473      	add	r3, lr
 8006d28:	469e      	mov	lr, r3
 8006d2a:	462e      	mov	r6, r5
 8006d2c:	4566      	cmp	r6, ip
 8006d2e:	d30e      	bcc.n	8006d4e <__mdiff+0xea>
 8006d30:	f10c 0203 	add.w	r2, ip, #3
 8006d34:	1b52      	subs	r2, r2, r5
 8006d36:	f022 0203 	bic.w	r2, r2, #3
 8006d3a:	3d03      	subs	r5, #3
 8006d3c:	45ac      	cmp	ip, r5
 8006d3e:	bf38      	it	cc
 8006d40:	2200      	movcc	r2, #0
 8006d42:	4413      	add	r3, r2
 8006d44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d48:	b17a      	cbz	r2, 8006d6a <__mdiff+0x106>
 8006d4a:	6107      	str	r7, [r0, #16]
 8006d4c:	e7a4      	b.n	8006c98 <__mdiff+0x34>
 8006d4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d52:	fa11 f288 	uxtah	r2, r1, r8
 8006d56:	1414      	asrs	r4, r2, #16
 8006d58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d62:	f84e 2b04 	str.w	r2, [lr], #4
 8006d66:	1421      	asrs	r1, r4, #16
 8006d68:	e7e0      	b.n	8006d2c <__mdiff+0xc8>
 8006d6a:	3f01      	subs	r7, #1
 8006d6c:	e7ea      	b.n	8006d44 <__mdiff+0xe0>
 8006d6e:	bf00      	nop
 8006d70:	08008f2d 	.word	0x08008f2d
 8006d74:	08008f3e 	.word	0x08008f3e

08006d78 <__ulp>:
 8006d78:	b082      	sub	sp, #8
 8006d7a:	ed8d 0b00 	vstr	d0, [sp]
 8006d7e:	9a01      	ldr	r2, [sp, #4]
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <__ulp+0x48>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dc08      	bgt.n	8006d9e <__ulp+0x26>
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006d92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d96:	da04      	bge.n	8006da2 <__ulp+0x2a>
 8006d98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d9c:	4113      	asrs	r3, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	e008      	b.n	8006db4 <__ulp+0x3c>
 8006da2:	f1a2 0314 	sub.w	r3, r2, #20
 8006da6:	2b1e      	cmp	r3, #30
 8006da8:	bfda      	itte	le
 8006daa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006dae:	40da      	lsrle	r2, r3
 8006db0:	2201      	movgt	r2, #1
 8006db2:	2300      	movs	r3, #0
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	ec41 0b10 	vmov	d0, r0, r1
 8006dbc:	b002      	add	sp, #8
 8006dbe:	4770      	bx	lr
 8006dc0:	7ff00000 	.word	0x7ff00000

08006dc4 <__b2d>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	6906      	ldr	r6, [r0, #16]
 8006dca:	f100 0814 	add.w	r8, r0, #20
 8006dce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006dd2:	1f37      	subs	r7, r6, #4
 8006dd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7ff fd53 	bl	8006884 <__hi0bits>
 8006dde:	f1c0 0320 	rsb	r3, r0, #32
 8006de2:	280a      	cmp	r0, #10
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	491b      	ldr	r1, [pc, #108]	; (8006e54 <__b2d+0x90>)
 8006de8:	dc15      	bgt.n	8006e16 <__b2d+0x52>
 8006dea:	f1c0 0c0b 	rsb	ip, r0, #11
 8006dee:	fa22 f30c 	lsr.w	r3, r2, ip
 8006df2:	45b8      	cmp	r8, r7
 8006df4:	ea43 0501 	orr.w	r5, r3, r1
 8006df8:	bf34      	ite	cc
 8006dfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006dfe:	2300      	movcs	r3, #0
 8006e00:	3015      	adds	r0, #21
 8006e02:	fa02 f000 	lsl.w	r0, r2, r0
 8006e06:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e0a:	4303      	orrs	r3, r0
 8006e0c:	461c      	mov	r4, r3
 8006e0e:	ec45 4b10 	vmov	d0, r4, r5
 8006e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e16:	45b8      	cmp	r8, r7
 8006e18:	bf3a      	itte	cc
 8006e1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e1e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006e22:	2300      	movcs	r3, #0
 8006e24:	380b      	subs	r0, #11
 8006e26:	d012      	beq.n	8006e4e <__b2d+0x8a>
 8006e28:	f1c0 0120 	rsb	r1, r0, #32
 8006e2c:	fa23 f401 	lsr.w	r4, r3, r1
 8006e30:	4082      	lsls	r2, r0
 8006e32:	4322      	orrs	r2, r4
 8006e34:	4547      	cmp	r7, r8
 8006e36:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006e3a:	bf8c      	ite	hi
 8006e3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006e40:	2200      	movls	r2, #0
 8006e42:	4083      	lsls	r3, r0
 8006e44:	40ca      	lsrs	r2, r1
 8006e46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	e7de      	b.n	8006e0c <__b2d+0x48>
 8006e4e:	ea42 0501 	orr.w	r5, r2, r1
 8006e52:	e7db      	b.n	8006e0c <__b2d+0x48>
 8006e54:	3ff00000 	.word	0x3ff00000

08006e58 <__d2b>:
 8006e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	2101      	movs	r1, #1
 8006e60:	ec59 8b10 	vmov	r8, r9, d0
 8006e64:	4616      	mov	r6, r2
 8006e66:	f7ff fc1b 	bl	80066a0 <_Balloc>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	b930      	cbnz	r0, 8006e7c <__d2b+0x24>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <__d2b+0xac>)
 8006e72:	4825      	ldr	r0, [pc, #148]	; (8006f08 <__d2b+0xb0>)
 8006e74:	f240 310f 	movw	r1, #783	; 0x30f
 8006e78:	f001 f94e 	bl	8008118 <__assert_func>
 8006e7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e84:	bb2d      	cbnz	r5, 8006ed2 <__d2b+0x7a>
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	f1b8 0300 	subs.w	r3, r8, #0
 8006e8c:	d026      	beq.n	8006edc <__d2b+0x84>
 8006e8e:	4668      	mov	r0, sp
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	f7ff fd17 	bl	80068c4 <__lo0bits>
 8006e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e9a:	b1e8      	cbz	r0, 8006ed8 <__d2b+0x80>
 8006e9c:	f1c0 0320 	rsb	r3, r0, #32
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	40c2      	lsrs	r2, r0
 8006ea8:	6163      	str	r3, [r4, #20]
 8006eaa:	9201      	str	r2, [sp, #4]
 8006eac:	9b01      	ldr	r3, [sp, #4]
 8006eae:	61a3      	str	r3, [r4, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2202      	movne	r2, #2
 8006eb6:	2201      	moveq	r2, #1
 8006eb8:	6122      	str	r2, [r4, #16]
 8006eba:	b1bd      	cbz	r5, 8006eec <__d2b+0x94>
 8006ebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ec0:	4405      	add	r5, r0
 8006ec2:	603d      	str	r5, [r7, #0]
 8006ec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	b003      	add	sp, #12
 8006ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ed6:	e7d6      	b.n	8006e86 <__d2b+0x2e>
 8006ed8:	6161      	str	r1, [r4, #20]
 8006eda:	e7e7      	b.n	8006eac <__d2b+0x54>
 8006edc:	a801      	add	r0, sp, #4
 8006ede:	f7ff fcf1 	bl	80068c4 <__lo0bits>
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	6163      	str	r3, [r4, #20]
 8006ee6:	3020      	adds	r0, #32
 8006ee8:	2201      	movs	r2, #1
 8006eea:	e7e5      	b.n	8006eb8 <__d2b+0x60>
 8006eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ef4:	6038      	str	r0, [r7, #0]
 8006ef6:	6918      	ldr	r0, [r3, #16]
 8006ef8:	f7ff fcc4 	bl	8006884 <__hi0bits>
 8006efc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f00:	e7e2      	b.n	8006ec8 <__d2b+0x70>
 8006f02:	bf00      	nop
 8006f04:	08008f2d 	.word	0x08008f2d
 8006f08:	08008f3e 	.word	0x08008f3e

08006f0c <__ratio>:
 8006f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	4688      	mov	r8, r1
 8006f12:	4669      	mov	r1, sp
 8006f14:	4681      	mov	r9, r0
 8006f16:	f7ff ff55 	bl	8006dc4 <__b2d>
 8006f1a:	a901      	add	r1, sp, #4
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	ec55 4b10 	vmov	r4, r5, d0
 8006f22:	ee10 aa10 	vmov	sl, s0
 8006f26:	f7ff ff4d 	bl	8006dc4 <__b2d>
 8006f2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006f2e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006f32:	1ad2      	subs	r2, r2, r3
 8006f34:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006f38:	1a5b      	subs	r3, r3, r1
 8006f3a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006f3e:	ec57 6b10 	vmov	r6, r7, d0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bfd6      	itet	le
 8006f46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f4a:	462a      	movgt	r2, r5
 8006f4c:	463a      	movle	r2, r7
 8006f4e:	46ab      	mov	fp, r5
 8006f50:	bfd6      	itet	le
 8006f52:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8006f56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006f5a:	ee00 3a90 	vmovle	s1, r3
 8006f5e:	ec4b ab17 	vmov	d7, sl, fp
 8006f62:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8006f66:	b003      	add	sp, #12
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f6c <__copybits>:
 8006f6c:	3901      	subs	r1, #1
 8006f6e:	b570      	push	{r4, r5, r6, lr}
 8006f70:	1149      	asrs	r1, r1, #5
 8006f72:	6914      	ldr	r4, [r2, #16]
 8006f74:	3101      	adds	r1, #1
 8006f76:	f102 0314 	add.w	r3, r2, #20
 8006f7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f82:	1f05      	subs	r5, r0, #4
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d30c      	bcc.n	8006fa2 <__copybits+0x36>
 8006f88:	1aa3      	subs	r3, r4, r2
 8006f8a:	3b11      	subs	r3, #17
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	3211      	adds	r2, #17
 8006f92:	42a2      	cmp	r2, r4
 8006f94:	bf88      	it	hi
 8006f96:	2300      	movhi	r3, #0
 8006f98:	4418      	add	r0, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4288      	cmp	r0, r1
 8006f9e:	d305      	bcc.n	8006fac <__copybits+0x40>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006fa6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006faa:	e7eb      	b.n	8006f84 <__copybits+0x18>
 8006fac:	f840 3b04 	str.w	r3, [r0], #4
 8006fb0:	e7f4      	b.n	8006f9c <__copybits+0x30>

08006fb2 <__any_on>:
 8006fb2:	f100 0214 	add.w	r2, r0, #20
 8006fb6:	6900      	ldr	r0, [r0, #16]
 8006fb8:	114b      	asrs	r3, r1, #5
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	db11      	blt.n	8006fe4 <__any_on+0x32>
 8006fc0:	dd0a      	ble.n	8006fd8 <__any_on+0x26>
 8006fc2:	f011 011f 	ands.w	r1, r1, #31
 8006fc6:	d007      	beq.n	8006fd8 <__any_on+0x26>
 8006fc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fcc:	fa24 f001 	lsr.w	r0, r4, r1
 8006fd0:	fa00 f101 	lsl.w	r1, r0, r1
 8006fd4:	428c      	cmp	r4, r1
 8006fd6:	d10b      	bne.n	8006ff0 <__any_on+0x3e>
 8006fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d803      	bhi.n	8006fe8 <__any_on+0x36>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	bd10      	pop	{r4, pc}
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	e7f7      	b.n	8006fd8 <__any_on+0x26>
 8006fe8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d0f5      	beq.n	8006fdc <__any_on+0x2a>
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	e7f6      	b.n	8006fe2 <__any_on+0x30>

08006ff4 <sulp>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4616      	mov	r6, r2
 8006ffc:	ec45 4b10 	vmov	d0, r4, r5
 8007000:	f7ff feba 	bl	8006d78 <__ulp>
 8007004:	b17e      	cbz	r6, 8007026 <sulp+0x32>
 8007006:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800700a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd09      	ble.n	8007026 <sulp+0x32>
 8007012:	051b      	lsls	r3, r3, #20
 8007014:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007018:	2000      	movs	r0, #0
 800701a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800701e:	ec41 0b17 	vmov	d7, r0, r1
 8007022:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007026:	bd70      	pop	{r4, r5, r6, pc}

08007028 <_strtod_l>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	ed2d 8b0e 	vpush	{d8-d14}
 8007030:	b097      	sub	sp, #92	; 0x5c
 8007032:	4604      	mov	r4, r0
 8007034:	920d      	str	r2, [sp, #52]	; 0x34
 8007036:	2200      	movs	r2, #0
 8007038:	9212      	str	r2, [sp, #72]	; 0x48
 800703a:	468a      	mov	sl, r1
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	f04f 0900 	mov.w	r9, #0
 8007044:	460a      	mov	r2, r1
 8007046:	9211      	str	r2, [sp, #68]	; 0x44
 8007048:	7811      	ldrb	r1, [r2, #0]
 800704a:	292b      	cmp	r1, #43	; 0x2b
 800704c:	d04c      	beq.n	80070e8 <_strtod_l+0xc0>
 800704e:	d839      	bhi.n	80070c4 <_strtod_l+0x9c>
 8007050:	290d      	cmp	r1, #13
 8007052:	d833      	bhi.n	80070bc <_strtod_l+0x94>
 8007054:	2908      	cmp	r1, #8
 8007056:	d833      	bhi.n	80070c0 <_strtod_l+0x98>
 8007058:	2900      	cmp	r1, #0
 800705a:	d03c      	beq.n	80070d6 <_strtod_l+0xae>
 800705c:	2200      	movs	r2, #0
 800705e:	9208      	str	r2, [sp, #32]
 8007060:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007062:	7832      	ldrb	r2, [r6, #0]
 8007064:	2a30      	cmp	r2, #48	; 0x30
 8007066:	f040 80b8 	bne.w	80071da <_strtod_l+0x1b2>
 800706a:	7872      	ldrb	r2, [r6, #1]
 800706c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007070:	2a58      	cmp	r2, #88	; 0x58
 8007072:	d170      	bne.n	8007156 <_strtod_l+0x12e>
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	ab12      	add	r3, sp, #72	; 0x48
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4a91      	ldr	r2, [pc, #580]	; (80072c4 <_strtod_l+0x29c>)
 8007080:	ab13      	add	r3, sp, #76	; 0x4c
 8007082:	a911      	add	r1, sp, #68	; 0x44
 8007084:	4620      	mov	r0, r4
 8007086:	f001 f8e3 	bl	8008250 <__gethex>
 800708a:	f010 070f 	ands.w	r7, r0, #15
 800708e:	4605      	mov	r5, r0
 8007090:	d005      	beq.n	800709e <_strtod_l+0x76>
 8007092:	2f06      	cmp	r7, #6
 8007094:	d12a      	bne.n	80070ec <_strtod_l+0xc4>
 8007096:	3601      	adds	r6, #1
 8007098:	2300      	movs	r3, #0
 800709a:	9611      	str	r6, [sp, #68]	; 0x44
 800709c:	9308      	str	r3, [sp, #32]
 800709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 8555 	bne.w	8007b50 <_strtod_l+0xb28>
 80070a6:	9b08      	ldr	r3, [sp, #32]
 80070a8:	ec49 8b10 	vmov	d0, r8, r9
 80070ac:	b1cb      	cbz	r3, 80070e2 <_strtod_l+0xba>
 80070ae:	eeb1 0b40 	vneg.f64	d0, d0
 80070b2:	b017      	add	sp, #92	; 0x5c
 80070b4:	ecbd 8b0e 	vpop	{d8-d14}
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	2920      	cmp	r1, #32
 80070be:	d1cd      	bne.n	800705c <_strtod_l+0x34>
 80070c0:	3201      	adds	r2, #1
 80070c2:	e7c0      	b.n	8007046 <_strtod_l+0x1e>
 80070c4:	292d      	cmp	r1, #45	; 0x2d
 80070c6:	d1c9      	bne.n	800705c <_strtod_l+0x34>
 80070c8:	2101      	movs	r1, #1
 80070ca:	9108      	str	r1, [sp, #32]
 80070cc:	1c51      	adds	r1, r2, #1
 80070ce:	9111      	str	r1, [sp, #68]	; 0x44
 80070d0:	7852      	ldrb	r2, [r2, #1]
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1c4      	bne.n	8007060 <_strtod_l+0x38>
 80070d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8535 	bne.w	8007b4c <_strtod_l+0xb24>
 80070e2:	ec49 8b10 	vmov	d0, r8, r9
 80070e6:	e7e4      	b.n	80070b2 <_strtod_l+0x8a>
 80070e8:	2100      	movs	r1, #0
 80070ea:	e7ee      	b.n	80070ca <_strtod_l+0xa2>
 80070ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070ee:	b13a      	cbz	r2, 8007100 <_strtod_l+0xd8>
 80070f0:	2135      	movs	r1, #53	; 0x35
 80070f2:	a814      	add	r0, sp, #80	; 0x50
 80070f4:	f7ff ff3a 	bl	8006f6c <__copybits>
 80070f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff fb10 	bl	8006720 <_Bfree>
 8007100:	1e7b      	subs	r3, r7, #1
 8007102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007104:	2b04      	cmp	r3, #4
 8007106:	d806      	bhi.n	8007116 <_strtod_l+0xee>
 8007108:	e8df f003 	tbb	[pc, r3]
 800710c:	201d0314 	.word	0x201d0314
 8007110:	14          	.byte	0x14
 8007111:	00          	.byte	0x00
 8007112:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007116:	05eb      	lsls	r3, r5, #23
 8007118:	bf48      	it	mi
 800711a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800711e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007122:	0d1b      	lsrs	r3, r3, #20
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1b9      	bne.n	800709e <_strtod_l+0x76>
 800712a:	f7fe fc37 	bl	800599c <__errno>
 800712e:	2322      	movs	r3, #34	; 0x22
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	e7b4      	b.n	800709e <_strtod_l+0x76>
 8007134:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007138:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800713c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007140:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007144:	e7e7      	b.n	8007116 <_strtod_l+0xee>
 8007146:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80072cc <_strtod_l+0x2a4>
 800714a:	e7e4      	b.n	8007116 <_strtod_l+0xee>
 800714c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007150:	f04f 38ff 	mov.w	r8, #4294967295
 8007154:	e7df      	b.n	8007116 <_strtod_l+0xee>
 8007156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	9211      	str	r2, [sp, #68]	; 0x44
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b30      	cmp	r3, #48	; 0x30
 8007160:	d0f9      	beq.n	8007156 <_strtod_l+0x12e>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d09b      	beq.n	800709e <_strtod_l+0x76>
 8007166:	2301      	movs	r3, #1
 8007168:	9306      	str	r3, [sp, #24]
 800716a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	2300      	movs	r3, #0
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	9307      	str	r3, [sp, #28]
 8007174:	461e      	mov	r6, r3
 8007176:	220a      	movs	r2, #10
 8007178:	9811      	ldr	r0, [sp, #68]	; 0x44
 800717a:	7805      	ldrb	r5, [r0, #0]
 800717c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007180:	b2d9      	uxtb	r1, r3
 8007182:	2909      	cmp	r1, #9
 8007184:	d92b      	bls.n	80071de <_strtod_l+0x1b6>
 8007186:	4950      	ldr	r1, [pc, #320]	; (80072c8 <_strtod_l+0x2a0>)
 8007188:	2201      	movs	r2, #1
 800718a:	f000 ffa9 	bl	80080e0 <strncmp>
 800718e:	2800      	cmp	r0, #0
 8007190:	d035      	beq.n	80071fe <_strtod_l+0x1d6>
 8007192:	2000      	movs	r0, #0
 8007194:	462a      	mov	r2, r5
 8007196:	4633      	mov	r3, r6
 8007198:	4683      	mov	fp, r0
 800719a:	4601      	mov	r1, r0
 800719c:	2a65      	cmp	r2, #101	; 0x65
 800719e:	d001      	beq.n	80071a4 <_strtod_l+0x17c>
 80071a0:	2a45      	cmp	r2, #69	; 0x45
 80071a2:	d118      	bne.n	80071d6 <_strtod_l+0x1ae>
 80071a4:	b91b      	cbnz	r3, 80071ae <_strtod_l+0x186>
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	4303      	orrs	r3, r0
 80071aa:	d094      	beq.n	80070d6 <_strtod_l+0xae>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80071b2:	f10a 0201 	add.w	r2, sl, #1
 80071b6:	9211      	str	r2, [sp, #68]	; 0x44
 80071b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80071bc:	2a2b      	cmp	r2, #43	; 0x2b
 80071be:	d075      	beq.n	80072ac <_strtod_l+0x284>
 80071c0:	2a2d      	cmp	r2, #45	; 0x2d
 80071c2:	d07b      	beq.n	80072bc <_strtod_l+0x294>
 80071c4:	f04f 0e00 	mov.w	lr, #0
 80071c8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80071cc:	2d09      	cmp	r5, #9
 80071ce:	f240 8083 	bls.w	80072d8 <_strtod_l+0x2b0>
 80071d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80071d6:	2500      	movs	r5, #0
 80071d8:	e09e      	b.n	8007318 <_strtod_l+0x2f0>
 80071da:	2300      	movs	r3, #0
 80071dc:	e7c4      	b.n	8007168 <_strtod_l+0x140>
 80071de:	2e08      	cmp	r6, #8
 80071e0:	bfd5      	itete	le
 80071e2:	9907      	ldrle	r1, [sp, #28]
 80071e4:	9905      	ldrgt	r1, [sp, #20]
 80071e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80071ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071ee:	f100 0001 	add.w	r0, r0, #1
 80071f2:	bfd4      	ite	le
 80071f4:	9307      	strle	r3, [sp, #28]
 80071f6:	9305      	strgt	r3, [sp, #20]
 80071f8:	3601      	adds	r6, #1
 80071fa:	9011      	str	r0, [sp, #68]	; 0x44
 80071fc:	e7bc      	b.n	8007178 <_strtod_l+0x150>
 80071fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	9211      	str	r2, [sp, #68]	; 0x44
 8007204:	785a      	ldrb	r2, [r3, #1]
 8007206:	b3ae      	cbz	r6, 8007274 <_strtod_l+0x24c>
 8007208:	4683      	mov	fp, r0
 800720a:	4633      	mov	r3, r6
 800720c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007210:	2909      	cmp	r1, #9
 8007212:	d912      	bls.n	800723a <_strtod_l+0x212>
 8007214:	2101      	movs	r1, #1
 8007216:	e7c1      	b.n	800719c <_strtod_l+0x174>
 8007218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	9211      	str	r2, [sp, #68]	; 0x44
 800721e:	785a      	ldrb	r2, [r3, #1]
 8007220:	3001      	adds	r0, #1
 8007222:	2a30      	cmp	r2, #48	; 0x30
 8007224:	d0f8      	beq.n	8007218 <_strtod_l+0x1f0>
 8007226:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800722a:	2b08      	cmp	r3, #8
 800722c:	f200 8495 	bhi.w	8007b5a <_strtod_l+0xb32>
 8007230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	4683      	mov	fp, r0
 8007236:	2000      	movs	r0, #0
 8007238:	4603      	mov	r3, r0
 800723a:	3a30      	subs	r2, #48	; 0x30
 800723c:	f100 0101 	add.w	r1, r0, #1
 8007240:	d012      	beq.n	8007268 <_strtod_l+0x240>
 8007242:	448b      	add	fp, r1
 8007244:	eb00 0c03 	add.w	ip, r0, r3
 8007248:	4619      	mov	r1, r3
 800724a:	250a      	movs	r5, #10
 800724c:	4561      	cmp	r1, ip
 800724e:	d113      	bne.n	8007278 <_strtod_l+0x250>
 8007250:	1819      	adds	r1, r3, r0
 8007252:	2908      	cmp	r1, #8
 8007254:	f103 0301 	add.w	r3, r3, #1
 8007258:	4403      	add	r3, r0
 800725a:	dc1b      	bgt.n	8007294 <_strtod_l+0x26c>
 800725c:	9807      	ldr	r0, [sp, #28]
 800725e:	210a      	movs	r1, #10
 8007260:	fb01 2200 	mla	r2, r1, r0, r2
 8007264:	9207      	str	r2, [sp, #28]
 8007266:	2100      	movs	r1, #0
 8007268:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800726a:	1c50      	adds	r0, r2, #1
 800726c:	9011      	str	r0, [sp, #68]	; 0x44
 800726e:	7852      	ldrb	r2, [r2, #1]
 8007270:	4608      	mov	r0, r1
 8007272:	e7cb      	b.n	800720c <_strtod_l+0x1e4>
 8007274:	4630      	mov	r0, r6
 8007276:	e7d4      	b.n	8007222 <_strtod_l+0x1fa>
 8007278:	2908      	cmp	r1, #8
 800727a:	f101 0101 	add.w	r1, r1, #1
 800727e:	dc03      	bgt.n	8007288 <_strtod_l+0x260>
 8007280:	9f07      	ldr	r7, [sp, #28]
 8007282:	436f      	muls	r7, r5
 8007284:	9707      	str	r7, [sp, #28]
 8007286:	e7e1      	b.n	800724c <_strtod_l+0x224>
 8007288:	2910      	cmp	r1, #16
 800728a:	bfde      	ittt	le
 800728c:	9f05      	ldrle	r7, [sp, #20]
 800728e:	436f      	mulle	r7, r5
 8007290:	9705      	strle	r7, [sp, #20]
 8007292:	e7db      	b.n	800724c <_strtod_l+0x224>
 8007294:	2b10      	cmp	r3, #16
 8007296:	bfdf      	itttt	le
 8007298:	9805      	ldrle	r0, [sp, #20]
 800729a:	210a      	movle	r1, #10
 800729c:	fb01 2200 	mlale	r2, r1, r0, r2
 80072a0:	9205      	strle	r2, [sp, #20]
 80072a2:	e7e0      	b.n	8007266 <_strtod_l+0x23e>
 80072a4:	f04f 0b00 	mov.w	fp, #0
 80072a8:	2101      	movs	r1, #1
 80072aa:	e77c      	b.n	80071a6 <_strtod_l+0x17e>
 80072ac:	f04f 0e00 	mov.w	lr, #0
 80072b0:	f10a 0202 	add.w	r2, sl, #2
 80072b4:	9211      	str	r2, [sp, #68]	; 0x44
 80072b6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80072ba:	e785      	b.n	80071c8 <_strtod_l+0x1a0>
 80072bc:	f04f 0e01 	mov.w	lr, #1
 80072c0:	e7f6      	b.n	80072b0 <_strtod_l+0x288>
 80072c2:	bf00      	nop
 80072c4:	08009098 	.word	0x08009098
 80072c8:	08009094 	.word	0x08009094
 80072cc:	7ff00000 	.word	0x7ff00000
 80072d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072d2:	1c55      	adds	r5, r2, #1
 80072d4:	9511      	str	r5, [sp, #68]	; 0x44
 80072d6:	7852      	ldrb	r2, [r2, #1]
 80072d8:	2a30      	cmp	r2, #48	; 0x30
 80072da:	d0f9      	beq.n	80072d0 <_strtod_l+0x2a8>
 80072dc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80072e0:	2d08      	cmp	r5, #8
 80072e2:	f63f af78 	bhi.w	80071d6 <_strtod_l+0x1ae>
 80072e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80072ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072ec:	920a      	str	r2, [sp, #40]	; 0x28
 80072ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072f0:	1c55      	adds	r5, r2, #1
 80072f2:	9511      	str	r5, [sp, #68]	; 0x44
 80072f4:	7852      	ldrb	r2, [r2, #1]
 80072f6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80072fa:	2f09      	cmp	r7, #9
 80072fc:	d937      	bls.n	800736e <_strtod_l+0x346>
 80072fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007300:	1bed      	subs	r5, r5, r7
 8007302:	2d08      	cmp	r5, #8
 8007304:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007308:	dc02      	bgt.n	8007310 <_strtod_l+0x2e8>
 800730a:	4565      	cmp	r5, ip
 800730c:	bfa8      	it	ge
 800730e:	4665      	movge	r5, ip
 8007310:	f1be 0f00 	cmp.w	lr, #0
 8007314:	d000      	beq.n	8007318 <_strtod_l+0x2f0>
 8007316:	426d      	negs	r5, r5
 8007318:	2b00      	cmp	r3, #0
 800731a:	d14d      	bne.n	80073b8 <_strtod_l+0x390>
 800731c:	9b06      	ldr	r3, [sp, #24]
 800731e:	4303      	orrs	r3, r0
 8007320:	f47f aebd 	bne.w	800709e <_strtod_l+0x76>
 8007324:	2900      	cmp	r1, #0
 8007326:	f47f aed6 	bne.w	80070d6 <_strtod_l+0xae>
 800732a:	2a69      	cmp	r2, #105	; 0x69
 800732c:	d027      	beq.n	800737e <_strtod_l+0x356>
 800732e:	dc24      	bgt.n	800737a <_strtod_l+0x352>
 8007330:	2a49      	cmp	r2, #73	; 0x49
 8007332:	d024      	beq.n	800737e <_strtod_l+0x356>
 8007334:	2a4e      	cmp	r2, #78	; 0x4e
 8007336:	f47f aece 	bne.w	80070d6 <_strtod_l+0xae>
 800733a:	4995      	ldr	r1, [pc, #596]	; (8007590 <_strtod_l+0x568>)
 800733c:	a811      	add	r0, sp, #68	; 0x44
 800733e:	f001 f9c7 	bl	80086d0 <__match>
 8007342:	2800      	cmp	r0, #0
 8007344:	f43f aec7 	beq.w	80070d6 <_strtod_l+0xae>
 8007348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b28      	cmp	r3, #40	; 0x28
 800734e:	d12d      	bne.n	80073ac <_strtod_l+0x384>
 8007350:	4990      	ldr	r1, [pc, #576]	; (8007594 <_strtod_l+0x56c>)
 8007352:	aa14      	add	r2, sp, #80	; 0x50
 8007354:	a811      	add	r0, sp, #68	; 0x44
 8007356:	f001 f9cf 	bl	80086f8 <__hexnan>
 800735a:	2805      	cmp	r0, #5
 800735c:	d126      	bne.n	80073ac <_strtod_l+0x384>
 800735e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007360:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007364:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007368:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800736c:	e697      	b.n	800709e <_strtod_l+0x76>
 800736e:	250a      	movs	r5, #10
 8007370:	fb05 2c0c 	mla	ip, r5, ip, r2
 8007374:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007378:	e7b9      	b.n	80072ee <_strtod_l+0x2c6>
 800737a:	2a6e      	cmp	r2, #110	; 0x6e
 800737c:	e7db      	b.n	8007336 <_strtod_l+0x30e>
 800737e:	4986      	ldr	r1, [pc, #536]	; (8007598 <_strtod_l+0x570>)
 8007380:	a811      	add	r0, sp, #68	; 0x44
 8007382:	f001 f9a5 	bl	80086d0 <__match>
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f aea5 	beq.w	80070d6 <_strtod_l+0xae>
 800738c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800738e:	4983      	ldr	r1, [pc, #524]	; (800759c <_strtod_l+0x574>)
 8007390:	3b01      	subs	r3, #1
 8007392:	a811      	add	r0, sp, #68	; 0x44
 8007394:	9311      	str	r3, [sp, #68]	; 0x44
 8007396:	f001 f99b 	bl	80086d0 <__match>
 800739a:	b910      	cbnz	r0, 80073a2 <_strtod_l+0x37a>
 800739c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800739e:	3301      	adds	r3, #1
 80073a0:	9311      	str	r3, [sp, #68]	; 0x44
 80073a2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80075b0 <_strtod_l+0x588>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	e678      	b.n	800709e <_strtod_l+0x76>
 80073ac:	487c      	ldr	r0, [pc, #496]	; (80075a0 <_strtod_l+0x578>)
 80073ae:	f000 feab 	bl	8008108 <nan>
 80073b2:	ec59 8b10 	vmov	r8, r9, d0
 80073b6:	e672      	b.n	800709e <_strtod_l+0x76>
 80073b8:	eddd 7a07 	vldr	s15, [sp, #28]
 80073bc:	eba5 020b 	sub.w	r2, r5, fp
 80073c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	bf08      	it	eq
 80073c8:	461e      	moveq	r6, r3
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	9206      	str	r2, [sp, #24]
 80073ce:	461a      	mov	r2, r3
 80073d0:	bfa8      	it	ge
 80073d2:	2210      	movge	r2, #16
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	ec59 8b17 	vmov	r8, r9, d7
 80073da:	dd0c      	ble.n	80073f6 <_strtod_l+0x3ce>
 80073dc:	4971      	ldr	r1, [pc, #452]	; (80075a4 <_strtod_l+0x57c>)
 80073de:	eddd 6a05 	vldr	s13, [sp, #20]
 80073e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80073e6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80073ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80073ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80073f2:	ec59 8b16 	vmov	r8, r9, d6
 80073f6:	2b0f      	cmp	r3, #15
 80073f8:	dc37      	bgt.n	800746a <_strtod_l+0x442>
 80073fa:	9906      	ldr	r1, [sp, #24]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	f43f ae4e 	beq.w	800709e <_strtod_l+0x76>
 8007402:	dd23      	ble.n	800744c <_strtod_l+0x424>
 8007404:	2916      	cmp	r1, #22
 8007406:	dc0b      	bgt.n	8007420 <_strtod_l+0x3f8>
 8007408:	4b66      	ldr	r3, [pc, #408]	; (80075a4 <_strtod_l+0x57c>)
 800740a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800740e:	ed93 7b00 	vldr	d7, [r3]
 8007412:	ec49 8b16 	vmov	d6, r8, r9
 8007416:	ee27 7b06 	vmul.f64	d7, d7, d6
 800741a:	ec59 8b17 	vmov	r8, r9, d7
 800741e:	e63e      	b.n	800709e <_strtod_l+0x76>
 8007420:	9806      	ldr	r0, [sp, #24]
 8007422:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007426:	4281      	cmp	r1, r0
 8007428:	db1f      	blt.n	800746a <_strtod_l+0x442>
 800742a:	4a5e      	ldr	r2, [pc, #376]	; (80075a4 <_strtod_l+0x57c>)
 800742c:	f1c3 030f 	rsb	r3, r3, #15
 8007430:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007434:	ed91 7b00 	vldr	d7, [r1]
 8007438:	ec49 8b16 	vmov	d6, r8, r9
 800743c:	1ac3      	subs	r3, r0, r3
 800743e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007442:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007446:	ed92 6b00 	vldr	d6, [r2]
 800744a:	e7e4      	b.n	8007416 <_strtod_l+0x3ee>
 800744c:	9906      	ldr	r1, [sp, #24]
 800744e:	3116      	adds	r1, #22
 8007450:	db0b      	blt.n	800746a <_strtod_l+0x442>
 8007452:	4b54      	ldr	r3, [pc, #336]	; (80075a4 <_strtod_l+0x57c>)
 8007454:	ebab 0505 	sub.w	r5, fp, r5
 8007458:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800745c:	ed95 7b00 	vldr	d7, [r5]
 8007460:	ec49 8b16 	vmov	d6, r8, r9
 8007464:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007468:	e7d7      	b.n	800741a <_strtod_l+0x3f2>
 800746a:	9906      	ldr	r1, [sp, #24]
 800746c:	1a9a      	subs	r2, r3, r2
 800746e:	440a      	add	r2, r1
 8007470:	2a00      	cmp	r2, #0
 8007472:	dd6e      	ble.n	8007552 <_strtod_l+0x52a>
 8007474:	f012 000f 	ands.w	r0, r2, #15
 8007478:	d00a      	beq.n	8007490 <_strtod_l+0x468>
 800747a:	494a      	ldr	r1, [pc, #296]	; (80075a4 <_strtod_l+0x57c>)
 800747c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007480:	ed91 7b00 	vldr	d7, [r1]
 8007484:	ec49 8b16 	vmov	d6, r8, r9
 8007488:	ee27 7b06 	vmul.f64	d7, d7, d6
 800748c:	ec59 8b17 	vmov	r8, r9, d7
 8007490:	f032 020f 	bics.w	r2, r2, #15
 8007494:	d04e      	beq.n	8007534 <_strtod_l+0x50c>
 8007496:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800749a:	dd22      	ble.n	80074e2 <_strtod_l+0x4ba>
 800749c:	2500      	movs	r5, #0
 800749e:	462e      	mov	r6, r5
 80074a0:	9507      	str	r5, [sp, #28]
 80074a2:	462f      	mov	r7, r5
 80074a4:	2322      	movs	r3, #34	; 0x22
 80074a6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80075b0 <_strtod_l+0x588>
 80074aa:	6023      	str	r3, [r4, #0]
 80074ac:	f04f 0800 	mov.w	r8, #0
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f43f adf3 	beq.w	800709e <_strtod_l+0x76>
 80074b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff f930 	bl	8006720 <_Bfree>
 80074c0:	4639      	mov	r1, r7
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff f92c 	bl	8006720 <_Bfree>
 80074c8:	4631      	mov	r1, r6
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff f928 	bl	8006720 <_Bfree>
 80074d0:	9907      	ldr	r1, [sp, #28]
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff f924 	bl	8006720 <_Bfree>
 80074d8:	4629      	mov	r1, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff f920 	bl	8006720 <_Bfree>
 80074e0:	e5dd      	b.n	800709e <_strtod_l+0x76>
 80074e2:	2000      	movs	r0, #0
 80074e4:	ec49 8b17 	vmov	d7, r8, r9
 80074e8:	4f2f      	ldr	r7, [pc, #188]	; (80075a8 <_strtod_l+0x580>)
 80074ea:	1112      	asrs	r2, r2, #4
 80074ec:	4601      	mov	r1, r0
 80074ee:	2a01      	cmp	r2, #1
 80074f0:	dc23      	bgt.n	800753a <_strtod_l+0x512>
 80074f2:	b108      	cbz	r0, 80074f8 <_strtod_l+0x4d0>
 80074f4:	ec59 8b17 	vmov	r8, r9, d7
 80074f8:	4a2b      	ldr	r2, [pc, #172]	; (80075a8 <_strtod_l+0x580>)
 80074fa:	482c      	ldr	r0, [pc, #176]	; (80075ac <_strtod_l+0x584>)
 80074fc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007500:	ed92 7b00 	vldr	d7, [r2]
 8007504:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007508:	ec49 8b16 	vmov	d6, r8, r9
 800750c:	4a28      	ldr	r2, [pc, #160]	; (80075b0 <_strtod_l+0x588>)
 800750e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007512:	ee17 1a90 	vmov	r1, s15
 8007516:	400a      	ands	r2, r1
 8007518:	4282      	cmp	r2, r0
 800751a:	ec59 8b17 	vmov	r8, r9, d7
 800751e:	d8bd      	bhi.n	800749c <_strtod_l+0x474>
 8007520:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007524:	4282      	cmp	r2, r0
 8007526:	bf86      	itte	hi
 8007528:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80075b4 <_strtod_l+0x58c>
 800752c:	f04f 38ff 	movhi.w	r8, #4294967295
 8007530:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007534:	2200      	movs	r2, #0
 8007536:	9205      	str	r2, [sp, #20]
 8007538:	e076      	b.n	8007628 <_strtod_l+0x600>
 800753a:	f012 0f01 	tst.w	r2, #1
 800753e:	d004      	beq.n	800754a <_strtod_l+0x522>
 8007540:	ed97 6b00 	vldr	d6, [r7]
 8007544:	2001      	movs	r0, #1
 8007546:	ee27 7b06 	vmul.f64	d7, d7, d6
 800754a:	3101      	adds	r1, #1
 800754c:	1052      	asrs	r2, r2, #1
 800754e:	3708      	adds	r7, #8
 8007550:	e7cd      	b.n	80074ee <_strtod_l+0x4c6>
 8007552:	d0ef      	beq.n	8007534 <_strtod_l+0x50c>
 8007554:	4252      	negs	r2, r2
 8007556:	f012 000f 	ands.w	r0, r2, #15
 800755a:	d00a      	beq.n	8007572 <_strtod_l+0x54a>
 800755c:	4911      	ldr	r1, [pc, #68]	; (80075a4 <_strtod_l+0x57c>)
 800755e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007562:	ed91 7b00 	vldr	d7, [r1]
 8007566:	ec49 8b16 	vmov	d6, r8, r9
 800756a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800756e:	ec59 8b17 	vmov	r8, r9, d7
 8007572:	1112      	asrs	r2, r2, #4
 8007574:	d0de      	beq.n	8007534 <_strtod_l+0x50c>
 8007576:	2a1f      	cmp	r2, #31
 8007578:	dd1e      	ble.n	80075b8 <_strtod_l+0x590>
 800757a:	2500      	movs	r5, #0
 800757c:	462e      	mov	r6, r5
 800757e:	9507      	str	r5, [sp, #28]
 8007580:	462f      	mov	r7, r5
 8007582:	2322      	movs	r3, #34	; 0x22
 8007584:	f04f 0800 	mov.w	r8, #0
 8007588:	f04f 0900 	mov.w	r9, #0
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	e78f      	b.n	80074b0 <_strtod_l+0x488>
 8007590:	08008e85 	.word	0x08008e85
 8007594:	080090ac 	.word	0x080090ac
 8007598:	08008e7d 	.word	0x08008e7d
 800759c:	08008eb4 	.word	0x08008eb4
 80075a0:	0800923d 	.word	0x0800923d
 80075a4:	08008fc0 	.word	0x08008fc0
 80075a8:	08008f98 	.word	0x08008f98
 80075ac:	7ca00000 	.word	0x7ca00000
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	7fefffff 	.word	0x7fefffff
 80075b8:	f012 0110 	ands.w	r1, r2, #16
 80075bc:	bf18      	it	ne
 80075be:	216a      	movne	r1, #106	; 0x6a
 80075c0:	9105      	str	r1, [sp, #20]
 80075c2:	ec49 8b17 	vmov	d7, r8, r9
 80075c6:	49be      	ldr	r1, [pc, #760]	; (80078c0 <_strtod_l+0x898>)
 80075c8:	2000      	movs	r0, #0
 80075ca:	07d7      	lsls	r7, r2, #31
 80075cc:	d504      	bpl.n	80075d8 <_strtod_l+0x5b0>
 80075ce:	ed91 6b00 	vldr	d6, [r1]
 80075d2:	2001      	movs	r0, #1
 80075d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075d8:	1052      	asrs	r2, r2, #1
 80075da:	f101 0108 	add.w	r1, r1, #8
 80075de:	d1f4      	bne.n	80075ca <_strtod_l+0x5a2>
 80075e0:	b108      	cbz	r0, 80075e6 <_strtod_l+0x5be>
 80075e2:	ec59 8b17 	vmov	r8, r9, d7
 80075e6:	9a05      	ldr	r2, [sp, #20]
 80075e8:	b1ba      	cbz	r2, 800761a <_strtod_l+0x5f2>
 80075ea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80075ee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	4648      	mov	r0, r9
 80075f6:	dd10      	ble.n	800761a <_strtod_l+0x5f2>
 80075f8:	2a1f      	cmp	r2, #31
 80075fa:	f340 812c 	ble.w	8007856 <_strtod_l+0x82e>
 80075fe:	2a34      	cmp	r2, #52	; 0x34
 8007600:	bfde      	ittt	le
 8007602:	f04f 32ff 	movle.w	r2, #4294967295
 8007606:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800760a:	408a      	lslle	r2, r1
 800760c:	f04f 0800 	mov.w	r8, #0
 8007610:	bfcc      	ite	gt
 8007612:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007616:	ea02 0900 	andle.w	r9, r2, r0
 800761a:	ec49 8b17 	vmov	d7, r8, r9
 800761e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	d0a8      	beq.n	800757a <_strtod_l+0x552>
 8007628:	9a07      	ldr	r2, [sp, #28]
 800762a:	9200      	str	r2, [sp, #0]
 800762c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800762e:	4632      	mov	r2, r6
 8007630:	4620      	mov	r0, r4
 8007632:	f7ff f8dd 	bl	80067f0 <__s2b>
 8007636:	9007      	str	r0, [sp, #28]
 8007638:	2800      	cmp	r0, #0
 800763a:	f43f af2f 	beq.w	800749c <_strtod_l+0x474>
 800763e:	9a06      	ldr	r2, [sp, #24]
 8007640:	2a00      	cmp	r2, #0
 8007642:	ebab 0305 	sub.w	r3, fp, r5
 8007646:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80078a0 <_strtod_l+0x878>
 800764a:	bfa8      	it	ge
 800764c:	2300      	movge	r3, #0
 800764e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80078a8 <_strtod_l+0x880>
 8007652:	ed9f bb97 	vldr	d11, [pc, #604]	; 80078b0 <_strtod_l+0x888>
 8007656:	9309      	str	r3, [sp, #36]	; 0x24
 8007658:	2500      	movs	r5, #0
 800765a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800765e:	930c      	str	r3, [sp, #48]	; 0x30
 8007660:	462e      	mov	r6, r5
 8007662:	9b07      	ldr	r3, [sp, #28]
 8007664:	4620      	mov	r0, r4
 8007666:	6859      	ldr	r1, [r3, #4]
 8007668:	f7ff f81a 	bl	80066a0 <_Balloc>
 800766c:	4607      	mov	r7, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f af18 	beq.w	80074a4 <_strtod_l+0x47c>
 8007674:	9b07      	ldr	r3, [sp, #28]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	3202      	adds	r2, #2
 800767a:	f103 010c 	add.w	r1, r3, #12
 800767e:	0092      	lsls	r2, r2, #2
 8007680:	300c      	adds	r0, #12
 8007682:	f7fe f9b8 	bl	80059f6 <memcpy>
 8007686:	ec49 8b10 	vmov	d0, r8, r9
 800768a:	aa14      	add	r2, sp, #80	; 0x50
 800768c:	a913      	add	r1, sp, #76	; 0x4c
 800768e:	4620      	mov	r0, r4
 8007690:	f7ff fbe2 	bl	8006e58 <__d2b>
 8007694:	ec49 8b18 	vmov	d8, r8, r9
 8007698:	9012      	str	r0, [sp, #72]	; 0x48
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f af02 	beq.w	80074a4 <_strtod_l+0x47c>
 80076a0:	2101      	movs	r1, #1
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff f93c 	bl	8006920 <__i2b>
 80076a8:	4606      	mov	r6, r0
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f aefa 	beq.w	80074a4 <_strtod_l+0x47c>
 80076b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfab      	itete	ge
 80076b8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80076ba:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80076bc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80076c0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80076c4:	bfac      	ite	ge
 80076c6:	eb03 0b02 	addge.w	fp, r3, r2
 80076ca:	eba2 0a03 	sublt.w	sl, r2, r3
 80076ce:	9a05      	ldr	r2, [sp, #20]
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	440b      	add	r3, r1
 80076d4:	4a7b      	ldr	r2, [pc, #492]	; (80078c4 <_strtod_l+0x89c>)
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4293      	cmp	r3, r2
 80076da:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80076de:	f280 80cd 	bge.w	800787c <_strtod_l+0x854>
 80076e2:	1ad2      	subs	r2, r2, r3
 80076e4:	2a1f      	cmp	r2, #31
 80076e6:	eba1 0102 	sub.w	r1, r1, r2
 80076ea:	f04f 0001 	mov.w	r0, #1
 80076ee:	f300 80b9 	bgt.w	8007864 <_strtod_l+0x83c>
 80076f2:	fa00 f302 	lsl.w	r3, r0, r2
 80076f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076f8:	2300      	movs	r3, #0
 80076fa:	930a      	str	r3, [sp, #40]	; 0x28
 80076fc:	eb0b 0301 	add.w	r3, fp, r1
 8007700:	9a05      	ldr	r2, [sp, #20]
 8007702:	459b      	cmp	fp, r3
 8007704:	448a      	add	sl, r1
 8007706:	4492      	add	sl, r2
 8007708:	465a      	mov	r2, fp
 800770a:	bfa8      	it	ge
 800770c:	461a      	movge	r2, r3
 800770e:	4552      	cmp	r2, sl
 8007710:	bfa8      	it	ge
 8007712:	4652      	movge	r2, sl
 8007714:	2a00      	cmp	r2, #0
 8007716:	bfc2      	ittt	gt
 8007718:	1a9b      	subgt	r3, r3, r2
 800771a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800771e:	ebab 0b02 	subgt.w	fp, fp, r2
 8007722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007724:	2a00      	cmp	r2, #0
 8007726:	dd18      	ble.n	800775a <_strtod_l+0x732>
 8007728:	4631      	mov	r1, r6
 800772a:	4620      	mov	r0, r4
 800772c:	930f      	str	r3, [sp, #60]	; 0x3c
 800772e:	f7ff f9b7 	bl	8006aa0 <__pow5mult>
 8007732:	4606      	mov	r6, r0
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f aeb5 	beq.w	80074a4 <_strtod_l+0x47c>
 800773a:	4601      	mov	r1, r0
 800773c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff f904 	bl	800694c <__multiply>
 8007744:	900e      	str	r0, [sp, #56]	; 0x38
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f aeac 	beq.w	80074a4 <_strtod_l+0x47c>
 800774c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800774e:	4620      	mov	r0, r4
 8007750:	f7fe ffe6 	bl	8006720 <_Bfree>
 8007754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007758:	9212      	str	r2, [sp, #72]	; 0x48
 800775a:	2b00      	cmp	r3, #0
 800775c:	f300 8093 	bgt.w	8007886 <_strtod_l+0x85e>
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dd08      	ble.n	8007778 <_strtod_l+0x750>
 8007766:	4639      	mov	r1, r7
 8007768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff f998 	bl	8006aa0 <__pow5mult>
 8007770:	4607      	mov	r7, r0
 8007772:	2800      	cmp	r0, #0
 8007774:	f43f ae96 	beq.w	80074a4 <_strtod_l+0x47c>
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	dd08      	ble.n	8007790 <_strtod_l+0x768>
 800777e:	4639      	mov	r1, r7
 8007780:	4652      	mov	r2, sl
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff f9e6 	bl	8006b54 <__lshift>
 8007788:	4607      	mov	r7, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f ae8a 	beq.w	80074a4 <_strtod_l+0x47c>
 8007790:	f1bb 0f00 	cmp.w	fp, #0
 8007794:	dd08      	ble.n	80077a8 <_strtod_l+0x780>
 8007796:	4631      	mov	r1, r6
 8007798:	465a      	mov	r2, fp
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff f9da 	bl	8006b54 <__lshift>
 80077a0:	4606      	mov	r6, r0
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f ae7e 	beq.w	80074a4 <_strtod_l+0x47c>
 80077a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80077aa:	463a      	mov	r2, r7
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff fa59 	bl	8006c64 <__mdiff>
 80077b2:	4605      	mov	r5, r0
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f43f ae75 	beq.w	80074a4 <_strtod_l+0x47c>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80077c0:	60c3      	str	r3, [r0, #12]
 80077c2:	4631      	mov	r1, r6
 80077c4:	f7ff fa32 	bl	8006c2c <__mcmp>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	da7f      	bge.n	80078cc <_strtod_l+0x8a4>
 80077cc:	ea5a 0a08 	orrs.w	sl, sl, r8
 80077d0:	f040 80a5 	bne.w	800791e <_strtod_l+0x8f6>
 80077d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 80a0 	bne.w	800791e <_strtod_l+0x8f6>
 80077de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e2:	0d1b      	lsrs	r3, r3, #20
 80077e4:	051b      	lsls	r3, r3, #20
 80077e6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077ea:	f240 8098 	bls.w	800791e <_strtod_l+0x8f6>
 80077ee:	696b      	ldr	r3, [r5, #20]
 80077f0:	b91b      	cbnz	r3, 80077fa <_strtod_l+0x7d2>
 80077f2:	692b      	ldr	r3, [r5, #16]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	f340 8092 	ble.w	800791e <_strtod_l+0x8f6>
 80077fa:	4629      	mov	r1, r5
 80077fc:	2201      	movs	r2, #1
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff f9a8 	bl	8006b54 <__lshift>
 8007804:	4631      	mov	r1, r6
 8007806:	4605      	mov	r5, r0
 8007808:	f7ff fa10 	bl	8006c2c <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	f340 8086 	ble.w	800791e <_strtod_l+0x8f6>
 8007812:	9905      	ldr	r1, [sp, #20]
 8007814:	4a2c      	ldr	r2, [pc, #176]	; (80078c8 <_strtod_l+0x8a0>)
 8007816:	464b      	mov	r3, r9
 8007818:	2900      	cmp	r1, #0
 800781a:	f000 809f 	beq.w	800795c <_strtod_l+0x934>
 800781e:	ea02 0109 	and.w	r1, r2, r9
 8007822:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007826:	f300 8099 	bgt.w	800795c <_strtod_l+0x934>
 800782a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800782e:	f77f aea8 	ble.w	8007582 <_strtod_l+0x55a>
 8007832:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80078b8 <_strtod_l+0x890>
 8007836:	ec49 8b16 	vmov	d6, r8, r9
 800783a:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <_strtod_l+0x8a0>)
 800783c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007840:	ee17 2a90 	vmov	r2, s15
 8007844:	4013      	ands	r3, r2
 8007846:	ec59 8b17 	vmov	r8, r9, d7
 800784a:	2b00      	cmp	r3, #0
 800784c:	f47f ae34 	bne.w	80074b8 <_strtod_l+0x490>
 8007850:	2322      	movs	r3, #34	; 0x22
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	e630      	b.n	80074b8 <_strtod_l+0x490>
 8007856:	f04f 31ff 	mov.w	r1, #4294967295
 800785a:	fa01 f202 	lsl.w	r2, r1, r2
 800785e:	ea02 0808 	and.w	r8, r2, r8
 8007862:	e6da      	b.n	800761a <_strtod_l+0x5f2>
 8007864:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007868:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800786c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007870:	33e2      	adds	r3, #226	; 0xe2
 8007872:	fa00 f303 	lsl.w	r3, r0, r3
 8007876:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800787a:	e73f      	b.n	80076fc <_strtod_l+0x6d4>
 800787c:	2200      	movs	r2, #0
 800787e:	2301      	movs	r3, #1
 8007880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007884:	e73a      	b.n	80076fc <_strtod_l+0x6d4>
 8007886:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007888:	461a      	mov	r2, r3
 800788a:	4620      	mov	r0, r4
 800788c:	f7ff f962 	bl	8006b54 <__lshift>
 8007890:	9012      	str	r0, [sp, #72]	; 0x48
 8007892:	2800      	cmp	r0, #0
 8007894:	f47f af64 	bne.w	8007760 <_strtod_l+0x738>
 8007898:	e604      	b.n	80074a4 <_strtod_l+0x47c>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
 80078a0:	94a03595 	.word	0x94a03595
 80078a4:	3fcfffff 	.word	0x3fcfffff
 80078a8:	94a03595 	.word	0x94a03595
 80078ac:	3fdfffff 	.word	0x3fdfffff
 80078b0:	35afe535 	.word	0x35afe535
 80078b4:	3fe00000 	.word	0x3fe00000
 80078b8:	00000000 	.word	0x00000000
 80078bc:	39500000 	.word	0x39500000
 80078c0:	080090c0 	.word	0x080090c0
 80078c4:	fffffc02 	.word	0xfffffc02
 80078c8:	7ff00000 	.word	0x7ff00000
 80078cc:	46cb      	mov	fp, r9
 80078ce:	d15f      	bne.n	8007990 <_strtod_l+0x968>
 80078d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078d4:	f1ba 0f00 	cmp.w	sl, #0
 80078d8:	d02a      	beq.n	8007930 <_strtod_l+0x908>
 80078da:	4aa7      	ldr	r2, [pc, #668]	; (8007b78 <_strtod_l+0xb50>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d12b      	bne.n	8007938 <_strtod_l+0x910>
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	4642      	mov	r2, r8
 80078e4:	b1fb      	cbz	r3, 8007926 <_strtod_l+0x8fe>
 80078e6:	4ba5      	ldr	r3, [pc, #660]	; (8007b7c <_strtod_l+0xb54>)
 80078e8:	ea09 0303 	and.w	r3, r9, r3
 80078ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078f0:	f04f 31ff 	mov.w	r1, #4294967295
 80078f4:	d81a      	bhi.n	800792c <_strtod_l+0x904>
 80078f6:	0d1b      	lsrs	r3, r3, #20
 80078f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	429a      	cmp	r2, r3
 8007902:	d119      	bne.n	8007938 <_strtod_l+0x910>
 8007904:	4b9e      	ldr	r3, [pc, #632]	; (8007b80 <_strtod_l+0xb58>)
 8007906:	459b      	cmp	fp, r3
 8007908:	d102      	bne.n	8007910 <_strtod_l+0x8e8>
 800790a:	3201      	adds	r2, #1
 800790c:	f43f adca 	beq.w	80074a4 <_strtod_l+0x47c>
 8007910:	4b9a      	ldr	r3, [pc, #616]	; (8007b7c <_strtod_l+0xb54>)
 8007912:	ea0b 0303 	and.w	r3, fp, r3
 8007916:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d186      	bne.n	8007832 <_strtod_l+0x80a>
 8007924:	e5c8      	b.n	80074b8 <_strtod_l+0x490>
 8007926:	f04f 33ff 	mov.w	r3, #4294967295
 800792a:	e7e9      	b.n	8007900 <_strtod_l+0x8d8>
 800792c:	460b      	mov	r3, r1
 800792e:	e7e7      	b.n	8007900 <_strtod_l+0x8d8>
 8007930:	ea53 0308 	orrs.w	r3, r3, r8
 8007934:	f43f af6d 	beq.w	8007812 <_strtod_l+0x7ea>
 8007938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793a:	b1cb      	cbz	r3, 8007970 <_strtod_l+0x948>
 800793c:	ea13 0f0b 	tst.w	r3, fp
 8007940:	d0ed      	beq.n	800791e <_strtod_l+0x8f6>
 8007942:	9a05      	ldr	r2, [sp, #20]
 8007944:	4640      	mov	r0, r8
 8007946:	4649      	mov	r1, r9
 8007948:	f1ba 0f00 	cmp.w	sl, #0
 800794c:	d014      	beq.n	8007978 <_strtod_l+0x950>
 800794e:	f7ff fb51 	bl	8006ff4 <sulp>
 8007952:	ee38 7b00 	vadd.f64	d7, d8, d0
 8007956:	ec59 8b17 	vmov	r8, r9, d7
 800795a:	e7e0      	b.n	800791e <_strtod_l+0x8f6>
 800795c:	4013      	ands	r3, r2
 800795e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007962:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007966:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800796a:	f04f 38ff 	mov.w	r8, #4294967295
 800796e:	e7d6      	b.n	800791e <_strtod_l+0x8f6>
 8007970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007972:	ea13 0f08 	tst.w	r3, r8
 8007976:	e7e3      	b.n	8007940 <_strtod_l+0x918>
 8007978:	f7ff fb3c 	bl	8006ff4 <sulp>
 800797c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007980:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007988:	ec59 8b10 	vmov	r8, r9, d0
 800798c:	d1c7      	bne.n	800791e <_strtod_l+0x8f6>
 800798e:	e5f8      	b.n	8007582 <_strtod_l+0x55a>
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	f7ff faba 	bl	8006f0c <__ratio>
 8007998:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800799c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a4:	d85f      	bhi.n	8007a66 <_strtod_l+0xa3e>
 80079a6:	f1ba 0f00 	cmp.w	sl, #0
 80079aa:	d166      	bne.n	8007a7a <_strtod_l+0xa52>
 80079ac:	f1b8 0f00 	cmp.w	r8, #0
 80079b0:	d14d      	bne.n	8007a4e <_strtod_l+0xa26>
 80079b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079b6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d162      	bne.n	8007a84 <_strtod_l+0xa5c>
 80079be:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80079c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	d401      	bmi.n	80079d0 <_strtod_l+0x9a8>
 80079cc:	ee20 db0d 	vmul.f64	d13, d0, d13
 80079d0:	eeb1 cb4d 	vneg.f64	d12, d13
 80079d4:	4869      	ldr	r0, [pc, #420]	; (8007b7c <_strtod_l+0xb54>)
 80079d6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8007b88 <_strtod_l+0xb60>
 80079da:	ea0b 0100 	and.w	r1, fp, r0
 80079de:	4561      	cmp	r1, ip
 80079e0:	ec53 2b1c 	vmov	r2, r3, d12
 80079e4:	d17a      	bne.n	8007adc <_strtod_l+0xab4>
 80079e6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80079ea:	ec49 8b10 	vmov	d0, r8, r9
 80079ee:	910a      	str	r1, [sp, #40]	; 0x28
 80079f0:	f7ff f9c2 	bl	8006d78 <__ulp>
 80079f4:	ec49 8b1e 	vmov	d14, r8, r9
 80079f8:	4860      	ldr	r0, [pc, #384]	; (8007b7c <_strtod_l+0xb54>)
 80079fa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80079fe:	ee1e 3a90 	vmov	r3, s29
 8007a02:	4a60      	ldr	r2, [pc, #384]	; (8007b84 <_strtod_l+0xb5c>)
 8007a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a06:	4018      	ands	r0, r3
 8007a08:	4290      	cmp	r0, r2
 8007a0a:	ec59 8b1e 	vmov	r8, r9, d14
 8007a0e:	d93c      	bls.n	8007a8a <_strtod_l+0xa62>
 8007a10:	ee18 2a90 	vmov	r2, s17
 8007a14:	4b5a      	ldr	r3, [pc, #360]	; (8007b80 <_strtod_l+0xb58>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d104      	bne.n	8007a24 <_strtod_l+0x9fc>
 8007a1a:	ee18 3a10 	vmov	r3, s16
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f43f ad40 	beq.w	80074a4 <_strtod_l+0x47c>
 8007a24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007b80 <_strtod_l+0xb58>
 8007a28:	f04f 38ff 	mov.w	r8, #4294967295
 8007a2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7fe fe76 	bl	8006720 <_Bfree>
 8007a34:	4639      	mov	r1, r7
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7fe fe72 	bl	8006720 <_Bfree>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7fe fe6e 	bl	8006720 <_Bfree>
 8007a44:	4629      	mov	r1, r5
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7fe fe6a 	bl	8006720 <_Bfree>
 8007a4c:	e609      	b.n	8007662 <_strtod_l+0x63a>
 8007a4e:	f1b8 0f01 	cmp.w	r8, #1
 8007a52:	d103      	bne.n	8007a5c <_strtod_l+0xa34>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	f43f ad93 	beq.w	8007582 <_strtod_l+0x55a>
 8007a5c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007a60:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007a64:	e7b6      	b.n	80079d4 <_strtod_l+0x9ac>
 8007a66:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007a6a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007a6e:	f1ba 0f00 	cmp.w	sl, #0
 8007a72:	d0ad      	beq.n	80079d0 <_strtod_l+0x9a8>
 8007a74:	eeb0 cb4d 	vmov.f64	d12, d13
 8007a78:	e7ac      	b.n	80079d4 <_strtod_l+0x9ac>
 8007a7a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8007a7e:	eeb0 db4c 	vmov.f64	d13, d12
 8007a82:	e7a7      	b.n	80079d4 <_strtod_l+0x9ac>
 8007a84:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007a88:	e7a4      	b.n	80079d4 <_strtod_l+0x9ac>
 8007a8a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	46cb      	mov	fp, r9
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1ca      	bne.n	8007a2c <_strtod_l+0xa04>
 8007a96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a9a:	0d1b      	lsrs	r3, r3, #20
 8007a9c:	051b      	lsls	r3, r3, #20
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	d1c4      	bne.n	8007a2c <_strtod_l+0xa04>
 8007aa2:	ec51 0b1d 	vmov	r0, r1, d13
 8007aa6:	f7f8 fe2f 	bl	8000708 <__aeabi_d2lz>
 8007aaa:	f7f8 fdff 	bl	80006ac <__aeabi_l2d>
 8007aae:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8007ab2:	ec41 0b17 	vmov	d7, r0, r1
 8007ab6:	ea4b 0b08 	orr.w	fp, fp, r8
 8007aba:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8007abe:	ee3d db47 	vsub.f64	d13, d13, d7
 8007ac2:	d03c      	beq.n	8007b3e <_strtod_l+0xb16>
 8007ac4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007acc:	f53f acf4 	bmi.w	80074b8 <_strtod_l+0x490>
 8007ad0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	dda8      	ble.n	8007a2c <_strtod_l+0xa04>
 8007ada:	e4ed      	b.n	80074b8 <_strtod_l+0x490>
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	b1f0      	cbz	r0, 8007b1e <_strtod_l+0xaf6>
 8007ae0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007ae4:	d81b      	bhi.n	8007b1e <_strtod_l+0xaf6>
 8007ae6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007b70 <_strtod_l+0xb48>
 8007aea:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8007aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af2:	d811      	bhi.n	8007b18 <_strtod_l+0xaf0>
 8007af4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8007af8:	ee1d 3a10 	vmov	r3, s26
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf38      	it	cc
 8007b00:	2301      	movcc	r3, #1
 8007b02:	ee0d 3a10 	vmov	s26, r3
 8007b06:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8007b0a:	f1ba 0f00 	cmp.w	sl, #0
 8007b0e:	d113      	bne.n	8007b38 <_strtod_l+0xb10>
 8007b10:	eeb1 7b4d 	vneg.f64	d7, d13
 8007b14:	ec53 2b17 	vmov	r2, r3, d7
 8007b18:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8007b1c:	1a43      	subs	r3, r0, r1
 8007b1e:	eeb0 0b48 	vmov.f64	d0, d8
 8007b22:	ec43 2b1c 	vmov	d12, r2, r3
 8007b26:	910a      	str	r1, [sp, #40]	; 0x28
 8007b28:	f7ff f926 	bl	8006d78 <__ulp>
 8007b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b2e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8007b32:	ec59 8b18 	vmov	r8, r9, d8
 8007b36:	e7aa      	b.n	8007a8e <_strtod_l+0xa66>
 8007b38:	eeb0 7b4d 	vmov.f64	d7, d13
 8007b3c:	e7ea      	b.n	8007b14 <_strtod_l+0xaec>
 8007b3e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	f57f af71 	bpl.w	8007a2c <_strtod_l+0xa04>
 8007b4a:	e4b5      	b.n	80074b8 <_strtod_l+0x490>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	f7ff baa6 	b.w	80070a6 <_strtod_l+0x7e>
 8007b5a:	2a65      	cmp	r2, #101	; 0x65
 8007b5c:	f43f aba2 	beq.w	80072a4 <_strtod_l+0x27c>
 8007b60:	2a45      	cmp	r2, #69	; 0x45
 8007b62:	f43f ab9f 	beq.w	80072a4 <_strtod_l+0x27c>
 8007b66:	2101      	movs	r1, #1
 8007b68:	f7ff bbd8 	b.w	800731c <_strtod_l+0x2f4>
 8007b6c:	f3af 8000 	nop.w
 8007b70:	ffc00000 	.word	0xffc00000
 8007b74:	41dfffff 	.word	0x41dfffff
 8007b78:	000fffff 	.word	0x000fffff
 8007b7c:	7ff00000 	.word	0x7ff00000
 8007b80:	7fefffff 	.word	0x7fefffff
 8007b84:	7c9fffff 	.word	0x7c9fffff
 8007b88:	7fe00000 	.word	0x7fe00000

08007b8c <_strtod_r>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <_strtod_r+0x8>)
 8007b8e:	f7ff ba4b 	b.w	8007028 <_strtod_l>
 8007b92:	bf00      	nop
 8007b94:	2400006c 	.word	0x2400006c

08007b98 <_strtol_l.constprop.0>:
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9e:	d001      	beq.n	8007ba4 <_strtol_l.constprop.0+0xc>
 8007ba0:	2b24      	cmp	r3, #36	; 0x24
 8007ba2:	d906      	bls.n	8007bb2 <_strtol_l.constprop.0+0x1a>
 8007ba4:	f7fd fefa 	bl	800599c <__errno>
 8007ba8:	2316      	movs	r3, #22
 8007baa:	6003      	str	r3, [r0, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c98 <_strtol_l.constprop.0+0x100>
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	462e      	mov	r6, r5
 8007bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bbe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007bc2:	f017 0708 	ands.w	r7, r7, #8
 8007bc6:	d1f7      	bne.n	8007bb8 <_strtol_l.constprop.0+0x20>
 8007bc8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bca:	d132      	bne.n	8007c32 <_strtol_l.constprop.0+0x9a>
 8007bcc:	782c      	ldrb	r4, [r5, #0]
 8007bce:	2701      	movs	r7, #1
 8007bd0:	1cb5      	adds	r5, r6, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05b      	beq.n	8007c8e <_strtol_l.constprop.0+0xf6>
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d109      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007bda:	2c30      	cmp	r4, #48	; 0x30
 8007bdc:	d107      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007bde:	782c      	ldrb	r4, [r5, #0]
 8007be0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007be4:	2c58      	cmp	r4, #88	; 0x58
 8007be6:	d14d      	bne.n	8007c84 <_strtol_l.constprop.0+0xec>
 8007be8:	786c      	ldrb	r4, [r5, #1]
 8007bea:	2310      	movs	r3, #16
 8007bec:	3502      	adds	r5, #2
 8007bee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007bf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bf6:	f04f 0e00 	mov.w	lr, #0
 8007bfa:	fbb8 f9f3 	udiv	r9, r8, r3
 8007bfe:	4676      	mov	r6, lr
 8007c00:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c04:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c08:	f1bc 0f09 	cmp.w	ip, #9
 8007c0c:	d816      	bhi.n	8007c3c <_strtol_l.constprop.0+0xa4>
 8007c0e:	4664      	mov	r4, ip
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	dd24      	ble.n	8007c5e <_strtol_l.constprop.0+0xc6>
 8007c14:	f1be 3fff 	cmp.w	lr, #4294967295
 8007c18:	d008      	beq.n	8007c2c <_strtol_l.constprop.0+0x94>
 8007c1a:	45b1      	cmp	r9, r6
 8007c1c:	d31c      	bcc.n	8007c58 <_strtol_l.constprop.0+0xc0>
 8007c1e:	d101      	bne.n	8007c24 <_strtol_l.constprop.0+0x8c>
 8007c20:	45a2      	cmp	sl, r4
 8007c22:	db19      	blt.n	8007c58 <_strtol_l.constprop.0+0xc0>
 8007c24:	fb06 4603 	mla	r6, r6, r3, r4
 8007c28:	f04f 0e01 	mov.w	lr, #1
 8007c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c30:	e7e8      	b.n	8007c04 <_strtol_l.constprop.0+0x6c>
 8007c32:	2c2b      	cmp	r4, #43	; 0x2b
 8007c34:	bf04      	itt	eq
 8007c36:	782c      	ldrbeq	r4, [r5, #0]
 8007c38:	1cb5      	addeq	r5, r6, #2
 8007c3a:	e7ca      	b.n	8007bd2 <_strtol_l.constprop.0+0x3a>
 8007c3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c40:	f1bc 0f19 	cmp.w	ip, #25
 8007c44:	d801      	bhi.n	8007c4a <_strtol_l.constprop.0+0xb2>
 8007c46:	3c37      	subs	r4, #55	; 0x37
 8007c48:	e7e2      	b.n	8007c10 <_strtol_l.constprop.0+0x78>
 8007c4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c4e:	f1bc 0f19 	cmp.w	ip, #25
 8007c52:	d804      	bhi.n	8007c5e <_strtol_l.constprop.0+0xc6>
 8007c54:	3c57      	subs	r4, #87	; 0x57
 8007c56:	e7db      	b.n	8007c10 <_strtol_l.constprop.0+0x78>
 8007c58:	f04f 3eff 	mov.w	lr, #4294967295
 8007c5c:	e7e6      	b.n	8007c2c <_strtol_l.constprop.0+0x94>
 8007c5e:	f1be 3fff 	cmp.w	lr, #4294967295
 8007c62:	d105      	bne.n	8007c70 <_strtol_l.constprop.0+0xd8>
 8007c64:	2322      	movs	r3, #34	; 0x22
 8007c66:	6003      	str	r3, [r0, #0]
 8007c68:	4646      	mov	r6, r8
 8007c6a:	b942      	cbnz	r2, 8007c7e <_strtol_l.constprop.0+0xe6>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	e79e      	b.n	8007bae <_strtol_l.constprop.0+0x16>
 8007c70:	b107      	cbz	r7, 8007c74 <_strtol_l.constprop.0+0xdc>
 8007c72:	4276      	negs	r6, r6
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d0f9      	beq.n	8007c6c <_strtol_l.constprop.0+0xd4>
 8007c78:	f1be 0f00 	cmp.w	lr, #0
 8007c7c:	d000      	beq.n	8007c80 <_strtol_l.constprop.0+0xe8>
 8007c7e:	1e69      	subs	r1, r5, #1
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	e7f3      	b.n	8007c6c <_strtol_l.constprop.0+0xd4>
 8007c84:	2430      	movs	r4, #48	; 0x30
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1b1      	bne.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	e7af      	b.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c8e:	2c30      	cmp	r4, #48	; 0x30
 8007c90:	d0a5      	beq.n	8007bde <_strtol_l.constprop.0+0x46>
 8007c92:	230a      	movs	r3, #10
 8007c94:	e7ab      	b.n	8007bee <_strtol_l.constprop.0+0x56>
 8007c96:	bf00      	nop
 8007c98:	080090e9 	.word	0x080090e9

08007c9c <_strtol_r>:
 8007c9c:	f7ff bf7c 	b.w	8007b98 <_strtol_l.constprop.0>

08007ca0 <__ssputs_r>:
 8007ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	688e      	ldr	r6, [r1, #8]
 8007ca6:	461f      	mov	r7, r3
 8007ca8:	42be      	cmp	r6, r7
 8007caa:	680b      	ldr	r3, [r1, #0]
 8007cac:	4682      	mov	sl, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	4690      	mov	r8, r2
 8007cb2:	d82c      	bhi.n	8007d0e <__ssputs_r+0x6e>
 8007cb4:	898a      	ldrh	r2, [r1, #12]
 8007cb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cba:	d026      	beq.n	8007d0a <__ssputs_r+0x6a>
 8007cbc:	6965      	ldr	r5, [r4, #20]
 8007cbe:	6909      	ldr	r1, [r1, #16]
 8007cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cc4:	eba3 0901 	sub.w	r9, r3, r1
 8007cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ccc:	1c7b      	adds	r3, r7, #1
 8007cce:	444b      	add	r3, r9
 8007cd0:	106d      	asrs	r5, r5, #1
 8007cd2:	429d      	cmp	r5, r3
 8007cd4:	bf38      	it	cc
 8007cd6:	461d      	movcc	r5, r3
 8007cd8:	0553      	lsls	r3, r2, #21
 8007cda:	d527      	bpl.n	8007d2c <__ssputs_r+0x8c>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7fc fe09 	bl	80048f4 <_malloc_r>
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	b360      	cbz	r0, 8007d40 <__ssputs_r+0xa0>
 8007ce6:	6921      	ldr	r1, [r4, #16]
 8007ce8:	464a      	mov	r2, r9
 8007cea:	f7fd fe84 	bl	80059f6 <memcpy>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	6126      	str	r6, [r4, #16]
 8007cfc:	6165      	str	r5, [r4, #20]
 8007cfe:	444e      	add	r6, r9
 8007d00:	eba5 0509 	sub.w	r5, r5, r9
 8007d04:	6026      	str	r6, [r4, #0]
 8007d06:	60a5      	str	r5, [r4, #8]
 8007d08:	463e      	mov	r6, r7
 8007d0a:	42be      	cmp	r6, r7
 8007d0c:	d900      	bls.n	8007d10 <__ssputs_r+0x70>
 8007d0e:	463e      	mov	r6, r7
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	4632      	mov	r2, r6
 8007d14:	4641      	mov	r1, r8
 8007d16:	f000 f9c9 	bl	80080ac <memmove>
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	1b9b      	subs	r3, r3, r6
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	4433      	add	r3, r6
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	2000      	movs	r0, #0
 8007d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	f000 fd90 	bl	8008852 <_realloc_r>
 8007d32:	4606      	mov	r6, r0
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d1e0      	bne.n	8007cfa <__ssputs_r+0x5a>
 8007d38:	6921      	ldr	r1, [r4, #16]
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f7fe fc64 	bl	8006608 <_free_r>
 8007d40:	230c      	movs	r3, #12
 8007d42:	f8ca 3000 	str.w	r3, [sl]
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	e7e9      	b.n	8007d28 <__ssputs_r+0x88>

08007d54 <_svfiprintf_r>:
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	4698      	mov	r8, r3
 8007d5a:	898b      	ldrh	r3, [r1, #12]
 8007d5c:	061b      	lsls	r3, r3, #24
 8007d5e:	b09d      	sub	sp, #116	; 0x74
 8007d60:	4607      	mov	r7, r0
 8007d62:	460d      	mov	r5, r1
 8007d64:	4614      	mov	r4, r2
 8007d66:	d50e      	bpl.n	8007d86 <_svfiprintf_r+0x32>
 8007d68:	690b      	ldr	r3, [r1, #16]
 8007d6a:	b963      	cbnz	r3, 8007d86 <_svfiprintf_r+0x32>
 8007d6c:	2140      	movs	r1, #64	; 0x40
 8007d6e:	f7fc fdc1 	bl	80048f4 <_malloc_r>
 8007d72:	6028      	str	r0, [r5, #0]
 8007d74:	6128      	str	r0, [r5, #16]
 8007d76:	b920      	cbnz	r0, 8007d82 <_svfiprintf_r+0x2e>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e0d0      	b.n	8007f24 <_svfiprintf_r+0x1d0>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	616b      	str	r3, [r5, #20]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8a:	2320      	movs	r3, #32
 8007d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d94:	2330      	movs	r3, #48	; 0x30
 8007d96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f3c <_svfiprintf_r+0x1e8>
 8007d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d9e:	f04f 0901 	mov.w	r9, #1
 8007da2:	4623      	mov	r3, r4
 8007da4:	469a      	mov	sl, r3
 8007da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007daa:	b10a      	cbz	r2, 8007db0 <_svfiprintf_r+0x5c>
 8007dac:	2a25      	cmp	r2, #37	; 0x25
 8007dae:	d1f9      	bne.n	8007da4 <_svfiprintf_r+0x50>
 8007db0:	ebba 0b04 	subs.w	fp, sl, r4
 8007db4:	d00b      	beq.n	8007dce <_svfiprintf_r+0x7a>
 8007db6:	465b      	mov	r3, fp
 8007db8:	4622      	mov	r2, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff ff6f 	bl	8007ca0 <__ssputs_r>
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f000 80a9 	beq.w	8007f1a <_svfiprintf_r+0x1c6>
 8007dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dca:	445a      	add	r2, fp
 8007dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dce:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80a1 	beq.w	8007f1a <_svfiprintf_r+0x1c6>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de2:	f10a 0a01 	add.w	sl, sl, #1
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dee:	931a      	str	r3, [sp, #104]	; 0x68
 8007df0:	4654      	mov	r4, sl
 8007df2:	2205      	movs	r2, #5
 8007df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df8:	4850      	ldr	r0, [pc, #320]	; (8007f3c <_svfiprintf_r+0x1e8>)
 8007dfa:	f7f8 fa71 	bl	80002e0 <memchr>
 8007dfe:	9a04      	ldr	r2, [sp, #16]
 8007e00:	b9d8      	cbnz	r0, 8007e3a <_svfiprintf_r+0xe6>
 8007e02:	06d0      	lsls	r0, r2, #27
 8007e04:	bf44      	itt	mi
 8007e06:	2320      	movmi	r3, #32
 8007e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0c:	0711      	lsls	r1, r2, #28
 8007e0e:	bf44      	itt	mi
 8007e10:	232b      	movmi	r3, #43	; 0x2b
 8007e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e16:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d015      	beq.n	8007e4a <_svfiprintf_r+0xf6>
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	4654      	mov	r4, sl
 8007e22:	2000      	movs	r0, #0
 8007e24:	f04f 0c0a 	mov.w	ip, #10
 8007e28:	4621      	mov	r1, r4
 8007e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2e:	3b30      	subs	r3, #48	; 0x30
 8007e30:	2b09      	cmp	r3, #9
 8007e32:	d94d      	bls.n	8007ed0 <_svfiprintf_r+0x17c>
 8007e34:	b1b0      	cbz	r0, 8007e64 <_svfiprintf_r+0x110>
 8007e36:	9207      	str	r2, [sp, #28]
 8007e38:	e014      	b.n	8007e64 <_svfiprintf_r+0x110>
 8007e3a:	eba0 0308 	sub.w	r3, r0, r8
 8007e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	46a2      	mov	sl, r4
 8007e48:	e7d2      	b.n	8007df0 <_svfiprintf_r+0x9c>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	1d19      	adds	r1, r3, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	9103      	str	r1, [sp, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bfbb      	ittet	lt
 8007e56:	425b      	neglt	r3, r3
 8007e58:	f042 0202 	orrlt.w	r2, r2, #2
 8007e5c:	9307      	strge	r3, [sp, #28]
 8007e5e:	9307      	strlt	r3, [sp, #28]
 8007e60:	bfb8      	it	lt
 8007e62:	9204      	strlt	r2, [sp, #16]
 8007e64:	7823      	ldrb	r3, [r4, #0]
 8007e66:	2b2e      	cmp	r3, #46	; 0x2e
 8007e68:	d10c      	bne.n	8007e84 <_svfiprintf_r+0x130>
 8007e6a:	7863      	ldrb	r3, [r4, #1]
 8007e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6e:	d134      	bne.n	8007eda <_svfiprintf_r+0x186>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9203      	str	r2, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e80:	3402      	adds	r4, #2
 8007e82:	9305      	str	r3, [sp, #20]
 8007e84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f4c <_svfiprintf_r+0x1f8>
 8007e88:	7821      	ldrb	r1, [r4, #0]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	f7f8 fa27 	bl	80002e0 <memchr>
 8007e92:	b138      	cbz	r0, 8007ea4 <_svfiprintf_r+0x150>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	eba0 000a 	sub.w	r0, r0, sl
 8007e9a:	2240      	movs	r2, #64	; 0x40
 8007e9c:	4082      	lsls	r2, r0
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	3401      	adds	r4, #1
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea8:	4825      	ldr	r0, [pc, #148]	; (8007f40 <_svfiprintf_r+0x1ec>)
 8007eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eae:	2206      	movs	r2, #6
 8007eb0:	f7f8 fa16 	bl	80002e0 <memchr>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d038      	beq.n	8007f2a <_svfiprintf_r+0x1d6>
 8007eb8:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <_svfiprintf_r+0x1f0>)
 8007eba:	bb1b      	cbnz	r3, 8007f04 <_svfiprintf_r+0x1b0>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	3307      	adds	r3, #7
 8007ec0:	f023 0307 	bic.w	r3, r3, #7
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	4433      	add	r3, r6
 8007ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ece:	e768      	b.n	8007da2 <_svfiprintf_r+0x4e>
 8007ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	e7a6      	b.n	8007e28 <_svfiprintf_r+0xd4>
 8007eda:	2300      	movs	r3, #0
 8007edc:	3401      	adds	r4, #1
 8007ede:	9305      	str	r3, [sp, #20]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	f04f 0c0a 	mov.w	ip, #10
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eec:	3a30      	subs	r2, #48	; 0x30
 8007eee:	2a09      	cmp	r2, #9
 8007ef0:	d903      	bls.n	8007efa <_svfiprintf_r+0x1a6>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0c6      	beq.n	8007e84 <_svfiprintf_r+0x130>
 8007ef6:	9105      	str	r1, [sp, #20]
 8007ef8:	e7c4      	b.n	8007e84 <_svfiprintf_r+0x130>
 8007efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007efe:	4604      	mov	r4, r0
 8007f00:	2301      	movs	r3, #1
 8007f02:	e7f0      	b.n	8007ee6 <_svfiprintf_r+0x192>
 8007f04:	ab03      	add	r3, sp, #12
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <_svfiprintf_r+0x1f4>)
 8007f0c:	a904      	add	r1, sp, #16
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f7fc fe0e 	bl	8004b30 <_printf_float>
 8007f14:	1c42      	adds	r2, r0, #1
 8007f16:	4606      	mov	r6, r0
 8007f18:	d1d6      	bne.n	8007ec8 <_svfiprintf_r+0x174>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	065b      	lsls	r3, r3, #25
 8007f1e:	f53f af2d 	bmi.w	8007d7c <_svfiprintf_r+0x28>
 8007f22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f24:	b01d      	add	sp, #116	; 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	ab03      	add	r3, sp, #12
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <_svfiprintf_r+0x1f4>)
 8007f32:	a904      	add	r1, sp, #16
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7fd f883 	bl	8005040 <_printf_i>
 8007f3a:	e7eb      	b.n	8007f14 <_svfiprintf_r+0x1c0>
 8007f3c:	080091e9 	.word	0x080091e9
 8007f40:	080091f3 	.word	0x080091f3
 8007f44:	08004b31 	.word	0x08004b31
 8007f48:	08007ca1 	.word	0x08007ca1
 8007f4c:	080091ef 	.word	0x080091ef

08007f50 <__sflush_r>:
 8007f50:	898a      	ldrh	r2, [r1, #12]
 8007f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	4605      	mov	r5, r0
 8007f58:	0710      	lsls	r0, r2, #28
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	d458      	bmi.n	8008010 <__sflush_r+0xc0>
 8007f5e:	684b      	ldr	r3, [r1, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	dc05      	bgt.n	8007f70 <__sflush_r+0x20>
 8007f64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc02      	bgt.n	8007f70 <__sflush_r+0x20>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d0f9      	beq.n	8007f6a <__sflush_r+0x1a>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f7c:	682f      	ldr	r7, [r5, #0]
 8007f7e:	6a21      	ldr	r1, [r4, #32]
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	d032      	beq.n	8007fea <__sflush_r+0x9a>
 8007f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	075a      	lsls	r2, r3, #29
 8007f8a:	d505      	bpl.n	8007f98 <__sflush_r+0x48>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	1ac0      	subs	r0, r0, r3
 8007f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f92:	b10b      	cbz	r3, 8007f98 <__sflush_r+0x48>
 8007f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f96:	1ac0      	subs	r0, r0, r3
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f9e:	6a21      	ldr	r1, [r4, #32]
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b0      	blx	r6
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	d106      	bne.n	8007fb8 <__sflush_r+0x68>
 8007faa:	6829      	ldr	r1, [r5, #0]
 8007fac:	291d      	cmp	r1, #29
 8007fae:	d82b      	bhi.n	8008008 <__sflush_r+0xb8>
 8007fb0:	4a29      	ldr	r2, [pc, #164]	; (8008058 <__sflush_r+0x108>)
 8007fb2:	410a      	asrs	r2, r1
 8007fb4:	07d6      	lsls	r6, r2, #31
 8007fb6:	d427      	bmi.n	8008008 <__sflush_r+0xb8>
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6062      	str	r2, [r4, #4]
 8007fbc:	04d9      	lsls	r1, r3, #19
 8007fbe:	6922      	ldr	r2, [r4, #16]
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	d504      	bpl.n	8007fce <__sflush_r+0x7e>
 8007fc4:	1c42      	adds	r2, r0, #1
 8007fc6:	d101      	bne.n	8007fcc <__sflush_r+0x7c>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b903      	cbnz	r3, 8007fce <__sflush_r+0x7e>
 8007fcc:	6560      	str	r0, [r4, #84]	; 0x54
 8007fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd0:	602f      	str	r7, [r5, #0]
 8007fd2:	2900      	cmp	r1, #0
 8007fd4:	d0c9      	beq.n	8007f6a <__sflush_r+0x1a>
 8007fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fda:	4299      	cmp	r1, r3
 8007fdc:	d002      	beq.n	8007fe4 <__sflush_r+0x94>
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f7fe fb12 	bl	8006608 <_free_r>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	6360      	str	r0, [r4, #52]	; 0x34
 8007fe8:	e7c0      	b.n	8007f6c <__sflush_r+0x1c>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4628      	mov	r0, r5
 8007fee:	47b0      	blx	r6
 8007ff0:	1c41      	adds	r1, r0, #1
 8007ff2:	d1c8      	bne.n	8007f86 <__sflush_r+0x36>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0c5      	beq.n	8007f86 <__sflush_r+0x36>
 8007ffa:	2b1d      	cmp	r3, #29
 8007ffc:	d001      	beq.n	8008002 <__sflush_r+0xb2>
 8007ffe:	2b16      	cmp	r3, #22
 8008000:	d101      	bne.n	8008006 <__sflush_r+0xb6>
 8008002:	602f      	str	r7, [r5, #0]
 8008004:	e7b1      	b.n	8007f6a <__sflush_r+0x1a>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	e7ad      	b.n	8007f6c <__sflush_r+0x1c>
 8008010:	690f      	ldr	r7, [r1, #16]
 8008012:	2f00      	cmp	r7, #0
 8008014:	d0a9      	beq.n	8007f6a <__sflush_r+0x1a>
 8008016:	0793      	lsls	r3, r2, #30
 8008018:	680e      	ldr	r6, [r1, #0]
 800801a:	bf08      	it	eq
 800801c:	694b      	ldreq	r3, [r1, #20]
 800801e:	600f      	str	r7, [r1, #0]
 8008020:	bf18      	it	ne
 8008022:	2300      	movne	r3, #0
 8008024:	eba6 0807 	sub.w	r8, r6, r7
 8008028:	608b      	str	r3, [r1, #8]
 800802a:	f1b8 0f00 	cmp.w	r8, #0
 800802e:	dd9c      	ble.n	8007f6a <__sflush_r+0x1a>
 8008030:	6a21      	ldr	r1, [r4, #32]
 8008032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008034:	4643      	mov	r3, r8
 8008036:	463a      	mov	r2, r7
 8008038:	4628      	mov	r0, r5
 800803a:	47b0      	blx	r6
 800803c:	2800      	cmp	r0, #0
 800803e:	dc06      	bgt.n	800804e <__sflush_r+0xfe>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	e78e      	b.n	8007f6c <__sflush_r+0x1c>
 800804e:	4407      	add	r7, r0
 8008050:	eba8 0800 	sub.w	r8, r8, r0
 8008054:	e7e9      	b.n	800802a <__sflush_r+0xda>
 8008056:	bf00      	nop
 8008058:	dfbffffe 	.word	0xdfbffffe

0800805c <_fflush_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b913      	cbnz	r3, 800806c <_fflush_r+0x10>
 8008066:	2500      	movs	r5, #0
 8008068:	4628      	mov	r0, r5
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	b118      	cbz	r0, 8008076 <_fflush_r+0x1a>
 800806e:	6a03      	ldr	r3, [r0, #32]
 8008070:	b90b      	cbnz	r3, 8008076 <_fflush_r+0x1a>
 8008072:	f7fd fb97 	bl	80057a4 <__sinit>
 8008076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f3      	beq.n	8008066 <_fflush_r+0xa>
 800807e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008080:	07d0      	lsls	r0, r2, #31
 8008082:	d404      	bmi.n	800808e <_fflush_r+0x32>
 8008084:	0599      	lsls	r1, r3, #22
 8008086:	d402      	bmi.n	800808e <_fflush_r+0x32>
 8008088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808a:	f7fd fcb2 	bl	80059f2 <__retarget_lock_acquire_recursive>
 800808e:	4628      	mov	r0, r5
 8008090:	4621      	mov	r1, r4
 8008092:	f7ff ff5d 	bl	8007f50 <__sflush_r>
 8008096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008098:	07da      	lsls	r2, r3, #31
 800809a:	4605      	mov	r5, r0
 800809c:	d4e4      	bmi.n	8008068 <_fflush_r+0xc>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	059b      	lsls	r3, r3, #22
 80080a2:	d4e1      	bmi.n	8008068 <_fflush_r+0xc>
 80080a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a6:	f7fd fca5 	bl	80059f4 <__retarget_lock_release_recursive>
 80080aa:	e7dd      	b.n	8008068 <_fflush_r+0xc>

080080ac <memmove>:
 80080ac:	4288      	cmp	r0, r1
 80080ae:	b510      	push	{r4, lr}
 80080b0:	eb01 0402 	add.w	r4, r1, r2
 80080b4:	d902      	bls.n	80080bc <memmove+0x10>
 80080b6:	4284      	cmp	r4, r0
 80080b8:	4623      	mov	r3, r4
 80080ba:	d807      	bhi.n	80080cc <memmove+0x20>
 80080bc:	1e43      	subs	r3, r0, #1
 80080be:	42a1      	cmp	r1, r4
 80080c0:	d008      	beq.n	80080d4 <memmove+0x28>
 80080c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ca:	e7f8      	b.n	80080be <memmove+0x12>
 80080cc:	4402      	add	r2, r0
 80080ce:	4601      	mov	r1, r0
 80080d0:	428a      	cmp	r2, r1
 80080d2:	d100      	bne.n	80080d6 <memmove+0x2a>
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080de:	e7f7      	b.n	80080d0 <memmove+0x24>

080080e0 <strncmp>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	b16a      	cbz	r2, 8008100 <strncmp+0x20>
 80080e4:	3901      	subs	r1, #1
 80080e6:	1884      	adds	r4, r0, r2
 80080e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d103      	bne.n	80080fc <strncmp+0x1c>
 80080f4:	42a0      	cmp	r0, r4
 80080f6:	d001      	beq.n	80080fc <strncmp+0x1c>
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	d1f5      	bne.n	80080e8 <strncmp+0x8>
 80080fc:	1ad0      	subs	r0, r2, r3
 80080fe:	bd10      	pop	{r4, pc}
 8008100:	4610      	mov	r0, r2
 8008102:	e7fc      	b.n	80080fe <strncmp+0x1e>
 8008104:	0000      	movs	r0, r0
	...

08008108 <nan>:
 8008108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008110 <nan+0x8>
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	00000000 	.word	0x00000000
 8008114:	7ff80000 	.word	0x7ff80000

08008118 <__assert_func>:
 8008118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800811a:	4614      	mov	r4, r2
 800811c:	461a      	mov	r2, r3
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <__assert_func+0x2c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4605      	mov	r5, r0
 8008124:	68d8      	ldr	r0, [r3, #12]
 8008126:	b14c      	cbz	r4, 800813c <__assert_func+0x24>
 8008128:	4b07      	ldr	r3, [pc, #28]	; (8008148 <__assert_func+0x30>)
 800812a:	9100      	str	r1, [sp, #0]
 800812c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008130:	4906      	ldr	r1, [pc, #24]	; (800814c <__assert_func+0x34>)
 8008132:	462b      	mov	r3, r5
 8008134:	f000 fbca 	bl	80088cc <fiprintf>
 8008138:	f000 fbda 	bl	80088f0 <abort>
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <__assert_func+0x38>)
 800813e:	461c      	mov	r4, r3
 8008140:	e7f3      	b.n	800812a <__assert_func+0x12>
 8008142:	bf00      	nop
 8008144:	24000068 	.word	0x24000068
 8008148:	08009202 	.word	0x08009202
 800814c:	0800920f 	.word	0x0800920f
 8008150:	0800923d 	.word	0x0800923d

08008154 <_calloc_r>:
 8008154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008156:	fba1 2402 	umull	r2, r4, r1, r2
 800815a:	b94c      	cbnz	r4, 8008170 <_calloc_r+0x1c>
 800815c:	4611      	mov	r1, r2
 800815e:	9201      	str	r2, [sp, #4]
 8008160:	f7fc fbc8 	bl	80048f4 <_malloc_r>
 8008164:	9a01      	ldr	r2, [sp, #4]
 8008166:	4605      	mov	r5, r0
 8008168:	b930      	cbnz	r0, 8008178 <_calloc_r+0x24>
 800816a:	4628      	mov	r0, r5
 800816c:	b003      	add	sp, #12
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	220c      	movs	r2, #12
 8008172:	6002      	str	r2, [r0, #0]
 8008174:	2500      	movs	r5, #0
 8008176:	e7f8      	b.n	800816a <_calloc_r+0x16>
 8008178:	4621      	mov	r1, r4
 800817a:	f7fd fbac 	bl	80058d6 <memset>
 800817e:	e7f4      	b.n	800816a <_calloc_r+0x16>

08008180 <rshift>:
 8008180:	6903      	ldr	r3, [r0, #16]
 8008182:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008186:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800818a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800818e:	f100 0414 	add.w	r4, r0, #20
 8008192:	dd45      	ble.n	8008220 <rshift+0xa0>
 8008194:	f011 011f 	ands.w	r1, r1, #31
 8008198:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800819c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081a0:	d10c      	bne.n	80081bc <rshift+0x3c>
 80081a2:	f100 0710 	add.w	r7, r0, #16
 80081a6:	4629      	mov	r1, r5
 80081a8:	42b1      	cmp	r1, r6
 80081aa:	d334      	bcc.n	8008216 <rshift+0x96>
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	1eea      	subs	r2, r5, #3
 80081b2:	4296      	cmp	r6, r2
 80081b4:	bf38      	it	cc
 80081b6:	2300      	movcc	r3, #0
 80081b8:	4423      	add	r3, r4
 80081ba:	e015      	b.n	80081e8 <rshift+0x68>
 80081bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80081c0:	f1c1 0820 	rsb	r8, r1, #32
 80081c4:	40cf      	lsrs	r7, r1
 80081c6:	f105 0e04 	add.w	lr, r5, #4
 80081ca:	46a1      	mov	r9, r4
 80081cc:	4576      	cmp	r6, lr
 80081ce:	46f4      	mov	ip, lr
 80081d0:	d815      	bhi.n	80081fe <rshift+0x7e>
 80081d2:	1a9a      	subs	r2, r3, r2
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	3a04      	subs	r2, #4
 80081d8:	3501      	adds	r5, #1
 80081da:	42ae      	cmp	r6, r5
 80081dc:	bf38      	it	cc
 80081de:	2200      	movcc	r2, #0
 80081e0:	18a3      	adds	r3, r4, r2
 80081e2:	50a7      	str	r7, [r4, r2]
 80081e4:	b107      	cbz	r7, 80081e8 <rshift+0x68>
 80081e6:	3304      	adds	r3, #4
 80081e8:	1b1a      	subs	r2, r3, r4
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081f0:	bf08      	it	eq
 80081f2:	2300      	moveq	r3, #0
 80081f4:	6102      	str	r2, [r0, #16]
 80081f6:	bf08      	it	eq
 80081f8:	6143      	streq	r3, [r0, #20]
 80081fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081fe:	f8dc c000 	ldr.w	ip, [ip]
 8008202:	fa0c fc08 	lsl.w	ip, ip, r8
 8008206:	ea4c 0707 	orr.w	r7, ip, r7
 800820a:	f849 7b04 	str.w	r7, [r9], #4
 800820e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008212:	40cf      	lsrs	r7, r1
 8008214:	e7da      	b.n	80081cc <rshift+0x4c>
 8008216:	f851 cb04 	ldr.w	ip, [r1], #4
 800821a:	f847 cf04 	str.w	ip, [r7, #4]!
 800821e:	e7c3      	b.n	80081a8 <rshift+0x28>
 8008220:	4623      	mov	r3, r4
 8008222:	e7e1      	b.n	80081e8 <rshift+0x68>

08008224 <__hexdig_fun>:
 8008224:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008228:	2b09      	cmp	r3, #9
 800822a:	d802      	bhi.n	8008232 <__hexdig_fun+0xe>
 800822c:	3820      	subs	r0, #32
 800822e:	b2c0      	uxtb	r0, r0
 8008230:	4770      	bx	lr
 8008232:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008236:	2b05      	cmp	r3, #5
 8008238:	d801      	bhi.n	800823e <__hexdig_fun+0x1a>
 800823a:	3847      	subs	r0, #71	; 0x47
 800823c:	e7f7      	b.n	800822e <__hexdig_fun+0xa>
 800823e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008242:	2b05      	cmp	r3, #5
 8008244:	d801      	bhi.n	800824a <__hexdig_fun+0x26>
 8008246:	3827      	subs	r0, #39	; 0x27
 8008248:	e7f1      	b.n	800822e <__hexdig_fun+0xa>
 800824a:	2000      	movs	r0, #0
 800824c:	4770      	bx	lr
	...

08008250 <__gethex>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	4617      	mov	r7, r2
 8008256:	680a      	ldr	r2, [r1, #0]
 8008258:	b085      	sub	sp, #20
 800825a:	f102 0b02 	add.w	fp, r2, #2
 800825e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008262:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008266:	4681      	mov	r9, r0
 8008268:	468a      	mov	sl, r1
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	32fe      	adds	r2, #254	; 0xfe
 800826e:	eb02 030b 	add.w	r3, r2, fp
 8008272:	46d8      	mov	r8, fp
 8008274:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	2830      	cmp	r0, #48	; 0x30
 800827c:	d0f7      	beq.n	800826e <__gethex+0x1e>
 800827e:	f7ff ffd1 	bl	8008224 <__hexdig_fun>
 8008282:	4604      	mov	r4, r0
 8008284:	2800      	cmp	r0, #0
 8008286:	d138      	bne.n	80082fa <__gethex+0xaa>
 8008288:	49a7      	ldr	r1, [pc, #668]	; (8008528 <__gethex+0x2d8>)
 800828a:	2201      	movs	r2, #1
 800828c:	4640      	mov	r0, r8
 800828e:	f7ff ff27 	bl	80080e0 <strncmp>
 8008292:	4606      	mov	r6, r0
 8008294:	2800      	cmp	r0, #0
 8008296:	d169      	bne.n	800836c <__gethex+0x11c>
 8008298:	f898 0001 	ldrb.w	r0, [r8, #1]
 800829c:	465d      	mov	r5, fp
 800829e:	f7ff ffc1 	bl	8008224 <__hexdig_fun>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d064      	beq.n	8008370 <__gethex+0x120>
 80082a6:	465a      	mov	r2, fp
 80082a8:	7810      	ldrb	r0, [r2, #0]
 80082aa:	2830      	cmp	r0, #48	; 0x30
 80082ac:	4690      	mov	r8, r2
 80082ae:	f102 0201 	add.w	r2, r2, #1
 80082b2:	d0f9      	beq.n	80082a8 <__gethex+0x58>
 80082b4:	f7ff ffb6 	bl	8008224 <__hexdig_fun>
 80082b8:	2301      	movs	r3, #1
 80082ba:	fab0 f480 	clz	r4, r0
 80082be:	0964      	lsrs	r4, r4, #5
 80082c0:	465e      	mov	r6, fp
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	4642      	mov	r2, r8
 80082c6:	4615      	mov	r5, r2
 80082c8:	3201      	adds	r2, #1
 80082ca:	7828      	ldrb	r0, [r5, #0]
 80082cc:	f7ff ffaa 	bl	8008224 <__hexdig_fun>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d1f8      	bne.n	80082c6 <__gethex+0x76>
 80082d4:	4994      	ldr	r1, [pc, #592]	; (8008528 <__gethex+0x2d8>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	4628      	mov	r0, r5
 80082da:	f7ff ff01 	bl	80080e0 <strncmp>
 80082de:	b978      	cbnz	r0, 8008300 <__gethex+0xb0>
 80082e0:	b946      	cbnz	r6, 80082f4 <__gethex+0xa4>
 80082e2:	1c6e      	adds	r6, r5, #1
 80082e4:	4632      	mov	r2, r6
 80082e6:	4615      	mov	r5, r2
 80082e8:	3201      	adds	r2, #1
 80082ea:	7828      	ldrb	r0, [r5, #0]
 80082ec:	f7ff ff9a 	bl	8008224 <__hexdig_fun>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d1f8      	bne.n	80082e6 <__gethex+0x96>
 80082f4:	1b73      	subs	r3, r6, r5
 80082f6:	009e      	lsls	r6, r3, #2
 80082f8:	e004      	b.n	8008304 <__gethex+0xb4>
 80082fa:	2400      	movs	r4, #0
 80082fc:	4626      	mov	r6, r4
 80082fe:	e7e1      	b.n	80082c4 <__gethex+0x74>
 8008300:	2e00      	cmp	r6, #0
 8008302:	d1f7      	bne.n	80082f4 <__gethex+0xa4>
 8008304:	782b      	ldrb	r3, [r5, #0]
 8008306:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800830a:	2b50      	cmp	r3, #80	; 0x50
 800830c:	d13d      	bne.n	800838a <__gethex+0x13a>
 800830e:	786b      	ldrb	r3, [r5, #1]
 8008310:	2b2b      	cmp	r3, #43	; 0x2b
 8008312:	d02f      	beq.n	8008374 <__gethex+0x124>
 8008314:	2b2d      	cmp	r3, #45	; 0x2d
 8008316:	d031      	beq.n	800837c <__gethex+0x12c>
 8008318:	1c69      	adds	r1, r5, #1
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	7808      	ldrb	r0, [r1, #0]
 8008320:	f7ff ff80 	bl	8008224 <__hexdig_fun>
 8008324:	1e42      	subs	r2, r0, #1
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	2a18      	cmp	r2, #24
 800832a:	d82e      	bhi.n	800838a <__gethex+0x13a>
 800832c:	f1a0 0210 	sub.w	r2, r0, #16
 8008330:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008334:	f7ff ff76 	bl	8008224 <__hexdig_fun>
 8008338:	f100 3cff 	add.w	ip, r0, #4294967295
 800833c:	fa5f fc8c 	uxtb.w	ip, ip
 8008340:	f1bc 0f18 	cmp.w	ip, #24
 8008344:	d91d      	bls.n	8008382 <__gethex+0x132>
 8008346:	f1bb 0f00 	cmp.w	fp, #0
 800834a:	d000      	beq.n	800834e <__gethex+0xfe>
 800834c:	4252      	negs	r2, r2
 800834e:	4416      	add	r6, r2
 8008350:	f8ca 1000 	str.w	r1, [sl]
 8008354:	b1dc      	cbz	r4, 800838e <__gethex+0x13e>
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf14      	ite	ne
 800835c:	f04f 0800 	movne.w	r8, #0
 8008360:	f04f 0806 	moveq.w	r8, #6
 8008364:	4640      	mov	r0, r8
 8008366:	b005      	add	sp, #20
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	4645      	mov	r5, r8
 800836e:	4626      	mov	r6, r4
 8008370:	2401      	movs	r4, #1
 8008372:	e7c7      	b.n	8008304 <__gethex+0xb4>
 8008374:	f04f 0b00 	mov.w	fp, #0
 8008378:	1ca9      	adds	r1, r5, #2
 800837a:	e7d0      	b.n	800831e <__gethex+0xce>
 800837c:	f04f 0b01 	mov.w	fp, #1
 8008380:	e7fa      	b.n	8008378 <__gethex+0x128>
 8008382:	230a      	movs	r3, #10
 8008384:	fb03 0002 	mla	r0, r3, r2, r0
 8008388:	e7d0      	b.n	800832c <__gethex+0xdc>
 800838a:	4629      	mov	r1, r5
 800838c:	e7e0      	b.n	8008350 <__gethex+0x100>
 800838e:	eba5 0308 	sub.w	r3, r5, r8
 8008392:	3b01      	subs	r3, #1
 8008394:	4621      	mov	r1, r4
 8008396:	2b07      	cmp	r3, #7
 8008398:	dc0a      	bgt.n	80083b0 <__gethex+0x160>
 800839a:	4648      	mov	r0, r9
 800839c:	f7fe f980 	bl	80066a0 <_Balloc>
 80083a0:	4604      	mov	r4, r0
 80083a2:	b940      	cbnz	r0, 80083b6 <__gethex+0x166>
 80083a4:	4b61      	ldr	r3, [pc, #388]	; (800852c <__gethex+0x2dc>)
 80083a6:	4602      	mov	r2, r0
 80083a8:	21e4      	movs	r1, #228	; 0xe4
 80083aa:	4861      	ldr	r0, [pc, #388]	; (8008530 <__gethex+0x2e0>)
 80083ac:	f7ff feb4 	bl	8008118 <__assert_func>
 80083b0:	3101      	adds	r1, #1
 80083b2:	105b      	asrs	r3, r3, #1
 80083b4:	e7ef      	b.n	8008396 <__gethex+0x146>
 80083b6:	f100 0a14 	add.w	sl, r0, #20
 80083ba:	2300      	movs	r3, #0
 80083bc:	495a      	ldr	r1, [pc, #360]	; (8008528 <__gethex+0x2d8>)
 80083be:	f8cd a004 	str.w	sl, [sp, #4]
 80083c2:	469b      	mov	fp, r3
 80083c4:	45a8      	cmp	r8, r5
 80083c6:	d342      	bcc.n	800844e <__gethex+0x1fe>
 80083c8:	9801      	ldr	r0, [sp, #4]
 80083ca:	f840 bb04 	str.w	fp, [r0], #4
 80083ce:	eba0 000a 	sub.w	r0, r0, sl
 80083d2:	1080      	asrs	r0, r0, #2
 80083d4:	6120      	str	r0, [r4, #16]
 80083d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80083da:	4658      	mov	r0, fp
 80083dc:	f7fe fa52 	bl	8006884 <__hi0bits>
 80083e0:	683d      	ldr	r5, [r7, #0]
 80083e2:	eba8 0000 	sub.w	r0, r8, r0
 80083e6:	42a8      	cmp	r0, r5
 80083e8:	dd59      	ble.n	800849e <__gethex+0x24e>
 80083ea:	eba0 0805 	sub.w	r8, r0, r5
 80083ee:	4641      	mov	r1, r8
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7fe fdde 	bl	8006fb2 <__any_on>
 80083f6:	4683      	mov	fp, r0
 80083f8:	b1b8      	cbz	r0, 800842a <__gethex+0x1da>
 80083fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80083fe:	1159      	asrs	r1, r3, #5
 8008400:	f003 021f 	and.w	r2, r3, #31
 8008404:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008408:	f04f 0b01 	mov.w	fp, #1
 800840c:	fa0b f202 	lsl.w	r2, fp, r2
 8008410:	420a      	tst	r2, r1
 8008412:	d00a      	beq.n	800842a <__gethex+0x1da>
 8008414:	455b      	cmp	r3, fp
 8008416:	dd06      	ble.n	8008426 <__gethex+0x1d6>
 8008418:	f1a8 0102 	sub.w	r1, r8, #2
 800841c:	4620      	mov	r0, r4
 800841e:	f7fe fdc8 	bl	8006fb2 <__any_on>
 8008422:	2800      	cmp	r0, #0
 8008424:	d138      	bne.n	8008498 <__gethex+0x248>
 8008426:	f04f 0b02 	mov.w	fp, #2
 800842a:	4641      	mov	r1, r8
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff fea7 	bl	8008180 <rshift>
 8008432:	4446      	add	r6, r8
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	42b3      	cmp	r3, r6
 8008438:	da41      	bge.n	80084be <__gethex+0x26e>
 800843a:	4621      	mov	r1, r4
 800843c:	4648      	mov	r0, r9
 800843e:	f7fe f96f 	bl	8006720 <_Bfree>
 8008442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008444:	2300      	movs	r3, #0
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800844c:	e78a      	b.n	8008364 <__gethex+0x114>
 800844e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008452:	2a2e      	cmp	r2, #46	; 0x2e
 8008454:	d014      	beq.n	8008480 <__gethex+0x230>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d106      	bne.n	8008468 <__gethex+0x218>
 800845a:	9b01      	ldr	r3, [sp, #4]
 800845c:	f843 bb04 	str.w	fp, [r3], #4
 8008460:	f04f 0b00 	mov.w	fp, #0
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	465b      	mov	r3, fp
 8008468:	7828      	ldrb	r0, [r5, #0]
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	f7ff feda 	bl	8008224 <__hexdig_fun>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	f000 000f 	and.w	r0, r0, #15
 8008476:	4098      	lsls	r0, r3
 8008478:	ea4b 0b00 	orr.w	fp, fp, r0
 800847c:	3304      	adds	r3, #4
 800847e:	e7a1      	b.n	80083c4 <__gethex+0x174>
 8008480:	45a8      	cmp	r8, r5
 8008482:	d8e8      	bhi.n	8008456 <__gethex+0x206>
 8008484:	2201      	movs	r2, #1
 8008486:	4628      	mov	r0, r5
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	f7ff fe29 	bl	80080e0 <strncmp>
 800848e:	4926      	ldr	r1, [pc, #152]	; (8008528 <__gethex+0x2d8>)
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	2800      	cmp	r0, #0
 8008494:	d1df      	bne.n	8008456 <__gethex+0x206>
 8008496:	e795      	b.n	80083c4 <__gethex+0x174>
 8008498:	f04f 0b03 	mov.w	fp, #3
 800849c:	e7c5      	b.n	800842a <__gethex+0x1da>
 800849e:	da0b      	bge.n	80084b8 <__gethex+0x268>
 80084a0:	eba5 0800 	sub.w	r8, r5, r0
 80084a4:	4621      	mov	r1, r4
 80084a6:	4642      	mov	r2, r8
 80084a8:	4648      	mov	r0, r9
 80084aa:	f7fe fb53 	bl	8006b54 <__lshift>
 80084ae:	eba6 0608 	sub.w	r6, r6, r8
 80084b2:	4604      	mov	r4, r0
 80084b4:	f100 0a14 	add.w	sl, r0, #20
 80084b8:	f04f 0b00 	mov.w	fp, #0
 80084bc:	e7ba      	b.n	8008434 <__gethex+0x1e4>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	dd73      	ble.n	80085ac <__gethex+0x35c>
 80084c4:	1b9e      	subs	r6, r3, r6
 80084c6:	42b5      	cmp	r5, r6
 80084c8:	dc34      	bgt.n	8008534 <__gethex+0x2e4>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d023      	beq.n	8008518 <__gethex+0x2c8>
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d025      	beq.n	8008520 <__gethex+0x2d0>
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d115      	bne.n	8008504 <__gethex+0x2b4>
 80084d8:	42b5      	cmp	r5, r6
 80084da:	d113      	bne.n	8008504 <__gethex+0x2b4>
 80084dc:	2d01      	cmp	r5, #1
 80084de:	d10b      	bne.n	80084f8 <__gethex+0x2a8>
 80084e0:	9a02      	ldr	r2, [sp, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	2301      	movs	r3, #1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	f8ca 3000 	str.w	r3, [sl]
 80084ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80084f4:	601c      	str	r4, [r3, #0]
 80084f6:	e735      	b.n	8008364 <__gethex+0x114>
 80084f8:	1e69      	subs	r1, r5, #1
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7fe fd59 	bl	8006fb2 <__any_on>
 8008500:	2800      	cmp	r0, #0
 8008502:	d1ed      	bne.n	80084e0 <__gethex+0x290>
 8008504:	4621      	mov	r1, r4
 8008506:	4648      	mov	r0, r9
 8008508:	f7fe f90a 	bl	8006720 <_Bfree>
 800850c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800850e:	2300      	movs	r3, #0
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008516:	e725      	b.n	8008364 <__gethex+0x114>
 8008518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f2      	bne.n	8008504 <__gethex+0x2b4>
 800851e:	e7df      	b.n	80084e0 <__gethex+0x290>
 8008520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1dc      	bne.n	80084e0 <__gethex+0x290>
 8008526:	e7ed      	b.n	8008504 <__gethex+0x2b4>
 8008528:	08009094 	.word	0x08009094
 800852c:	08008f2d 	.word	0x08008f2d
 8008530:	0800923e 	.word	0x0800923e
 8008534:	f106 38ff 	add.w	r8, r6, #4294967295
 8008538:	f1bb 0f00 	cmp.w	fp, #0
 800853c:	d133      	bne.n	80085a6 <__gethex+0x356>
 800853e:	f1b8 0f00 	cmp.w	r8, #0
 8008542:	d004      	beq.n	800854e <__gethex+0x2fe>
 8008544:	4641      	mov	r1, r8
 8008546:	4620      	mov	r0, r4
 8008548:	f7fe fd33 	bl	8006fb2 <__any_on>
 800854c:	4683      	mov	fp, r0
 800854e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008552:	2301      	movs	r3, #1
 8008554:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008558:	f008 081f 	and.w	r8, r8, #31
 800855c:	fa03 f308 	lsl.w	r3, r3, r8
 8008560:	4213      	tst	r3, r2
 8008562:	4631      	mov	r1, r6
 8008564:	4620      	mov	r0, r4
 8008566:	bf18      	it	ne
 8008568:	f04b 0b02 	orrne.w	fp, fp, #2
 800856c:	1bad      	subs	r5, r5, r6
 800856e:	f7ff fe07 	bl	8008180 <rshift>
 8008572:	687e      	ldr	r6, [r7, #4]
 8008574:	f04f 0802 	mov.w	r8, #2
 8008578:	f1bb 0f00 	cmp.w	fp, #0
 800857c:	d04a      	beq.n	8008614 <__gethex+0x3c4>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d016      	beq.n	80085b2 <__gethex+0x362>
 8008584:	2b03      	cmp	r3, #3
 8008586:	d018      	beq.n	80085ba <__gethex+0x36a>
 8008588:	2b01      	cmp	r3, #1
 800858a:	d109      	bne.n	80085a0 <__gethex+0x350>
 800858c:	f01b 0f02 	tst.w	fp, #2
 8008590:	d006      	beq.n	80085a0 <__gethex+0x350>
 8008592:	f8da 3000 	ldr.w	r3, [sl]
 8008596:	ea4b 0b03 	orr.w	fp, fp, r3
 800859a:	f01b 0f01 	tst.w	fp, #1
 800859e:	d10f      	bne.n	80085c0 <__gethex+0x370>
 80085a0:	f048 0810 	orr.w	r8, r8, #16
 80085a4:	e036      	b.n	8008614 <__gethex+0x3c4>
 80085a6:	f04f 0b01 	mov.w	fp, #1
 80085aa:	e7d0      	b.n	800854e <__gethex+0x2fe>
 80085ac:	f04f 0801 	mov.w	r8, #1
 80085b0:	e7e2      	b.n	8008578 <__gethex+0x328>
 80085b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b4:	f1c3 0301 	rsb	r3, r3, #1
 80085b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80085ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0ef      	beq.n	80085a0 <__gethex+0x350>
 80085c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085c4:	f104 0214 	add.w	r2, r4, #20
 80085c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80085d2:	2300      	movs	r3, #0
 80085d4:	4694      	mov	ip, r2
 80085d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80085da:	f1b1 3fff 	cmp.w	r1, #4294967295
 80085de:	d01e      	beq.n	800861e <__gethex+0x3ce>
 80085e0:	3101      	adds	r1, #1
 80085e2:	f8cc 1000 	str.w	r1, [ip]
 80085e6:	f1b8 0f02 	cmp.w	r8, #2
 80085ea:	f104 0214 	add.w	r2, r4, #20
 80085ee:	d13d      	bne.n	800866c <__gethex+0x41c>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	42ab      	cmp	r3, r5
 80085f6:	d10b      	bne.n	8008610 <__gethex+0x3c0>
 80085f8:	1169      	asrs	r1, r5, #5
 80085fa:	2301      	movs	r3, #1
 80085fc:	f005 051f 	and.w	r5, r5, #31
 8008600:	fa03 f505 	lsl.w	r5, r3, r5
 8008604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008608:	421d      	tst	r5, r3
 800860a:	bf18      	it	ne
 800860c:	f04f 0801 	movne.w	r8, #1
 8008610:	f048 0820 	orr.w	r8, r8, #32
 8008614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008616:	601c      	str	r4, [r3, #0]
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	601e      	str	r6, [r3, #0]
 800861c:	e6a2      	b.n	8008364 <__gethex+0x114>
 800861e:	4290      	cmp	r0, r2
 8008620:	f842 3c04 	str.w	r3, [r2, #-4]
 8008624:	d8d6      	bhi.n	80085d4 <__gethex+0x384>
 8008626:	68a2      	ldr	r2, [r4, #8]
 8008628:	4593      	cmp	fp, r2
 800862a:	db17      	blt.n	800865c <__gethex+0x40c>
 800862c:	6861      	ldr	r1, [r4, #4]
 800862e:	4648      	mov	r0, r9
 8008630:	3101      	adds	r1, #1
 8008632:	f7fe f835 	bl	80066a0 <_Balloc>
 8008636:	4682      	mov	sl, r0
 8008638:	b918      	cbnz	r0, 8008642 <__gethex+0x3f2>
 800863a:	4b1b      	ldr	r3, [pc, #108]	; (80086a8 <__gethex+0x458>)
 800863c:	4602      	mov	r2, r0
 800863e:	2184      	movs	r1, #132	; 0x84
 8008640:	e6b3      	b.n	80083aa <__gethex+0x15a>
 8008642:	6922      	ldr	r2, [r4, #16]
 8008644:	3202      	adds	r2, #2
 8008646:	f104 010c 	add.w	r1, r4, #12
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	300c      	adds	r0, #12
 800864e:	f7fd f9d2 	bl	80059f6 <memcpy>
 8008652:	4621      	mov	r1, r4
 8008654:	4648      	mov	r0, r9
 8008656:	f7fe f863 	bl	8006720 <_Bfree>
 800865a:	4654      	mov	r4, sl
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	1c51      	adds	r1, r2, #1
 8008660:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008664:	6121      	str	r1, [r4, #16]
 8008666:	2101      	movs	r1, #1
 8008668:	6151      	str	r1, [r2, #20]
 800866a:	e7bc      	b.n	80085e6 <__gethex+0x396>
 800866c:	6921      	ldr	r1, [r4, #16]
 800866e:	4559      	cmp	r1, fp
 8008670:	dd0b      	ble.n	800868a <__gethex+0x43a>
 8008672:	2101      	movs	r1, #1
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff fd83 	bl	8008180 <rshift>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3601      	adds	r6, #1
 800867e:	42b3      	cmp	r3, r6
 8008680:	f6ff aedb 	blt.w	800843a <__gethex+0x1ea>
 8008684:	f04f 0801 	mov.w	r8, #1
 8008688:	e7c2      	b.n	8008610 <__gethex+0x3c0>
 800868a:	f015 051f 	ands.w	r5, r5, #31
 800868e:	d0f9      	beq.n	8008684 <__gethex+0x434>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	441a      	add	r2, r3
 8008694:	f1c5 0520 	rsb	r5, r5, #32
 8008698:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800869c:	f7fe f8f2 	bl	8006884 <__hi0bits>
 80086a0:	42a8      	cmp	r0, r5
 80086a2:	dbe6      	blt.n	8008672 <__gethex+0x422>
 80086a4:	e7ee      	b.n	8008684 <__gethex+0x434>
 80086a6:	bf00      	nop
 80086a8:	08008f2d 	.word	0x08008f2d

080086ac <L_shift>:
 80086ac:	f1c2 0208 	rsb	r2, r2, #8
 80086b0:	0092      	lsls	r2, r2, #2
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	f1c2 0620 	rsb	r6, r2, #32
 80086b8:	6843      	ldr	r3, [r0, #4]
 80086ba:	6804      	ldr	r4, [r0, #0]
 80086bc:	fa03 f506 	lsl.w	r5, r3, r6
 80086c0:	432c      	orrs	r4, r5
 80086c2:	40d3      	lsrs	r3, r2
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80086ca:	4288      	cmp	r0, r1
 80086cc:	d3f4      	bcc.n	80086b8 <L_shift+0xc>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}

080086d0 <__match>:
 80086d0:	b530      	push	{r4, r5, lr}
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	b914      	cbnz	r4, 80086e2 <__match+0x12>
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	2001      	movs	r0, #1
 80086e0:	bd30      	pop	{r4, r5, pc}
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086ea:	2d19      	cmp	r5, #25
 80086ec:	bf98      	it	ls
 80086ee:	3220      	addls	r2, #32
 80086f0:	42a2      	cmp	r2, r4
 80086f2:	d0f0      	beq.n	80086d6 <__match+0x6>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7f3      	b.n	80086e0 <__match+0x10>

080086f8 <__hexnan>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	680b      	ldr	r3, [r1, #0]
 80086fe:	6801      	ldr	r1, [r0, #0]
 8008700:	115e      	asrs	r6, r3, #5
 8008702:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008706:	f013 031f 	ands.w	r3, r3, #31
 800870a:	b087      	sub	sp, #28
 800870c:	bf18      	it	ne
 800870e:	3604      	addne	r6, #4
 8008710:	2500      	movs	r5, #0
 8008712:	1f37      	subs	r7, r6, #4
 8008714:	4682      	mov	sl, r0
 8008716:	4690      	mov	r8, r2
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	f846 5c04 	str.w	r5, [r6, #-4]
 800871e:	46b9      	mov	r9, r7
 8008720:	463c      	mov	r4, r7
 8008722:	9502      	str	r5, [sp, #8]
 8008724:	46ab      	mov	fp, r5
 8008726:	784a      	ldrb	r2, [r1, #1]
 8008728:	1c4b      	adds	r3, r1, #1
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	b342      	cbz	r2, 8008780 <__hexnan+0x88>
 800872e:	4610      	mov	r0, r2
 8008730:	9105      	str	r1, [sp, #20]
 8008732:	9204      	str	r2, [sp, #16]
 8008734:	f7ff fd76 	bl	8008224 <__hexdig_fun>
 8008738:	2800      	cmp	r0, #0
 800873a:	d14f      	bne.n	80087dc <__hexnan+0xe4>
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	9905      	ldr	r1, [sp, #20]
 8008740:	2a20      	cmp	r2, #32
 8008742:	d818      	bhi.n	8008776 <__hexnan+0x7e>
 8008744:	9b02      	ldr	r3, [sp, #8]
 8008746:	459b      	cmp	fp, r3
 8008748:	dd13      	ble.n	8008772 <__hexnan+0x7a>
 800874a:	454c      	cmp	r4, r9
 800874c:	d206      	bcs.n	800875c <__hexnan+0x64>
 800874e:	2d07      	cmp	r5, #7
 8008750:	dc04      	bgt.n	800875c <__hexnan+0x64>
 8008752:	462a      	mov	r2, r5
 8008754:	4649      	mov	r1, r9
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ffa8 	bl	80086ac <L_shift>
 800875c:	4544      	cmp	r4, r8
 800875e:	d950      	bls.n	8008802 <__hexnan+0x10a>
 8008760:	2300      	movs	r3, #0
 8008762:	f1a4 0904 	sub.w	r9, r4, #4
 8008766:	f844 3c04 	str.w	r3, [r4, #-4]
 800876a:	f8cd b008 	str.w	fp, [sp, #8]
 800876e:	464c      	mov	r4, r9
 8008770:	461d      	mov	r5, r3
 8008772:	9903      	ldr	r1, [sp, #12]
 8008774:	e7d7      	b.n	8008726 <__hexnan+0x2e>
 8008776:	2a29      	cmp	r2, #41	; 0x29
 8008778:	d155      	bne.n	8008826 <__hexnan+0x12e>
 800877a:	3102      	adds	r1, #2
 800877c:	f8ca 1000 	str.w	r1, [sl]
 8008780:	f1bb 0f00 	cmp.w	fp, #0
 8008784:	d04f      	beq.n	8008826 <__hexnan+0x12e>
 8008786:	454c      	cmp	r4, r9
 8008788:	d206      	bcs.n	8008798 <__hexnan+0xa0>
 800878a:	2d07      	cmp	r5, #7
 800878c:	dc04      	bgt.n	8008798 <__hexnan+0xa0>
 800878e:	462a      	mov	r2, r5
 8008790:	4649      	mov	r1, r9
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff ff8a 	bl	80086ac <L_shift>
 8008798:	4544      	cmp	r4, r8
 800879a:	d934      	bls.n	8008806 <__hexnan+0x10e>
 800879c:	f1a8 0204 	sub.w	r2, r8, #4
 80087a0:	4623      	mov	r3, r4
 80087a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80087a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80087aa:	429f      	cmp	r7, r3
 80087ac:	d2f9      	bcs.n	80087a2 <__hexnan+0xaa>
 80087ae:	1b3b      	subs	r3, r7, r4
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	3e03      	subs	r6, #3
 80087b8:	3401      	adds	r4, #1
 80087ba:	42a6      	cmp	r6, r4
 80087bc:	bf38      	it	cc
 80087be:	2304      	movcc	r3, #4
 80087c0:	4443      	add	r3, r8
 80087c2:	2200      	movs	r2, #0
 80087c4:	f843 2b04 	str.w	r2, [r3], #4
 80087c8:	429f      	cmp	r7, r3
 80087ca:	d2fb      	bcs.n	80087c4 <__hexnan+0xcc>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	b91b      	cbnz	r3, 80087d8 <__hexnan+0xe0>
 80087d0:	4547      	cmp	r7, r8
 80087d2:	d126      	bne.n	8008822 <__hexnan+0x12a>
 80087d4:	2301      	movs	r3, #1
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	2005      	movs	r0, #5
 80087da:	e025      	b.n	8008828 <__hexnan+0x130>
 80087dc:	3501      	adds	r5, #1
 80087de:	2d08      	cmp	r5, #8
 80087e0:	f10b 0b01 	add.w	fp, fp, #1
 80087e4:	dd06      	ble.n	80087f4 <__hexnan+0xfc>
 80087e6:	4544      	cmp	r4, r8
 80087e8:	d9c3      	bls.n	8008772 <__hexnan+0x7a>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80087f0:	2501      	movs	r5, #1
 80087f2:	3c04      	subs	r4, #4
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	f000 000f 	and.w	r0, r0, #15
 80087fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	e7b7      	b.n	8008772 <__hexnan+0x7a>
 8008802:	2508      	movs	r5, #8
 8008804:	e7b5      	b.n	8008772 <__hexnan+0x7a>
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0df      	beq.n	80087cc <__hexnan+0xd4>
 800880c:	f1c3 0320 	rsb	r3, r3, #32
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	40da      	lsrs	r2, r3
 8008816:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800881a:	4013      	ands	r3, r2
 800881c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008820:	e7d4      	b.n	80087cc <__hexnan+0xd4>
 8008822:	3f04      	subs	r7, #4
 8008824:	e7d2      	b.n	80087cc <__hexnan+0xd4>
 8008826:	2004      	movs	r0, #4
 8008828:	b007      	add	sp, #28
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800882e <__ascii_mbtowc>:
 800882e:	b082      	sub	sp, #8
 8008830:	b901      	cbnz	r1, 8008834 <__ascii_mbtowc+0x6>
 8008832:	a901      	add	r1, sp, #4
 8008834:	b142      	cbz	r2, 8008848 <__ascii_mbtowc+0x1a>
 8008836:	b14b      	cbz	r3, 800884c <__ascii_mbtowc+0x1e>
 8008838:	7813      	ldrb	r3, [r2, #0]
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	7812      	ldrb	r2, [r2, #0]
 800883e:	1e10      	subs	r0, r2, #0
 8008840:	bf18      	it	ne
 8008842:	2001      	movne	r0, #1
 8008844:	b002      	add	sp, #8
 8008846:	4770      	bx	lr
 8008848:	4610      	mov	r0, r2
 800884a:	e7fb      	b.n	8008844 <__ascii_mbtowc+0x16>
 800884c:	f06f 0001 	mvn.w	r0, #1
 8008850:	e7f8      	b.n	8008844 <__ascii_mbtowc+0x16>

08008852 <_realloc_r>:
 8008852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008856:	4680      	mov	r8, r0
 8008858:	4614      	mov	r4, r2
 800885a:	460e      	mov	r6, r1
 800885c:	b921      	cbnz	r1, 8008868 <_realloc_r+0x16>
 800885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	4611      	mov	r1, r2
 8008864:	f7fc b846 	b.w	80048f4 <_malloc_r>
 8008868:	b92a      	cbnz	r2, 8008876 <_realloc_r+0x24>
 800886a:	f7fd fecd 	bl	8006608 <_free_r>
 800886e:	4625      	mov	r5, r4
 8008870:	4628      	mov	r0, r5
 8008872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008876:	f000 f842 	bl	80088fe <_malloc_usable_size_r>
 800887a:	4284      	cmp	r4, r0
 800887c:	4607      	mov	r7, r0
 800887e:	d802      	bhi.n	8008886 <_realloc_r+0x34>
 8008880:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008884:	d812      	bhi.n	80088ac <_realloc_r+0x5a>
 8008886:	4621      	mov	r1, r4
 8008888:	4640      	mov	r0, r8
 800888a:	f7fc f833 	bl	80048f4 <_malloc_r>
 800888e:	4605      	mov	r5, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	d0ed      	beq.n	8008870 <_realloc_r+0x1e>
 8008894:	42bc      	cmp	r4, r7
 8008896:	4622      	mov	r2, r4
 8008898:	4631      	mov	r1, r6
 800889a:	bf28      	it	cs
 800889c:	463a      	movcs	r2, r7
 800889e:	f7fd f8aa 	bl	80059f6 <memcpy>
 80088a2:	4631      	mov	r1, r6
 80088a4:	4640      	mov	r0, r8
 80088a6:	f7fd feaf 	bl	8006608 <_free_r>
 80088aa:	e7e1      	b.n	8008870 <_realloc_r+0x1e>
 80088ac:	4635      	mov	r5, r6
 80088ae:	e7df      	b.n	8008870 <_realloc_r+0x1e>

080088b0 <__ascii_wctomb>:
 80088b0:	b149      	cbz	r1, 80088c6 <__ascii_wctomb+0x16>
 80088b2:	2aff      	cmp	r2, #255	; 0xff
 80088b4:	bf85      	ittet	hi
 80088b6:	238a      	movhi	r3, #138	; 0x8a
 80088b8:	6003      	strhi	r3, [r0, #0]
 80088ba:	700a      	strbls	r2, [r1, #0]
 80088bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80088c0:	bf98      	it	ls
 80088c2:	2001      	movls	r0, #1
 80088c4:	4770      	bx	lr
 80088c6:	4608      	mov	r0, r1
 80088c8:	4770      	bx	lr
	...

080088cc <fiprintf>:
 80088cc:	b40e      	push	{r1, r2, r3}
 80088ce:	b503      	push	{r0, r1, lr}
 80088d0:	4601      	mov	r1, r0
 80088d2:	ab03      	add	r3, sp, #12
 80088d4:	4805      	ldr	r0, [pc, #20]	; (80088ec <fiprintf+0x20>)
 80088d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	f000 f83f 	bl	8008960 <_vfiprintf_r>
 80088e2:	b002      	add	sp, #8
 80088e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e8:	b003      	add	sp, #12
 80088ea:	4770      	bx	lr
 80088ec:	24000068 	.word	0x24000068

080088f0 <abort>:
 80088f0:	b508      	push	{r3, lr}
 80088f2:	2006      	movs	r0, #6
 80088f4:	f000 fa0c 	bl	8008d10 <raise>
 80088f8:	2001      	movs	r0, #1
 80088fa:	f7f8 f971 	bl	8000be0 <_exit>

080088fe <_malloc_usable_size_r>:
 80088fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008902:	1f18      	subs	r0, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfbc      	itt	lt
 8008908:	580b      	ldrlt	r3, [r1, r0]
 800890a:	18c0      	addlt	r0, r0, r3
 800890c:	4770      	bx	lr

0800890e <__sfputc_r>:
 800890e:	6893      	ldr	r3, [r2, #8]
 8008910:	3b01      	subs	r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	b410      	push	{r4}
 8008916:	6093      	str	r3, [r2, #8]
 8008918:	da08      	bge.n	800892c <__sfputc_r+0x1e>
 800891a:	6994      	ldr	r4, [r2, #24]
 800891c:	42a3      	cmp	r3, r4
 800891e:	db01      	blt.n	8008924 <__sfputc_r+0x16>
 8008920:	290a      	cmp	r1, #10
 8008922:	d103      	bne.n	800892c <__sfputc_r+0x1e>
 8008924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008928:	f000 b934 	b.w	8008b94 <__swbuf_r>
 800892c:	6813      	ldr	r3, [r2, #0]
 800892e:	1c58      	adds	r0, r3, #1
 8008930:	6010      	str	r0, [r2, #0]
 8008932:	7019      	strb	r1, [r3, #0]
 8008934:	4608      	mov	r0, r1
 8008936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800893a:	4770      	bx	lr

0800893c <__sfputs_r>:
 800893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	4614      	mov	r4, r2
 8008944:	18d5      	adds	r5, r2, r3
 8008946:	42ac      	cmp	r4, r5
 8008948:	d101      	bne.n	800894e <__sfputs_r+0x12>
 800894a:	2000      	movs	r0, #0
 800894c:	e007      	b.n	800895e <__sfputs_r+0x22>
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	463a      	mov	r2, r7
 8008954:	4630      	mov	r0, r6
 8008956:	f7ff ffda 	bl	800890e <__sfputc_r>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d1f3      	bne.n	8008946 <__sfputs_r+0xa>
 800895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008960 <_vfiprintf_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	460d      	mov	r5, r1
 8008966:	b09d      	sub	sp, #116	; 0x74
 8008968:	4614      	mov	r4, r2
 800896a:	4698      	mov	r8, r3
 800896c:	4606      	mov	r6, r0
 800896e:	b118      	cbz	r0, 8008978 <_vfiprintf_r+0x18>
 8008970:	6a03      	ldr	r3, [r0, #32]
 8008972:	b90b      	cbnz	r3, 8008978 <_vfiprintf_r+0x18>
 8008974:	f7fc ff16 	bl	80057a4 <__sinit>
 8008978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800897a:	07d9      	lsls	r1, r3, #31
 800897c:	d405      	bmi.n	800898a <_vfiprintf_r+0x2a>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	059a      	lsls	r2, r3, #22
 8008982:	d402      	bmi.n	800898a <_vfiprintf_r+0x2a>
 8008984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008986:	f7fd f834 	bl	80059f2 <__retarget_lock_acquire_recursive>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	071b      	lsls	r3, r3, #28
 800898e:	d501      	bpl.n	8008994 <_vfiprintf_r+0x34>
 8008990:	692b      	ldr	r3, [r5, #16]
 8008992:	b99b      	cbnz	r3, 80089bc <_vfiprintf_r+0x5c>
 8008994:	4629      	mov	r1, r5
 8008996:	4630      	mov	r0, r6
 8008998:	f000 f93a 	bl	8008c10 <__swsetup_r>
 800899c:	b170      	cbz	r0, 80089bc <_vfiprintf_r+0x5c>
 800899e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a0:	07dc      	lsls	r4, r3, #31
 80089a2:	d504      	bpl.n	80089ae <_vfiprintf_r+0x4e>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	b01d      	add	sp, #116	; 0x74
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	0598      	lsls	r0, r3, #22
 80089b2:	d4f7      	bmi.n	80089a4 <_vfiprintf_r+0x44>
 80089b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089b6:	f7fd f81d 	bl	80059f4 <__retarget_lock_release_recursive>
 80089ba:	e7f3      	b.n	80089a4 <_vfiprintf_r+0x44>
 80089bc:	2300      	movs	r3, #0
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	2320      	movs	r3, #32
 80089c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ca:	2330      	movs	r3, #48	; 0x30
 80089cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008b80 <_vfiprintf_r+0x220>
 80089d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089d4:	f04f 0901 	mov.w	r9, #1
 80089d8:	4623      	mov	r3, r4
 80089da:	469a      	mov	sl, r3
 80089dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e0:	b10a      	cbz	r2, 80089e6 <_vfiprintf_r+0x86>
 80089e2:	2a25      	cmp	r2, #37	; 0x25
 80089e4:	d1f9      	bne.n	80089da <_vfiprintf_r+0x7a>
 80089e6:	ebba 0b04 	subs.w	fp, sl, r4
 80089ea:	d00b      	beq.n	8008a04 <_vfiprintf_r+0xa4>
 80089ec:	465b      	mov	r3, fp
 80089ee:	4622      	mov	r2, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ffa2 	bl	800893c <__sfputs_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	f000 80a9 	beq.w	8008b50 <_vfiprintf_r+0x1f0>
 80089fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a00:	445a      	add	r2, fp
 8008a02:	9209      	str	r2, [sp, #36]	; 0x24
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80a1 	beq.w	8008b50 <_vfiprintf_r+0x1f0>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f04f 32ff 	mov.w	r2, #4294967295
 8008a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a18:	f10a 0a01 	add.w	sl, sl, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a24:	931a      	str	r3, [sp, #104]	; 0x68
 8008a26:	4654      	mov	r4, sl
 8008a28:	2205      	movs	r2, #5
 8008a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2e:	4854      	ldr	r0, [pc, #336]	; (8008b80 <_vfiprintf_r+0x220>)
 8008a30:	f7f7 fc56 	bl	80002e0 <memchr>
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	b9d8      	cbnz	r0, 8008a70 <_vfiprintf_r+0x110>
 8008a38:	06d1      	lsls	r1, r2, #27
 8008a3a:	bf44      	itt	mi
 8008a3c:	2320      	movmi	r3, #32
 8008a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a42:	0713      	lsls	r3, r2, #28
 8008a44:	bf44      	itt	mi
 8008a46:	232b      	movmi	r3, #43	; 0x2b
 8008a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a50:	2b2a      	cmp	r3, #42	; 0x2a
 8008a52:	d015      	beq.n	8008a80 <_vfiprintf_r+0x120>
 8008a54:	9a07      	ldr	r2, [sp, #28]
 8008a56:	4654      	mov	r4, sl
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f04f 0c0a 	mov.w	ip, #10
 8008a5e:	4621      	mov	r1, r4
 8008a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a64:	3b30      	subs	r3, #48	; 0x30
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d94d      	bls.n	8008b06 <_vfiprintf_r+0x1a6>
 8008a6a:	b1b0      	cbz	r0, 8008a9a <_vfiprintf_r+0x13a>
 8008a6c:	9207      	str	r2, [sp, #28]
 8008a6e:	e014      	b.n	8008a9a <_vfiprintf_r+0x13a>
 8008a70:	eba0 0308 	sub.w	r3, r0, r8
 8008a74:	fa09 f303 	lsl.w	r3, r9, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	46a2      	mov	sl, r4
 8008a7e:	e7d2      	b.n	8008a26 <_vfiprintf_r+0xc6>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	1d19      	adds	r1, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	9103      	str	r1, [sp, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bfbb      	ittet	lt
 8008a8c:	425b      	neglt	r3, r3
 8008a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a92:	9307      	strge	r3, [sp, #28]
 8008a94:	9307      	strlt	r3, [sp, #28]
 8008a96:	bfb8      	it	lt
 8008a98:	9204      	strlt	r2, [sp, #16]
 8008a9a:	7823      	ldrb	r3, [r4, #0]
 8008a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9e:	d10c      	bne.n	8008aba <_vfiprintf_r+0x15a>
 8008aa0:	7863      	ldrb	r3, [r4, #1]
 8008aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa4:	d134      	bne.n	8008b10 <_vfiprintf_r+0x1b0>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9203      	str	r2, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab6:	3402      	adds	r4, #2
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008b90 <_vfiprintf_r+0x230>
 8008abe:	7821      	ldrb	r1, [r4, #0]
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	f7f7 fc0c 	bl	80002e0 <memchr>
 8008ac8:	b138      	cbz	r0, 8008ada <_vfiprintf_r+0x17a>
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	eba0 000a 	sub.w	r0, r0, sl
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	4082      	lsls	r2, r0
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	4829      	ldr	r0, [pc, #164]	; (8008b84 <_vfiprintf_r+0x224>)
 8008ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae4:	2206      	movs	r2, #6
 8008ae6:	f7f7 fbfb 	bl	80002e0 <memchr>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d03f      	beq.n	8008b6e <_vfiprintf_r+0x20e>
 8008aee:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <_vfiprintf_r+0x228>)
 8008af0:	bb1b      	cbnz	r3, 8008b3a <_vfiprintf_r+0x1da>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	3307      	adds	r3, #7
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	3308      	adds	r3, #8
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b00:	443b      	add	r3, r7
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	e768      	b.n	80089d8 <_vfiprintf_r+0x78>
 8008b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	e7a6      	b.n	8008a5e <_vfiprintf_r+0xfe>
 8008b10:	2300      	movs	r3, #0
 8008b12:	3401      	adds	r4, #1
 8008b14:	9305      	str	r3, [sp, #20]
 8008b16:	4619      	mov	r1, r3
 8008b18:	f04f 0c0a 	mov.w	ip, #10
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b22:	3a30      	subs	r2, #48	; 0x30
 8008b24:	2a09      	cmp	r2, #9
 8008b26:	d903      	bls.n	8008b30 <_vfiprintf_r+0x1d0>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0c6      	beq.n	8008aba <_vfiprintf_r+0x15a>
 8008b2c:	9105      	str	r1, [sp, #20]
 8008b2e:	e7c4      	b.n	8008aba <_vfiprintf_r+0x15a>
 8008b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b34:	4604      	mov	r4, r0
 8008b36:	2301      	movs	r3, #1
 8008b38:	e7f0      	b.n	8008b1c <_vfiprintf_r+0x1bc>
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <_vfiprintf_r+0x22c>)
 8008b42:	a904      	add	r1, sp, #16
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7fb fff3 	bl	8004b30 <_printf_float>
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	1c78      	adds	r0, r7, #1
 8008b4e:	d1d6      	bne.n	8008afe <_vfiprintf_r+0x19e>
 8008b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b52:	07d9      	lsls	r1, r3, #31
 8008b54:	d405      	bmi.n	8008b62 <_vfiprintf_r+0x202>
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	059a      	lsls	r2, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_vfiprintf_r+0x202>
 8008b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5e:	f7fc ff49 	bl	80059f4 <__retarget_lock_release_recursive>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	065b      	lsls	r3, r3, #25
 8008b66:	f53f af1d 	bmi.w	80089a4 <_vfiprintf_r+0x44>
 8008b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6c:	e71c      	b.n	80089a8 <_vfiprintf_r+0x48>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <_vfiprintf_r+0x22c>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7fc fa61 	bl	8005040 <_printf_i>
 8008b7e:	e7e4      	b.n	8008b4a <_vfiprintf_r+0x1ea>
 8008b80:	080091e9 	.word	0x080091e9
 8008b84:	080091f3 	.word	0x080091f3
 8008b88:	08004b31 	.word	0x08004b31
 8008b8c:	0800893d 	.word	0x0800893d
 8008b90:	080091ef 	.word	0x080091ef

08008b94 <__swbuf_r>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	460e      	mov	r6, r1
 8008b98:	4614      	mov	r4, r2
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	b118      	cbz	r0, 8008ba6 <__swbuf_r+0x12>
 8008b9e:	6a03      	ldr	r3, [r0, #32]
 8008ba0:	b90b      	cbnz	r3, 8008ba6 <__swbuf_r+0x12>
 8008ba2:	f7fc fdff 	bl	80057a4 <__sinit>
 8008ba6:	69a3      	ldr	r3, [r4, #24]
 8008ba8:	60a3      	str	r3, [r4, #8]
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	071a      	lsls	r2, r3, #28
 8008bae:	d525      	bpl.n	8008bfc <__swbuf_r+0x68>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	b31b      	cbz	r3, 8008bfc <__swbuf_r+0x68>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	6922      	ldr	r2, [r4, #16]
 8008bb8:	1a98      	subs	r0, r3, r2
 8008bba:	6963      	ldr	r3, [r4, #20]
 8008bbc:	b2f6      	uxtb	r6, r6
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	4637      	mov	r7, r6
 8008bc2:	dc04      	bgt.n	8008bce <__swbuf_r+0x3a>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f7ff fa48 	bl	800805c <_fflush_r>
 8008bcc:	b9e0      	cbnz	r0, 8008c08 <__swbuf_r+0x74>
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	60a3      	str	r3, [r4, #8]
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	6022      	str	r2, [r4, #0]
 8008bda:	701e      	strb	r6, [r3, #0]
 8008bdc:	6962      	ldr	r2, [r4, #20]
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d004      	beq.n	8008bee <__swbuf_r+0x5a>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	07db      	lsls	r3, r3, #31
 8008be8:	d506      	bpl.n	8008bf8 <__swbuf_r+0x64>
 8008bea:	2e0a      	cmp	r6, #10
 8008bec:	d104      	bne.n	8008bf8 <__swbuf_r+0x64>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff fa33 	bl	800805c <_fflush_r>
 8008bf6:	b938      	cbnz	r0, 8008c08 <__swbuf_r+0x74>
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 f806 	bl	8008c10 <__swsetup_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d0d5      	beq.n	8008bb4 <__swbuf_r+0x20>
 8008c08:	f04f 37ff 	mov.w	r7, #4294967295
 8008c0c:	e7f4      	b.n	8008bf8 <__swbuf_r+0x64>
	...

08008c10 <__swsetup_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <__swsetup_r+0xac>)
 8008c14:	4605      	mov	r5, r0
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	460c      	mov	r4, r1
 8008c1a:	b118      	cbz	r0, 8008c24 <__swsetup_r+0x14>
 8008c1c:	6a03      	ldr	r3, [r0, #32]
 8008c1e:	b90b      	cbnz	r3, 8008c24 <__swsetup_r+0x14>
 8008c20:	f7fc fdc0 	bl	80057a4 <__sinit>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c2a:	0718      	lsls	r0, r3, #28
 8008c2c:	d422      	bmi.n	8008c74 <__swsetup_r+0x64>
 8008c2e:	06d9      	lsls	r1, r3, #27
 8008c30:	d407      	bmi.n	8008c42 <__swsetup_r+0x32>
 8008c32:	2309      	movs	r3, #9
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e034      	b.n	8008cac <__swsetup_r+0x9c>
 8008c42:	0758      	lsls	r0, r3, #29
 8008c44:	d512      	bpl.n	8008c6c <__swsetup_r+0x5c>
 8008c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c48:	b141      	cbz	r1, 8008c5c <__swsetup_r+0x4c>
 8008c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	d002      	beq.n	8008c58 <__swsetup_r+0x48>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f7fd fcd8 	bl	8006608 <_free_r>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	2300      	movs	r3, #0
 8008c66:	6063      	str	r3, [r4, #4]
 8008c68:	6923      	ldr	r3, [r4, #16]
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f043 0308 	orr.w	r3, r3, #8
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	b94b      	cbnz	r3, 8008c8c <__swsetup_r+0x7c>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c82:	d003      	beq.n	8008c8c <__swsetup_r+0x7c>
 8008c84:	4621      	mov	r1, r4
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 f884 	bl	8008d94 <__smakebuf_r>
 8008c8c:	89a0      	ldrh	r0, [r4, #12]
 8008c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c92:	f010 0301 	ands.w	r3, r0, #1
 8008c96:	d00a      	beq.n	8008cae <__swsetup_r+0x9e>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60a3      	str	r3, [r4, #8]
 8008c9c:	6963      	ldr	r3, [r4, #20]
 8008c9e:	425b      	negs	r3, r3
 8008ca0:	61a3      	str	r3, [r4, #24]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	b943      	cbnz	r3, 8008cb8 <__swsetup_r+0xa8>
 8008ca6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008caa:	d1c4      	bne.n	8008c36 <__swsetup_r+0x26>
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	0781      	lsls	r1, r0, #30
 8008cb0:	bf58      	it	pl
 8008cb2:	6963      	ldrpl	r3, [r4, #20]
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	e7f4      	b.n	8008ca2 <__swsetup_r+0x92>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7f7      	b.n	8008cac <__swsetup_r+0x9c>
 8008cbc:	24000068 	.word	0x24000068

08008cc0 <_raise_r>:
 8008cc0:	291f      	cmp	r1, #31
 8008cc2:	b538      	push	{r3, r4, r5, lr}
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	d904      	bls.n	8008cd4 <_raise_r+0x14>
 8008cca:	2316      	movs	r3, #22
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008cd6:	b112      	cbz	r2, 8008cde <_raise_r+0x1e>
 8008cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cdc:	b94b      	cbnz	r3, 8008cf2 <_raise_r+0x32>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 f830 	bl	8008d44 <_getpid_r>
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	4620      	mov	r0, r4
 8008cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cee:	f000 b817 	b.w	8008d20 <_kill_r>
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d00a      	beq.n	8008d0c <_raise_r+0x4c>
 8008cf6:	1c59      	adds	r1, r3, #1
 8008cf8:	d103      	bne.n	8008d02 <_raise_r+0x42>
 8008cfa:	2316      	movs	r3, #22
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	2001      	movs	r0, #1
 8008d00:	e7e7      	b.n	8008cd2 <_raise_r+0x12>
 8008d02:	2400      	movs	r4, #0
 8008d04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	4798      	blx	r3
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7e0      	b.n	8008cd2 <_raise_r+0x12>

08008d10 <raise>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <raise+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f7ff bfd3 	b.w	8008cc0 <_raise_r>
 8008d1a:	bf00      	nop
 8008d1c:	24000068 	.word	0x24000068

08008d20 <_kill_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_kill_r+0x20>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	f7f7 ff47 	bl	8000bc0 <_kill>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d102      	bne.n	8008d3c <_kill_r+0x1c>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b103      	cbz	r3, 8008d3c <_kill_r+0x1c>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	240003e0 	.word	0x240003e0

08008d44 <_getpid_r>:
 8008d44:	f7f7 bf34 	b.w	8000bb0 <_getpid>

08008d48 <__swhatbuf_r>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	b096      	sub	sp, #88	; 0x58
 8008d54:	4615      	mov	r5, r2
 8008d56:	461e      	mov	r6, r3
 8008d58:	da0d      	bge.n	8008d76 <__swhatbuf_r+0x2e>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	bf0c      	ite	eq
 8008d66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d6a:	2340      	movne	r3, #64	; 0x40
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	6031      	str	r1, [r6, #0]
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	b016      	add	sp, #88	; 0x58
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	466a      	mov	r2, sp
 8008d78:	f000 f848 	bl	8008e0c <_fstat_r>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	dbec      	blt.n	8008d5a <__swhatbuf_r+0x12>
 8008d80:	9901      	ldr	r1, [sp, #4]
 8008d82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d8a:	4259      	negs	r1, r3
 8008d8c:	4159      	adcs	r1, r3
 8008d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d92:	e7eb      	b.n	8008d6c <__swhatbuf_r+0x24>

08008d94 <__smakebuf_r>:
 8008d94:	898b      	ldrh	r3, [r1, #12]
 8008d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d98:	079d      	lsls	r5, r3, #30
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	d507      	bpl.n	8008db0 <__smakebuf_r+0x1c>
 8008da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	2301      	movs	r3, #1
 8008daa:	6163      	str	r3, [r4, #20]
 8008dac:	b002      	add	sp, #8
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	ab01      	add	r3, sp, #4
 8008db2:	466a      	mov	r2, sp
 8008db4:	f7ff ffc8 	bl	8008d48 <__swhatbuf_r>
 8008db8:	9900      	ldr	r1, [sp, #0]
 8008dba:	4605      	mov	r5, r0
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f7fb fd99 	bl	80048f4 <_malloc_r>
 8008dc2:	b948      	cbnz	r0, 8008dd8 <__smakebuf_r+0x44>
 8008dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc8:	059a      	lsls	r2, r3, #22
 8008dca:	d4ef      	bmi.n	8008dac <__smakebuf_r+0x18>
 8008dcc:	f023 0303 	bic.w	r3, r3, #3
 8008dd0:	f043 0302 	orr.w	r3, r3, #2
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	e7e3      	b.n	8008da0 <__smakebuf_r+0xc>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	6163      	str	r3, [r4, #20]
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	6120      	str	r0, [r4, #16]
 8008dea:	b15b      	cbz	r3, 8008e04 <__smakebuf_r+0x70>
 8008dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 f81d 	bl	8008e30 <_isatty_r>
 8008df6:	b128      	cbz	r0, 8008e04 <__smakebuf_r+0x70>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f023 0303 	bic.w	r3, r3, #3
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	431d      	orrs	r5, r3
 8008e08:	81a5      	strh	r5, [r4, #12]
 8008e0a:	e7cf      	b.n	8008dac <__smakebuf_r+0x18>

08008e0c <_fstat_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d07      	ldr	r5, [pc, #28]	; (8008e2c <_fstat_r+0x20>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	f7f7 ff30 	bl	8000c7e <_fstat>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d102      	bne.n	8008e28 <_fstat_r+0x1c>
 8008e22:	682b      	ldr	r3, [r5, #0]
 8008e24:	b103      	cbz	r3, 8008e28 <_fstat_r+0x1c>
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	bf00      	nop
 8008e2c:	240003e0 	.word	0x240003e0

08008e30 <_isatty_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	; (8008e4c <_isatty_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f7 ff2f 	bl	8000c9e <_isatty>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_isatty_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_isatty_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	240003e0 	.word	0x240003e0

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
