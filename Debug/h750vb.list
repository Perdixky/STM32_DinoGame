
h750vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08009ce8  08009ce8  00019ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a124  0800a124  0001a124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  0800a128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  240001d8  0800a300  000201d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240003e8  0800a300  000203e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 10 .debug_info   000139ea  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000295e  00000000  00000000  00033c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c8  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cf3  00000000  00000000  00037660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003838a  00000000  00000000  00038353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ca7  00000000  00000000  000706dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ff30  00000000  00000000  00089384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005900  00000000  00000000  001e92b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  001eebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009cd0 	.word	0x08009cd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009cd0 	.word	0x08009cd0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <BMP085_GetInitData>:
#include "i2c.h"
#include "math.h"


BMP085_InitDataTypdef BMP085_GetInitData(I2C_HandleTypeDef* hi2c)
{
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b092      	sub	sp, #72	; 0x48
 800077c:	af04      	add	r7, sp, #16
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	unsigned char Init_Read_Buffer[22];
	HAL_I2C_Mem_Read(hi2c, BMP085_ADDR, BMP_AC1_ADDR, 1, Init_Read_Buffer, 22, 100);
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2316      	movs	r3, #22
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	22aa      	movs	r2, #170	; 0xaa
 8000794:	21ee      	movs	r1, #238	; 0xee
 8000796:	6838      	ldr	r0, [r7, #0]
 8000798:	f001 fb94 	bl	8001ec4 <HAL_I2C_Mem_Read>
	BMP085_InitDataTypdef BMP085_InitDataStructure;
	BMP085_InitDataStructure.AC1 = Init_Read_Buffer[0] << 8 | Init_Read_Buffer[1];
 800079c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	813b      	strh	r3, [r7, #8]
	BMP085_InitDataStructure.AC2 = Init_Read_Buffer[2] << 8 | Init_Read_Buffer[3];
 80007b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	817b      	strh	r3, [r7, #10]
	BMP085_InitDataStructure.AC3 = Init_Read_Buffer[4] << 8 | Init_Read_Buffer[5];
 80007c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	81bb      	strh	r3, [r7, #12]
	BMP085_InitDataStructure.AC4 = Init_Read_Buffer[6] << 8 | Init_Read_Buffer[7];
 80007d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	81fb      	strh	r3, [r7, #14]
	BMP085_InitDataStructure.AC5 = Init_Read_Buffer[8] << 8 | Init_Read_Buffer[9];
 80007ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	823b      	strh	r3, [r7, #16]
	BMP085_InitDataStructure.AC6 = Init_Read_Buffer[10] << 8 | Init_Read_Buffer[11];
 8000800:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
 8000808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800080c:	b21b      	sxth	r3, r3
 800080e:	4313      	orrs	r3, r2
 8000810:	b21b      	sxth	r3, r3
 8000812:	827b      	strh	r3, [r7, #18]
	BMP085_InitDataStructure.B1 = Init_Read_Buffer[12] << 8 | Init_Read_Buffer[13];
 8000814:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	82bb      	strh	r3, [r7, #20]
	BMP085_InitDataStructure.B2 = Init_Read_Buffer[14] << 8 | Init_Read_Buffer[15];
 8000828:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	82fb      	strh	r3, [r7, #22]
	BMP085_InitDataStructure.MB = Init_Read_Buffer[16] << 8 | Init_Read_Buffer[17];
 800083c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21a      	sxth	r2, r3
 8000844:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	833b      	strh	r3, [r7, #24]
	BMP085_InitDataStructure.MC = Init_Read_Buffer[18] << 8 | Init_Read_Buffer[19];
 8000850:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21a      	sxth	r2, r3
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	837b      	strh	r3, [r7, #26]
	BMP085_InitDataStructure.MD = Init_Read_Buffer[20] << 8 | Init_Read_Buffer[21];
 8000864:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21a      	sxth	r2, r3
 800086c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	83bb      	strh	r3, [r7, #28]
	return BMP085_InitDataStructure;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	461d      	mov	r5, r3
 800087c:	f107 0408 	add.w	r4, r7, #8
 8000880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000882:	6028      	str	r0, [r5, #0]
 8000884:	6069      	str	r1, [r5, #4]
 8000886:	60aa      	str	r2, [r5, #8]
 8000888:	60eb      	str	r3, [r5, #12]
 800088a:	6820      	ldr	r0, [r4, #0]
 800088c:	6128      	str	r0, [r5, #16]
 800088e:	88a3      	ldrh	r3, [r4, #4]
 8000890:	82ab      	strh	r3, [r5, #20]
}
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	3738      	adds	r7, #56	; 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bdb0      	pop	{r4, r5, r7, pc}

0800089a <BMP085_GetOriginalData>:

BMP085_OriginalDataTypdef BMP085_GetOriginalData(I2C_HandleTypeDef* hi2c, const char OSS)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b08c      	sub	sp, #48	; 0x30
 800089e:	af04      	add	r7, sp, #16
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71fb      	strb	r3, [r7, #7]
	BMP085_OriginalDataTypdef BMP085_OriginalDataStructure;
	unsigned char UPMode = BMP_COVERT_PRES + (OSS << 6);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	019b      	lsls	r3, r3, #6
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3334      	adds	r3, #52	; 0x34
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(hi2c, BMP085_ADDR, CONTROL_REG_ADDR, 1, &UPMode, 1, 10);//切换为压强读取，标准模式
 80008b4:	230a      	movs	r3, #10
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	2301      	movs	r3, #1
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	f107 0317 	add.w	r3, r7, #23
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	22f4      	movs	r2, #244	; 0xf4
 80008c6:	21ee      	movs	r1, #238	; 0xee
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f001 f9e7 	bl	8001c9c <HAL_I2C_Mem_Write>
	HAL_Delay(7);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fe26 	bl	8001520 <HAL_Delay>
	unsigned char Pres_Read_Buffer[3];
	HAL_I2C_Mem_Read(hi2c, BMP085_ADDR, BMP_TEMP_PRES_DATA_REG, 1, Pres_Read_Buffer, 1, 10);
 80008d4:	230a      	movs	r3, #10
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2301      	movs	r3, #1
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2301      	movs	r3, #1
 80008e4:	22f6      	movs	r2, #246	; 0xf6
 80008e6:	21ee      	movs	r1, #238	; 0xee
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f001 faeb 	bl	8001ec4 <HAL_I2C_Mem_Read>

	unsigned char UTMode = BMP_COVERT_TEMP;
 80008ee:	232e      	movs	r3, #46	; 0x2e
 80008f0:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Write(hi2c, BMP085_ADDR, CONTROL_REG_ADDR, 1, &UTMode, 1, 10);//切换为温度读取
 80008f2:	230a      	movs	r3, #10
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2301      	movs	r3, #1
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	f107 0313 	add.w	r3, r7, #19
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	22f4      	movs	r2, #244	; 0xf4
 8000904:	21ee      	movs	r1, #238	; 0xee
 8000906:	68b8      	ldr	r0, [r7, #8]
 8000908:	f001 f9c8 	bl	8001c9c <HAL_I2C_Mem_Write>
	HAL_Delay(4);
 800090c:	2004      	movs	r0, #4
 800090e:	f000 fe07 	bl	8001520 <HAL_Delay>
	unsigned char Temp_Read_Buffer[2];
	HAL_I2C_Mem_Read(hi2c, BMP085_ADDR, BMP_TEMP_PRES_DATA_REG, 1, Pres_Read_Buffer, 2, 10);
 8000912:	230a      	movs	r3, #10
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	2302      	movs	r3, #2
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	22f6      	movs	r2, #246	; 0xf6
 8000924:	21ee      	movs	r1, #238	; 0xee
 8000926:	68b8      	ldr	r0, [r7, #8]
 8000928:	f001 facc 	bl	8001ec4 <HAL_I2C_Mem_Read>

	BMP085_OriginalDataStructure.UP = (Pres_Read_Buffer[0] << 16 | Pres_Read_Buffer[1] << 8 | Pres_Read_Buffer[2]) >> (8 - OSS);
 800092c:	7d3b      	ldrb	r3, [r7, #20]
 800092e:	041a      	lsls	r2, r3, #16
 8000930:	7d7b      	ldrb	r3, [r7, #21]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	4313      	orrs	r3, r2
 8000936:	7dba      	ldrb	r2, [r7, #22]
 8000938:	431a      	orrs	r2, r3
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f1c3 0308 	rsb	r3, r3, #8
 8000940:	fa42 f303 	asr.w	r3, r2, r3
 8000944:	61bb      	str	r3, [r7, #24]
	BMP085_OriginalDataStructure.UT = Temp_Read_Buffer[0] << 8 | Temp_Read_Buffer[1];
 8000946:	7c3b      	ldrb	r3, [r7, #16]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
 800094c:	7c7b      	ldrb	r3, [r7, #17]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	83bb      	strh	r3, [r7, #28]
	return BMP085_OriginalDataStructure;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	461a      	mov	r2, r3
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000962:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <BMP085_GetData>:

BMP085_DataTypdef BMP085_GetData(I2C_HandleTypeDef* hi2c, const BMP085_InitDataTypdef* Init_Data, const char OSS)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b093      	sub	sp, #76	; 0x4c
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
	BMP085_OriginalDataTypdef BMP085_OringinalData = BMP085_GetOriginalData(hi2c, OSS);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	78fa      	ldrb	r2, [r7, #3]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff87 	bl	800089a <BMP085_GetOriginalData>
	BMP085_DataTypdef BMP085_DataStructure;

	short TX1 = (BMP085_OringinalData.UT - Init_Data->AC6) * Init_Data->AC5 / (1 << 15);
 800098c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	da03      	bge.n	80009b0 <BMP085_GetData+0x40>
 80009a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80009ac:	441a      	add	r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	13db      	asrs	r3, r3, #15
 80009b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	short TX2 = Init_Data->MC * (1 << 11) / (TX1 + Init_Data->MD);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009bc:	02da      	lsls	r2, r3, #11
 80009be:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 80009c8:	440b      	add	r3, r1
 80009ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80009ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	BMP085_DataStructure.Temp = (TX1 + TX2 + 8) / 160;
 80009d2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80009d6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80009da:	4413      	add	r3, r2
 80009dc:	3308      	adds	r3, #8
 80009de:	4a77      	ldr	r2, [pc, #476]	; (8000bbc <BMP085_GetData+0x24c>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1192      	asrs	r2, r2, #6
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f2:	ed87 7b06 	vstr	d7, [r7, #24]

	short B6 = TX1 + TX2 - 4000;
 80009f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80009fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009fe:	4413      	add	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	87fb      	strh	r3, [r7, #62]	; 0x3e
	short PX1 = (Init_Data->B2 * (B6 * B6 / (1 << 12))) / (1 << 11);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a16:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da01      	bge.n	8000a26 <BMP085_GetData+0xb6>
 8000a22:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a26:	131b      	asrs	r3, r3, #12
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da01      	bge.n	8000a34 <BMP085_GetData+0xc4>
 8000a30:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a34:	12db      	asrs	r3, r3, #11
 8000a36:	87bb      	strh	r3, [r7, #60]	; 0x3c
	short PX2 = Init_Data->AC2 * B6 / (1 << 11);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da01      	bge.n	8000a50 <BMP085_GetData+0xe0>
 8000a4c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a50:	12db      	asrs	r3, r3, #11
 8000a52:	877b      	strh	r3, [r7, #58]	; 0x3a
	short B3 = (((Init_Data->AC1 * 4 + PX1 + PX2) << OSS) + 2) / 4;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5a:	009a      	lsls	r2, r3, #2
 8000a5c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000a60:	441a      	add	r2, r3
 8000a62:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000a66:	441a      	add	r2, r3
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	3302      	adds	r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da00      	bge.n	8000a76 <BMP085_GetData+0x106>
 8000a74:	3303      	adds	r3, #3
 8000a76:	109b      	asrs	r3, r3, #2
 8000a78:	873b      	strh	r3, [r7, #56]	; 0x38
	PX1 = Init_Data->AC3 * B6 / (1 << 13);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a80:	461a      	mov	r2, r3
 8000a82:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da03      	bge.n	8000a96 <BMP085_GetData+0x126>
 8000a8e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000a92:	441a      	add	r2, r3
 8000a94:	4613      	mov	r3, r2
 8000a96:	135b      	asrs	r3, r3, #13
 8000a98:	87bb      	strh	r3, [r7, #60]	; 0x3c
	PX2 = (Init_Data->B1 * (B6 * B6 / (1 << 12))) / (1 << 16);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000aa6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da01      	bge.n	8000ab6 <BMP085_GetData+0x146>
 8000ab2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000ab6:	131b      	asrs	r3, r3, #12
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da03      	bge.n	8000ac8 <BMP085_GetData+0x158>
 8000ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac4:	441a      	add	r2, r3
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	141b      	asrs	r3, r3, #16
 8000aca:	877b      	strh	r3, [r7, #58]	; 0x3a
	short PX3 = (PX1 + PX2 + 2) / 4;
 8000acc:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8000ad0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da00      	bge.n	8000ade <BMP085_GetData+0x16e>
 8000adc:	3303      	adds	r3, #3
 8000ade:	109b      	asrs	r3, r3, #2
 8000ae0:	86fb      	strh	r3, [r7, #54]	; 0x36
	int B4 = Init_Data->AC4 * (unsigned int)(PX3 + 32768) / (1 << 15);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000aee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	0bdb      	lsrs	r3, r3, #15
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
	int B7 = ((unsigned int)BMP085_OringinalData.UP - B3) * (50000 >> OSS);
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	461a      	mov	r2, r3
 8000afe:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	78fa      	ldrb	r2, [r7, #3]
 8000b06:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000b0a:	fa41 f202 	asr.w	r2, r1, r2
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p;
	if (B7 < 0x80000000) p = (B7 * 2) / B4;
 8000b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db06      	blt.n	8000b28 <BMP085_GetData+0x1b8>
 8000b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1c:	005a      	lsls	r2, r3, #1
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44
 8000b26:	e005      	b.n	8000b34 <BMP085_GetData+0x1c4>
		else p = (B7 / B4) * 2;
 8000b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
	PX1 = (p / (1 << 8)) * (p / (1 << 8));
 8000b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da00      	bge.n	8000b3c <BMP085_GetData+0x1cc>
 8000b3a:	33ff      	adds	r3, #255	; 0xff
 8000b3c:	121b      	asrs	r3, r3, #8
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da00      	bge.n	8000b48 <BMP085_GetData+0x1d8>
 8000b46:	33ff      	adds	r3, #255	; 0xff
 8000b48:	121b      	asrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	fb12 f303 	smulbb	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	87bb      	strh	r3, [r7, #60]	; 0x3c
	PX1 = (PX1 * 3038) / (1 << 16);
 8000b54:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000b58:	f640 32de 	movw	r2, #3038	; 0xbde
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da03      	bge.n	8000b6c <BMP085_GetData+0x1fc>
 8000b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b68:	441a      	add	r2, r3
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	141b      	asrs	r3, r3, #16
 8000b6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	PX2 = (-7357 * p) / (1 << 16);
 8000b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <BMP085_GetData+0x250>)
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da03      	bge.n	8000b84 <BMP085_GetData+0x214>
 8000b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b80:	441a      	add	r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	141b      	asrs	r3, r3, #16
 8000b86:	877b      	strh	r3, [r7, #58]	; 0x3a
	BMP085_DataStructure.Pres = p + (PX1 + PX2 + 3791) / 16;
 8000b88:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8000b8c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000b90:	4413      	add	r3, r2
 8000b92:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da00      	bge.n	8000b9c <BMP085_GetData+0x22c>
 8000b9a:	330f      	adds	r3, #15
 8000b9c:	111b      	asrs	r3, r3, #4
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ba2:	4413      	add	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
	return BMP085_DataStructure;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	461c      	mov	r4, r3
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	374c      	adds	r7, #76	; 0x4c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	66666667 	.word	0x66666667
 8000bc0:	ffffe343 	.word	0xffffe343

08000bc4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA2   ------> USART2_TX
*/
void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a3b      	ldr	r2, [pc, #236]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a34      	ldr	r2, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c3a:	4826      	ldr	r0, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0x110>)
 8000c3c:	f000 ff60 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c40:	2304      	movs	r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <MX_GPIO_Init+0x114>)
 8000c5c:	f000 fda0 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c66:	2311      	movs	r3, #17
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0x110>)
 8000c7a:	f000 fd91 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c84:	2311      	movs	r3, #17
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <MX_GPIO_Init+0x110>)
 8000c98:	f000 fd82 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_GPIO_Init+0x114>)
 8000cb4:	f000 fd74 	bl	80017a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2028      	movs	r0, #40	; 0x28
 8000cbe:	f000 fd3a 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc2:	2028      	movs	r0, #40	; 0x28
 8000cc4:	f000 fd51 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58020000 	.word	0x58020000

08000cdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	f000 ff30 	bl	8001b7c <HAL_I2C_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 f91f 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d2a:	f001 fc9d 	bl	8002668 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 f916 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d3c:	f001 fcdf 	bl	80026fe <HAL_I2CEx_ConfigDigitalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f90d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	240001f4 	.word	0x240001f4
 8000d54:	40005400 	.word	0x40005400
 8000d58:	00401959 	.word	0x00401959

08000d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	; 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	; 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fc36 	bl	80065ee <memset>
  if(i2cHandle->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <HAL_I2C_MspInit+0xc4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d145      	bne.n	8000e18 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8c:	f04f 0208 	mov.w	r2, #8
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fccc 	bl	8003740 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dae:	f000 f8d9 	bl	8000f64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd0:	23c0      	movs	r3, #192	; 0xc0
 8000dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000df6:	f000 fcd3 	bl	80017a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e18:	bf00      	nop
 8000e1a:	37e8      	adds	r7, #232	; 0xe8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40005400 	.word	0x40005400
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020400 	.word	0x58020400

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f000 fae3 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f817 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3a:	f7ff fec3 	bl	8000bc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e3e:	f7ff ff4d 	bl	8000cdc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e42:	f000 fa39 	bl	80012b8 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BMP085_InitDataTypdef Init_Data = BMP085_GetInitData(&hi2c1);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4906      	ldr	r1, [pc, #24]	; (8000e64 <main+0x38>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc93 	bl	8000778 <BMP085_GetInitData>
	  BMP085_GetData(&hi2c1, &Init_Data, 1);
 8000e52:	4638      	mov	r0, r7
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4902      	ldr	r1, [pc, #8]	; (8000e64 <main+0x38>)
 8000e5c:	f7ff fd88 	bl	8000970 <BMP085_GetData>
  {
 8000e60:	e7f1      	b.n	8000e46 <main+0x1a>
 8000e62:	bf00      	nop
 8000e64:	240001f4 	.word	0x240001f4

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09c      	sub	sp, #112	; 0x70
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	224c      	movs	r2, #76	; 0x4c
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fbb9 	bl	80065ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2220      	movs	r2, #32
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fbb3 	bl	80065ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f001 fc85 	bl	8002798 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <SystemClock_Config+0xf4>)
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <SystemClock_Config+0xf4>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <SystemClock_Config+0xf4>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <SystemClock_Config+0xf8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <SystemClock_Config+0xf8>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <SystemClock_Config+0xf8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec4:	bf00      	nop
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <SystemClock_Config+0xf8>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed2:	d1f8      	bne.n	8000ec6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000eea:	2320      	movs	r3, #32
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000efa:	230c      	movs	r3, #12
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fc7e 	bl	800280c <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f16:	f000 f825 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	233f      	movs	r3, #63	; 0x3f
 8000f1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000f2e:	2350      	movs	r3, #80	; 0x50
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f8bd 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f4c:	f000 f80a 	bl	8000f64 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f50:	f002 fa6c 	bl	800342c <HAL_RCC_EnableCSS>
}
 8000f54:	bf00      	nop
 8000f56:	3770      	adds	r7, #112	; 0x70
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	58000400 	.word	0x58000400
 8000f60:	58024800 	.word	0x58024800

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_MspInit+0x30>)
 8000f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x30>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x30>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	58024400 	.word	0x58024400

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 fa76 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f003 ff64 	bl	8004eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2400024c 	.word	0x2400024c

0800100c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001014:	f000 fd8d 	bl	8001b32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_kill>:

int _kill(int pid, int sig)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001036:	f005 fb2d 	bl	8006694 <__errno>
 800103a:	4603      	mov	r3, r0
 800103c:	2216      	movs	r2, #22
 800103e:	601a      	str	r2, [r3, #0]
  return -1;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_exit>:

void _exit (int status)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffe7 	bl	800102c <_kill>
  while (1) {}    /* Make sure we hang here */
 800105e:	e7fe      	b.n	800105e <_exit+0x12>

08001060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
  }

  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e009      	b.n	80010c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf1      	blt.n	80010ac <_write+0x12>
  }
  return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_close>:

int _close(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fa:	605a      	str	r2, [r3, #4]
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_isatty>:

int _isatty(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f005 fa92 	bl	8006694 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24080000 	.word	0x24080000
 800119c:	00000400 	.word	0x00000400
 80011a0:	24000248 	.word	0x24000248
 80011a4:	240003e8 	.word	0x240003e8

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <SystemInit+0xe4>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <SystemInit+0xe4>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <SystemInit+0xe8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d807      	bhi.n	80011d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <SystemInit+0xe8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 030f 	bic.w	r3, r3, #15
 80011d0:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <SystemInit+0xe8>)
 80011d2:	f043 0307 	orr.w	r3, r3, #7
 80011d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <SystemInit+0xec>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <SystemInit+0xec>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <SystemInit+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <SystemInit+0xec>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4929      	ldr	r1, [pc, #164]	; (8001294 <SystemInit+0xec>)
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <SystemInit+0xf0>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <SystemInit+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <SystemInit+0xe8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <SystemInit+0xe8>)
 800120c:	f043 0307 	orr.w	r3, r3, #7
 8001210:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <SystemInit+0xec>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <SystemInit+0xec>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <SystemInit+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <SystemInit+0xec>)
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <SystemInit+0xf4>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <SystemInit+0xec>)
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SystemInit+0xf8>)
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <SystemInit+0xec>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <SystemInit+0xfc>)
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <SystemInit+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SystemInit+0xec>)
 800123e:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <SystemInit+0xfc>)
 8001240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <SystemInit+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SystemInit+0xec>)
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <SystemInit+0xfc>)
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SystemInit+0xec>)
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SystemInit+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <SystemInit+0xec>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SystemInit+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SystemInit+0x100>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <SystemInit+0x104>)
 800126c:	4013      	ands	r3, r2
 800126e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001272:	d202      	bcs.n	800127a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <SystemInit+0x108>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SystemInit+0x10c>)
 800127c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001280:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	52002000 	.word	0x52002000
 8001294:	58024400 	.word	0x58024400
 8001298:	eaf6ed7f 	.word	0xeaf6ed7f
 800129c:	02020200 	.word	0x02020200
 80012a0:	01ff0000 	.word	0x01ff0000
 80012a4:	01010280 	.word	0x01010280
 80012a8:	5c001000 	.word	0x5c001000
 80012ac:	ffff0000 	.word	0xffff0000
 80012b0:	51008108 	.word	0x51008108
 80012b4:	52004000 	.word	0x52004000

080012b8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_TIM3_Init+0x98>)
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <MX_TIM3_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_TIM3_Init+0x98>)
 80012de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_TIM3_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM3_Init+0x98>)
 80012ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80012f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_TIM3_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_TIM3_Init+0x98>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_TIM3_Init+0x98>)
 8001300:	f003 fd8c 	bl	8004e1c <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800130a:	f7ff fe2b 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_TIM3_Init+0x98>)
 800131c:	f003 fef4 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001326:	f7ff fe1d 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_TIM3_Init+0x98>)
 8001338:	f004 f948 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001342:	f7ff fe0f 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2400024c 	.word	0x2400024c
 8001354:	40000400 	.word	0x40000400

08001358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0x48>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d116      	bne.n	8001398 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 800136c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	201d      	movs	r0, #29
 800138e:	f000 f9d2 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001392:	201d      	movs	r0, #29
 8001394:	f000 f9e9 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40000400 	.word	0x40000400
 80013a4:	58024400 	.word	0x58024400

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f7ff fefc 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f005 f963 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fd27 	bl	8000e2c <main>
  bx  lr
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013e8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80013ec:	0800a128 	.word	0x0800a128
  ldr r2, =_sbss
 80013f0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80013f4:	240003e8 	.word	0x240003e8

080013f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC3_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001402:	2003      	movs	r0, #3
 8001404:	f000 f98c 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001408:	f002 f820 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_Init+0x68>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	4913      	ldr	r1, [pc, #76]	; (8001468 <HAL_Init+0x6c>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_Init+0x68>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_Init+0x6c>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_Init+0x70>)
 800143e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_Init+0x74>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f814 	bl	8001474 <HAL_InitTick>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e002      	b.n	800145c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001456:	f7ff fd8b 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	58024400 	.word	0x58024400
 8001468:	08009ce8 	.word	0x08009ce8
 800146c:	24000004 	.word	0x24000004
 8001470:	24000000 	.word	0x24000000

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e021      	b.n	80014cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_InitTick+0x64>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_InitTick+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f971 	bl	8001786 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f93b 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <HAL_InitTick+0x68>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2400000c 	.word	0x2400000c
 80014d8:	24000000 	.word	0x24000000
 80014dc:	24000008 	.word	0x24000008

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2400000c 	.word	0x2400000c
 8001504:	24000298 	.word	0x24000298

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	24000298 	.word	0x24000298

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2400000c 	.word	0x2400000c

08001568 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetREVID+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0c1b      	lsrs	r3, r3, #16
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	5c001000 	.word	0x5c001000

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff8e 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff29 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff40 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff33 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa4 	bl	80016dc <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_GPIO_Init+0x234>)
 80017b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017b2:	e194      	b.n	8001ade <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8186 	beq.w	8001ad8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <HAL_GPIO_Init+0x44>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d123      	bne.n	80018d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80e0 	beq.w	8001ad8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_GPIO_Init+0x238>)
 800191a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800191e:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <HAL_GPIO_Init+0x238>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_GPIO_Init+0x238>)
 800192a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <HAL_GPIO_Init+0x23c>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_GPIO_Init+0x240>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d052      	beq.n	8001a08 <HAL_GPIO_Init+0x268>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_GPIO_Init+0x244>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_GPIO_Init+0x22e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_GPIO_Init+0x248>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x22a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_GPIO_Init+0x24c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x250>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x222>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_GPIO_Init+0x254>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_GPIO_Init+0x258>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x21a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x25c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x216>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x260>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x212>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <HAL_GPIO_Init+0x264>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20e>
 80019aa:	2309      	movs	r3, #9
 80019ac:	e02d      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ae:	230a      	movs	r3, #10
 80019b0:	e02b      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e029      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e027      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e025      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019be:	2305      	movs	r3, #5
 80019c0:	e023      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e021      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e01f      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e01d      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01b      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019d2:	bf00      	nop
 80019d4:	58000080 	.word	0x58000080
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58000400 	.word	0x58000400
 80019e0:	58020000 	.word	0x58020000
 80019e4:	58020400 	.word	0x58020400
 80019e8:	58020800 	.word	0x58020800
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021000 	.word	0x58021000
 80019f4:	58021400 	.word	0x58021400
 80019f8:	58021800 	.word	0x58021800
 80019fc:	58021c00 	.word	0x58021c00
 8001a00:	58022000 	.word	0x58022000
 8001a04:	58022400 	.word	0x58022400
 8001a08:	2300      	movs	r3, #0
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1a:	4938      	ldr	r1, [pc, #224]	; (8001afc <HAL_GPIO_Init+0x35c>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f ae63 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3724      	adds	r7, #36	; 0x24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	58000400 	.word	0x58000400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f804 	bl	8001b66 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff f8da 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d104      	bne.n	8001c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_I2C_Init+0x11c>)
 8001c22:	430b      	orrs	r3, r1
 8001c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69d9      	ldr	r1, [r3, #28]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	02008000 	.word	0x02008000

08001c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	f040 80f9 	bne.w	8001eb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_I2C_Mem_Write+0x34>
 8001cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0ed      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Mem_Write+0x4e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0e6      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fc09 	bl	8001508 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fac3 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d1      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f9d3 	bl	80020f8 <I2C_RequestMemoryWrite>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0a9      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d90e      	bls.n	8001d8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fc3d 	bl	8002604 <I2C_TransferConfig>
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fc2c 	bl	8002604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fabc 	bl	800232e <I2C_WaitOnTXISFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07b      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d034      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d130      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fa3f 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04d      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d90e      	bls.n	8001e44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fbe1 	bl	8002604 <I2C_TransferConfig>
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fbd0 	bl	8002604 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d19e      	bne.n	8001dac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 faa2 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e01a      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_I2C_Mem_Write+0x224>)
 8001e96:	400b      	ands	r3, r1
 8001e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	f040 80fd 	bne.w	80020e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_I2C_Mem_Read+0x34>
 8001ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0f1      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x4e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0ea      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff faf5 	bl	8001508 <HAL_GetTick>
 8001f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f9af 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d5      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2222      	movs	r2, #34	; 0x22
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f64:	88f8      	ldrh	r0, [r7, #6]
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4603      	mov	r3, r0
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f913 	bl	80021a0 <I2C_RequestMemoryRead>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ad      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d90e      	bls.n	8001fb4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_I2C_Mem_Read+0x22c>)
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fb29 	bl	8002604 <I2C_TransferConfig>
 8001fb2:	e00f      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_I2C_Mem_Read+0x22c>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fb18 	bl	8002604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2104      	movs	r1, #4
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f956 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07c      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d034      	beq.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d130      	bne.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f927 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04d      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fac9 	bl	8002604 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fab8 	bl	8002604 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d19a      	bne.n	8001fd4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f98a 	bl	80023bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e01a      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_I2C_Mem_Read+0x230>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	80002400 	.word	0x80002400
 80020f4:	fe00e800 	.word	0xfe00e800

080020f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	8979      	ldrh	r1, [r7, #10]
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <I2C_RequestMemoryWrite+0xa4>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fa6f 	bl	8002604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8ff 	bl	800232e <I2C_WaitOnTXISFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e02c      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002140:	893b      	ldrh	r3, [r7, #8]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
 800214a:	e015      	b.n	8002178 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	69b9      	ldr	r1, [r7, #24]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8e5 	bl	800232e <I2C_WaitOnTXISFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e012      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800216e:	893b      	ldrh	r3, [r7, #8]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2200      	movs	r2, #0
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f884 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	80002000 	.word	0x80002000

080021a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	460b      	mov	r3, r1
 80021b4:	813b      	strh	r3, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <I2C_RequestMemoryRead+0xa4>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa1c 	bl	8002604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f8ac 	bl	800232e <I2C_WaitOnTXISFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e02c      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021e6:	893b      	ldrh	r3, [r7, #8]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
 80021f0:	e015      	b.n	800221e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021f2:	893b      	ldrh	r3, [r7, #8]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f892 	bl	800232e <I2C_WaitOnTXISFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e012      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2200      	movs	r2, #0
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f831 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	80002000 	.word	0x80002000

08002248 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d103      	bne.n	8002266 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d007      	beq.n	8002284 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	619a      	str	r2, [r3, #24]
  }
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a0:	e031      	b.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d02d      	beq.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7ff f92d 	bl	8001508 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d122      	bne.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4013      	ands	r3, r2
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d113      	bne.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	429a      	cmp	r2, r3
 8002322:	d0be      	beq.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800233a:	e033      	b.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f87f 	bl	8002444 <I2C_IsErrorOccurred>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e031      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d025      	beq.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7ff f8d6 	bl	8001508 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11a      	bne.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d013      	beq.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d1c4      	bne.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	e02f      	b.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f838 	bl	8002444 <I2C_IsErrorOccurred>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e02d      	b.n	800243a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7ff f893 	bl	8001508 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d302      	bcc.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11a      	bne.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d013      	beq.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e007      	b.n	800243a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d1c8      	bne.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d068      	beq.n	8002542 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002478:	e049      	b.n	800250e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d045      	beq.n	800250e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7ff f841 	bl	8001508 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_IsErrorOccurred+0x54>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d13a      	bne.n	800250e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d121      	bne.n	8002500 <I2C_IsErrorOccurred+0xbc>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c2:	d01d      	beq.n	8002500 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d01a      	beq.n	8002500 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024da:	f7ff f815 	bl	8001508 <HAL_GetTick>
 80024de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	e00e      	b.n	8002500 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024e2:	f7ff f811 	bl	8001508 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b19      	cmp	r3, #25
 80024ee:	d907      	bls.n	8002500 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024fe:	e006      	b.n	800250e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b20      	cmp	r3, #32
 800250c:	d1e9      	bne.n	80024e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d003      	beq.n	8002524 <I2C_IsErrorOccurred+0xe0>
 800251c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0aa      	beq.n	800247a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002564:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01c      	beq.n	80025f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fe45 	bl	8002248 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <I2C_IsErrorOccurred+0x1bc>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	fe00e800 	.word	0xfe00e800

08002604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	817b      	strh	r3, [r7, #10]
 8002612:	4613      	mov	r3, r2
 8002614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800261c:	7a7b      	ldrb	r3, [r7, #9]
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002624:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	4313      	orrs	r3, r2
 800262e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002632:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <I2C_TransferConfig+0x60>)
 8002644:	430b      	orrs	r3, r1
 8002646:	43db      	mvns	r3, r3
 8002648:	ea02 0103 	and.w	r1, r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	03ff63ff 	.word	0x03ff63ff

08002668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b20      	cmp	r3, #32
 800267c:	d138      	bne.n	80026f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002688:	2302      	movs	r3, #2
 800268a:	e032      	b.n	80026f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b20      	cmp	r3, #32
 8002712:	d139      	bne.n	8002788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800271e:	2302      	movs	r3, #2
 8002720:	e033      	b.n	800278a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2224      	movs	r2, #36	; 0x24
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00a      	beq.n	80027c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01f      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e01d      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	490f      	ldr	r1, [pc, #60]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027d2:	f7fe fe99 	bl	8001508 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027d8:	e009      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027da:	f7fe fe95 	bl	8001508 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e8:	d901      	bls.n	80027ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e007      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d1ee      	bne.n	80027da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	58024800 	.word	0x58024800

0800280c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 bc48 	b.w	80030b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8088 	beq.w	800293e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	4b99      	ldr	r3, [pc, #612]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002838:	4b96      	ldr	r3, [pc, #600]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	2b10      	cmp	r3, #16
 8002842:	d007      	beq.n	8002854 <HAL_RCC_OscConfig+0x48>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b18      	cmp	r3, #24
 8002848:	d111      	bne.n	800286e <HAL_RCC_OscConfig+0x62>
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d06d      	beq.n	800293c <HAL_RCC_OscConfig+0x130>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d169      	bne.n	800293c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f000 bc21 	b.w	80030b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x7a>
 8002878:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a85      	ldr	r2, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e02e      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x9c>
 800288e:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b7e      	ldr	r3, [pc, #504]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7d      	ldr	r2, [pc, #500]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a74      	ldr	r2, [pc, #464]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 80028cc:	4b71      	ldr	r3, [pc, #452]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a70      	ldr	r2, [pc, #448]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6d      	ldr	r2, [pc, #436]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fe0c 	bl	8001508 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fe08 	bl	8001508 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e3d4      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fdf8 	bl	8001508 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fdf4 	bl	8001508 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e3c0      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x110>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80ca 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002954:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002956:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_RCC_OscConfig+0x166>
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2b18      	cmp	r3, #24
 8002966:	d156      	bne.n	8002a16 <HAL_RCC_OscConfig+0x20a>
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d151      	bne.n	8002a16 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002972:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e392      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0219 	bic.w	r2, r3, #25
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	493f      	ldr	r1, [pc, #252]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fdb4 	bl	8001508 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe fdb0 	bl	8001508 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e37c      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	f7fe fdd1 	bl	8001568 <HAL_GetREVID>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d817      	bhi.n	8002a00 <HAL_RCC_OscConfig+0x1f4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d108      	bne.n	80029ea <HAL_RCC_OscConfig+0x1de>
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029e0:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	e07a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	031b      	lsls	r3, r3, #12
 80029f8:	4926      	ldr	r1, [pc, #152]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fe:	e06f      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	4921      	ldr	r1, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a14:	e064      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d047      	beq.n	8002aae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0219 	bic.w	r2, r3, #25
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	491a      	ldr	r1, [pc, #104]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fd6a 	bl	8001508 <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe fd66 	bl	8001508 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e332      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	f7fe fd87 	bl	8001568 <HAL_GetREVID>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d819      	bhi.n	8002a98 <HAL_RCC_OscConfig+0x28c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d108      	bne.n	8002a7e <HAL_RCC_OscConfig+0x272>
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7a:	6053      	str	r3, [r2, #4]
 8002a7c:	e030      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	4901      	ldr	r1, [pc, #4]	; (8002a94 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
 8002a92:	e025      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
 8002a94:	58024400 	.word	0x58024400
 8002a98:	4b9a      	ldr	r3, [pc, #616]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	4997      	ldr	r1, [pc, #604]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b95      	ldr	r3, [pc, #596]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a94      	ldr	r2, [pc, #592]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fd25 	bl	8001508 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fd21 	bl	8001508 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e2ed      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ad4:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a9 	beq.w	8002c40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	4b85      	ldr	r3, [pc, #532]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002af8:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d007      	beq.n	8002b14 <HAL_RCC_OscConfig+0x308>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b18      	cmp	r3, #24
 8002b08:	d13a      	bne.n	8002b80 <HAL_RCC_OscConfig+0x374>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d135      	bne.n	8002b80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b14:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x320>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e2c1      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2c:	f7fe fd1c 	bl	8001568 <HAL_GetREVID>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d817      	bhi.n	8002b6a <HAL_RCC_OscConfig+0x35e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x348>
 8002b42:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b52:	e075      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	069b      	lsls	r3, r3, #26
 8002b62:	4968      	ldr	r1, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b68:	e06a      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b6a:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	4962      	ldr	r1, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b7e:	e05f      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d042      	beq.n	8002c0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b88:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fcb8 	bl	8001508 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fcb4 	bl	8001508 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e280      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bae:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bba:	f7fe fcd5 	bl	8001568 <HAL_GetREVID>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d817      	bhi.n	8002bf8 <HAL_RCC_OscConfig+0x3ec>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d108      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3d6>
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	6053      	str	r3, [r2, #4]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
 8002be2:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	4944      	ldr	r1, [pc, #272]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	e023      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	493f      	ldr	r1, [pc, #252]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
 8002c0c:	e018      	b.n	8002c40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fc75 	bl	8001508 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c22:	f7fe fc71 	bl	8001508 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e23d      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c34:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d036      	beq.n	8002cba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d019      	beq.n	8002c88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fc52 	bl	8001508 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fc4e 	bl	8001508 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e21a      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x45c>
 8002c86:	e018      	b.n	8002cba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe fc38 	bl	8001508 <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fc34 	bl	8001508 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e200      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d039      	beq.n	8002d3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fc15 	bl	8001508 <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce2:	f7fe fc11 	bl	8001508 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1dd      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4d6>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d08:	4b9b      	ldr	r3, [pc, #620]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a9a      	ldr	r2, [pc, #616]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d14:	f7fe fbf8 	bl	8001508 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d1c:	f7fe fbf4 	bl	8001508 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1c0      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d2e:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8081 	beq.w	8002e4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d48:	4b8c      	ldr	r3, [pc, #560]	; (8002f7c <HAL_RCC_OscConfig+0x770>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8b      	ldr	r2, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x770>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fbd8 	bl	8001508 <HAL_GetTick>
 8002d58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fe fbd4 	bl	8001508 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1a0      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d6e:	4b83      	ldr	r3, [pc, #524]	; (8002f7c <HAL_RCC_OscConfig+0x770>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x584>
 8002d82:	4b7d      	ldr	r3, [pc, #500]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a7c      	ldr	r2, [pc, #496]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	e02d      	b.n	8002dec <HAL_RCC_OscConfig+0x5e0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5a6>
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a73      	ldr	r2, [pc, #460]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e01c      	b.n	8002dec <HAL_RCC_OscConfig+0x5e0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c8>
 8002dba:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a6b      	ldr	r2, [pc, #428]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0x5e0>
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fb88 	bl	8001508 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fb84 	bl	8001508 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e14e      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e12:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ee      	beq.n	8002dfc <HAL_RCC_OscConfig+0x5f0>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fb72 	bl	8001508 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe fb6e 	bl	8001508 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e138      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ee      	bne.n	8002e28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 812d 	beq.w	80030ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e54:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5c:	2b18      	cmp	r3, #24
 8002e5e:	f000 80bd 	beq.w	8002fdc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 809e 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe fb46 	bl	8001508 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fb42 	bl	8001508 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e10e      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x774>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4931      	ldr	r1, [pc, #196]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	025b      	lsls	r3, r3, #9
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	061b      	lsls	r3, r3, #24
 8002ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ee8:	4923      	ldr	r1, [pc, #140]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCC_OscConfig+0x778>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f06:	00d2      	lsls	r2, r2, #3
 8002f08:	491b      	ldr	r1, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f023 020c 	bic.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4917      	ldr	r1, [pc, #92]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	f023 0202 	bic.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	4912      	ldr	r1, [pc, #72]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe facb 	bl	8001508 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f74:	e011      	b.n	8002f9a <HAL_RCC_OscConfig+0x78e>
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58024800 	.word	0x58024800
 8002f80:	fffffc0c 	.word	0xfffffc0c
 8002f84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fabe 	bl	8001508 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e08a      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x77c>
 8002fa6:	e082      	b.n	80030ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe faa8 	bl	8001508 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe faa4 	bl	8001508 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e070      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x7b0>
 8002fda:	e068      	b.n	80030ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d031      	beq.n	8003054 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d12a      	bne.n	8003054 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d122      	bne.n	8003054 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d11a      	bne.n	8003054 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0a5b      	lsrs	r3, r3, #9
 8003022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d111      	bne.n	8003054 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	0e1b      	lsrs	r3, r3, #24
 8003046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e02b      	b.n	80030b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	08db      	lsrs	r3, r3, #3
 800305e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003062:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d01f      	beq.n	80030ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800307a:	f7fe fa45 	bl	8001508 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003080:	bf00      	nop
 8003082:	f7fe fa41 	bl	8001508 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	4293      	cmp	r3, r2
 800308c:	d0f9      	beq.n	8003082 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_OscConfig+0x8b0>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800309a:	00d2      	lsls	r2, r2, #3
 800309c:	4906      	ldr	r1, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_RCC_OscConfig+0x8ac>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	; 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	58024400 	.word	0x58024400
 80030bc:	ffff0007 	.word	0xffff0007

080030c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e19c      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b87      	ldr	r3, [pc, #540]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 020f 	bic.w	r2, r3, #15
 80030ea:	4985      	ldr	r1, [pc, #532]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b83      	ldr	r3, [pc, #524]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e184      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311c:	429a      	cmp	r2, r3
 800311e:	d908      	bls.n	8003132 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003120:	4b78      	ldr	r3, [pc, #480]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4975      	ldr	r1, [pc, #468]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800312e:	4313      	orrs	r3, r2
 8003130:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800314a:	429a      	cmp	r2, r3
 800314c:	d908      	bls.n	8003160 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	496a      	ldr	r1, [pc, #424]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	4b64      	ldr	r3, [pc, #400]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003178:	429a      	cmp	r2, r3
 800317a:	d908      	bls.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800317c:	4b61      	ldr	r3, [pc, #388]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	495e      	ldr	r1, [pc, #376]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800318a:	4313      	orrs	r3, r2
 800318c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d908      	bls.n	80031bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4953      	ldr	r1, [pc, #332]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 020f 	bic.w	r2, r3, #15
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4947      	ldr	r1, [pc, #284]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d055      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4940      	ldr	r1, [pc, #256]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003204:	4313      	orrs	r3, r2
 8003206:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d107      	bne.n	8003220 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003210:	4b3c      	ldr	r3, [pc, #240]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d121      	bne.n	8003260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0f6      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003228:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d115      	bne.n	8003260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0ea      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0de      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d6      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f023 0207 	bic.w	r2, r3, #7
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4925      	ldr	r1, [pc, #148]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003272:	f7fe f949 	bl	8001508 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003278:	e00a      	b.n	8003290 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327a:	f7fe f945 	bl	8001508 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0be      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	429a      	cmp	r2, r3
 80032a0:	d1eb      	bne.n	800327a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d208      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCC_ClockConfig+0x244>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d214      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 020f 	bic.w	r2, r3, #15
 80032e6:	4906      	ldr	r1, [pc, #24]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e086      	b.n	800340e <HAL_RCC_ClockConfig+0x34e>
 8003300:	52002000 	.word	0x52002000
 8003304:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003320:	429a      	cmp	r2, r3
 8003322:	d208      	bcs.n	8003336 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003324:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	4939      	ldr	r1, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003332:	4313      	orrs	r3, r2
 8003334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800334e:	429a      	cmp	r2, r3
 8003350:	d208      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	492e      	ldr	r1, [pc, #184]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800337c:	429a      	cmp	r2, r3
 800337e:	d208      	bcs.n	8003392 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4922      	ldr	r1, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 800338e:	4313      	orrs	r3, r2
 8003390:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d208      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4917      	ldr	r1, [pc, #92]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c0:	f000 f844 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	4912      	ldr	r1, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x35c>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x358>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_RCC_ClockConfig+0x35c>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x360>)
 80033f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x364>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x368>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f836 	bl	8001474 <HAL_InitTick>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
 800341c:	08009ce8 	.word	0x08009ce8
 8003420:	24000004 	.word	0x24000004
 8003424:	24000000 	.word	0x24000000
 8003428:	24000008 	.word	0x24000008

0800342c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_EnableCSS+0x1c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_EnableCSS+0x1c>)
 8003436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003452:	4bb3      	ldr	r3, [pc, #716]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345a:	2b18      	cmp	r3, #24
 800345c:	f200 8155 	bhi.w	800370a <HAL_RCC_GetSysClockFreq+0x2be>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	080034cd 	.word	0x080034cd
 800346c:	0800370b 	.word	0x0800370b
 8003470:	0800370b 	.word	0x0800370b
 8003474:	0800370b 	.word	0x0800370b
 8003478:	0800370b 	.word	0x0800370b
 800347c:	0800370b 	.word	0x0800370b
 8003480:	0800370b 	.word	0x0800370b
 8003484:	0800370b 	.word	0x0800370b
 8003488:	080034f3 	.word	0x080034f3
 800348c:	0800370b 	.word	0x0800370b
 8003490:	0800370b 	.word	0x0800370b
 8003494:	0800370b 	.word	0x0800370b
 8003498:	0800370b 	.word	0x0800370b
 800349c:	0800370b 	.word	0x0800370b
 80034a0:	0800370b 	.word	0x0800370b
 80034a4:	0800370b 	.word	0x0800370b
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	0800370b 	.word	0x0800370b
 80034b0:	0800370b 	.word	0x0800370b
 80034b4:	0800370b 	.word	0x0800370b
 80034b8:	0800370b 	.word	0x0800370b
 80034bc:	0800370b 	.word	0x0800370b
 80034c0:	0800370b 	.word	0x0800370b
 80034c4:	0800370b 	.word	0x0800370b
 80034c8:	080034ff 	.word	0x080034ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034cc:	4b94      	ldr	r3, [pc, #592]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034d8:	4b91      	ldr	r3, [pc, #580]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80034ea:	e111      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034ec:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ee:	61bb      	str	r3, [r7, #24]
      break;
 80034f0:	e10e      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80034f2:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f4:	61bb      	str	r3, [r7, #24]
      break;
 80034f6:	e10b      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034f8:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034fa:	61bb      	str	r3, [r7, #24]
      break;
 80034fc:	e108      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003512:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003514:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800351e:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80e1 	beq.w	8003704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b02      	cmp	r3, #2
 8003546:	f000 8083 	beq.w	8003650 <HAL_RCC_GetSysClockFreq+0x204>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b02      	cmp	r3, #2
 800354e:	f200 80a1 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x248>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x114>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d056      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x1c0>
 800355e:	e099      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02d      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800356c:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80035c6:	e087      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800360a:	e065      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800364e:	e043      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800373c <HAL_RCC_GetSysClockFreq+0x2f0>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003692:	e021      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	0a5b      	lsrs	r3, r3, #9
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	3301      	adds	r3, #1
 80036e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fc:	ee17 3a90 	vmov	r3, s15
 8003700:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
      break;
 8003708:	e002      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800370c:	61bb      	str	r3, [r7, #24]
      break;
 800370e:	bf00      	nop
  }

  return sysclockfreq;
 8003710:	69bb      	ldr	r3, [r7, #24]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
 8003724:	03d09000 	.word	0x03d09000
 8003728:	003d0900 	.word	0x003d0900
 800372c:	017d7840 	.word	0x017d7840
 8003730:	46000000 	.word	0x46000000
 8003734:	4c742400 	.word	0x4c742400
 8003738:	4a742400 	.word	0x4a742400
 800373c:	4bbebc20 	.word	0x4bbebc20

08003740 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b0ca      	sub	sp, #296	; 0x128
 8003746:	af00      	add	r7, sp, #0
 8003748:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003764:	2500      	movs	r5, #0
 8003766:	ea54 0305 	orrs.w	r3, r4, r5
 800376a:	d049      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003776:	d02f      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003778:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800377c:	d828      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d01a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003788:	d822      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d007      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003794:	e01c      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003796:	4bb8      	ldr	r3, [pc, #736]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	4ab7      	ldr	r2, [pc, #732]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037a2:	e01a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	3308      	adds	r3, #8
 80037aa:	2102      	movs	r1, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 f9d1 	bl	8004b54 <RCCEx_PLL2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037b8:	e00f      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	3328      	adds	r3, #40	; 0x28
 80037c0:	2102      	movs	r1, #2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fa78 	bl	8004cb8 <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ce:	e004      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037e2:	4ba5      	ldr	r3, [pc, #660]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	4aa1      	ldr	r2, [pc, #644]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6513      	str	r3, [r2, #80]	; 0x50
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800380c:	f04f 0900 	mov.w	r9, #0
 8003810:	ea58 0309 	orrs.w	r3, r8, r9
 8003814:	d047      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	2b04      	cmp	r3, #4
 800381e:	d82a      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800383d 	.word	0x0800383d
 800382c:	0800384b 	.word	0x0800384b
 8003830:	08003861 	.word	0x08003861
 8003834:	0800387f 	.word	0x0800387f
 8003838:	0800387f 	.word	0x0800387f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4b8e      	ldr	r3, [pc, #568]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a8d      	ldr	r2, [pc, #564]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003848:	e01a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	3308      	adds	r3, #8
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f97e 	bl	8004b54 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385e:	e00f      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	3328      	adds	r3, #40	; 0x28
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fa25 	bl	8004cb8 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b7b      	ldr	r3, [pc, #492]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 0107 	bic.w	r1, r3, #7
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a78      	ldr	r2, [pc, #480]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	; 0x50
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80038b2:	f04f 0b00 	mov.w	fp, #0
 80038b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80038ba:	d04c      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d030      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038cc:	d829      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ce:	2bc0      	cmp	r3, #192	; 0xc0
 80038d0:	d02d      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d825      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d018      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d821      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d007      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038e6:	e01c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a62      	ldr	r2, [pc, #392]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f4:	e01c      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fa:	3308      	adds	r3, #8
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f928 	bl	8004b54 <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800390a:	e011      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003910:	3328      	adds	r3, #40	; 0x28
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f001 f9cf 	bl	8004cb8 <RCCEx_PLL3_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003938:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003948:	430b      	orrs	r3, r1
 800394a:	6513      	str	r3, [r2, #80]	; 0x50
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003962:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800396c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003970:	460b      	mov	r3, r1
 8003972:	4313      	orrs	r3, r2
 8003974:	d053      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800397e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003982:	d035      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003988:	d82e      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800398a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800398e:	d031      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003990:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003994:	d828      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d01a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800399c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a0:	d822      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039aa:	d007      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039ac:	e01c      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ae:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ba:	e01c      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	3308      	adds	r3, #8
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f8c5 	bl	8004b54 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039d0:	e011      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f96c 	bl	8004cb8 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e6:	e006      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a0e:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6593      	str	r3, [r2, #88]	; 0x58
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d056      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d038      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a50:	d831      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a56:	d034      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5c:	d82b      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a62:	d01d      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a68:	d825      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a74:	e01f      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a76:	bf00      	nop
 8003a78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4ba2      	ldr	r3, [pc, #648]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4aa1      	ldr	r2, [pc, #644]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f85e 	bl	8004b54 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	3328      	adds	r3, #40	; 0x28
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f905 	bl	8004cb8 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003acc:	4b8e      	ldr	r3, [pc, #568]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003adc:	4a8a      	ldr	r2, [pc, #552]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d03a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	2b30      	cmp	r3, #48	; 0x30
 8003b14:	d01f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	d819      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d815      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d019      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d111      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2a:	4b77      	ldr	r3, [pc, #476]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	4a76      	ldr	r2, [pc, #472]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b36:	e011      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f807 	bl	8004b54 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b54:	e002      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	4a65      	ldr	r2, [pc, #404]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	d051      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d035      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb2:	d82e      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bb8:	d031      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bbe:	d828      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d01a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bca:	d822      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bd6:	e01c      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be4:	e01c      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bea:	3308      	adds	r3, #8
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ffb0 	bl	8004b54 <RCCEx_PLL2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bfa:	e011      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c00:	3328      	adds	r3, #40	; 0x28
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f857 	bl	8004cb8 <RCCEx_PLL3_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c10:	e006      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c18:	e002      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c36:	4a34      	ldr	r2, [pc, #208]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6513      	str	r3, [r2, #80]	; 0x50
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c60:	460b      	mov	r3, r1
 8003c62:	4313      	orrs	r3, r2
 8003c64:	d056      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d033      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c76:	d82c      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7c:	d02f      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c82:	d826      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c88:	d02b      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c8e:	d820      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c94:	d012      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c9a:	d81a      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d022      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d115      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003caa:	3308      	adds	r3, #8
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 ff50 	bl	8004b54 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cba:	e015      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc0:	3328      	adds	r3, #40	; 0x28
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fff7 	bl	8004cb8 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfe:	4a02      	ldr	r2, [pc, #8]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6513      	str	r3, [r2, #80]	; 0x50
 8003d04:	e006      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d06:	bf00      	nop
 8003d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d055      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d40:	d033      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d46:	d82c      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d02f      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d826      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d58:	d02b      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d5e:	d820      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d64:	d012      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6a:	d81a      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d022      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d74:	d115      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fee8 	bl	8004b54 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d8a:	e015      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	3328      	adds	r3, #40	; 0x28
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ff8f 	bl	8004cb8 <RCCEx_PLL3_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003da0:	e00a      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da8:	e006      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003daa:	bf00      	nop
 8003dac:	e004      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dc0:	4ba3      	ldr	r3, [pc, #652]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dd0:	4a9f      	ldr	r2, [pc, #636]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	d037      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0a:	d00e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d816      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1a:	d111      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1c:	4b8c      	ldr	r3, [pc, #560]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a8b      	ldr	r2, [pc, #556]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e28:	e00f      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2e:	3308      	adds	r3, #8
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fe8e 	bl	8004b54 <RCCEx_PLL2_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e3e:	e004      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e52:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6513      	str	r3, [r2, #80]	; 0x50
 8003e66:	e003      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	d039      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d81c      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003eb1 	.word	0x08003eb1
 8003ea8:	08003ebf 	.word	0x08003ebf
 8003eac:	08003edd 	.word	0x08003edd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb0:	4b67      	ldr	r3, [pc, #412]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	4a66      	ldr	r2, [pc, #408]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ebc:	e00f      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fe44 	bl	8004b54 <RCCEx_PLL2_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ee6:	4b5a      	ldr	r3, [pc, #360]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	f023 0103 	bic.w	r1, r3, #3
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	4a56      	ldr	r2, [pc, #344]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003efa:	e003      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f000 809f 	beq.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f26:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f32:	f7fd fae9 	bl	8001508 <HAL_GetTick>
 8003f36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fd fae4 	bl	8001508 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d903      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f54:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ed      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d179      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f74:	4053      	eors	r3, r2
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d015      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a30      	ldr	r2, [pc, #192]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a2d      	ldr	r2, [pc, #180]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fa2:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb6:	d118      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd faa6 	bl	8001508 <HAL_GetTick>
 8003fbc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fc0:	e00d      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd faa1 	bl	8001508 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003fdc:	e005      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0eb      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d129      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004002:	d10e      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004014:	091a      	lsrs	r2, r3, #4
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004018:	4013      	ands	r3, r2
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6113      	str	r3, [r2, #16]
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800402c:	6113      	str	r3, [r2, #16]
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004030:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004040:	430b      	orrs	r3, r1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800404e:	e009      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004050:	58024400 	.word	0x58024400
 8004054:	58024800 	.word	0x58024800
 8004058:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 0301 	and.w	r3, r2, #1
 8004070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	f000 8089 	beq.w	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408c:	2b28      	cmp	r3, #40	; 0x28
 800408e:	d86b      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	08004171 	.word	0x08004171
 800409c:	08004169 	.word	0x08004169
 80040a0:	08004169 	.word	0x08004169
 80040a4:	08004169 	.word	0x08004169
 80040a8:	08004169 	.word	0x08004169
 80040ac:	08004169 	.word	0x08004169
 80040b0:	08004169 	.word	0x08004169
 80040b4:	08004169 	.word	0x08004169
 80040b8:	0800413d 	.word	0x0800413d
 80040bc:	08004169 	.word	0x08004169
 80040c0:	08004169 	.word	0x08004169
 80040c4:	08004169 	.word	0x08004169
 80040c8:	08004169 	.word	0x08004169
 80040cc:	08004169 	.word	0x08004169
 80040d0:	08004169 	.word	0x08004169
 80040d4:	08004169 	.word	0x08004169
 80040d8:	08004153 	.word	0x08004153
 80040dc:	08004169 	.word	0x08004169
 80040e0:	08004169 	.word	0x08004169
 80040e4:	08004169 	.word	0x08004169
 80040e8:	08004169 	.word	0x08004169
 80040ec:	08004169 	.word	0x08004169
 80040f0:	08004169 	.word	0x08004169
 80040f4:	08004169 	.word	0x08004169
 80040f8:	08004171 	.word	0x08004171
 80040fc:	08004169 	.word	0x08004169
 8004100:	08004169 	.word	0x08004169
 8004104:	08004169 	.word	0x08004169
 8004108:	08004169 	.word	0x08004169
 800410c:	08004169 	.word	0x08004169
 8004110:	08004169 	.word	0x08004169
 8004114:	08004169 	.word	0x08004169
 8004118:	08004171 	.word	0x08004171
 800411c:	08004169 	.word	0x08004169
 8004120:	08004169 	.word	0x08004169
 8004124:	08004169 	.word	0x08004169
 8004128:	08004169 	.word	0x08004169
 800412c:	08004169 	.word	0x08004169
 8004130:	08004169 	.word	0x08004169
 8004134:	08004169 	.word	0x08004169
 8004138:	08004171 	.word	0x08004171
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	3308      	adds	r3, #8
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fd05 	bl	8004b54 <RCCEx_PLL2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004150:	e00f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	3328      	adds	r3, #40	; 0x28
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fdac 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800417a:	4bbf      	ldr	r3, [pc, #764]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004188:	4abb      	ldr	r2, [pc, #748]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6553      	str	r3, [r2, #84]	; 0x54
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f002 0302 	and.w	r3, r2, #2
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d041      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d824      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	08004215 	.word	0x08004215
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	080041f7 	.word	0x080041f7
 80041d4:	08004215 	.word	0x08004215
 80041d8:	08004215 	.word	0x08004215
 80041dc:	08004215 	.word	0x08004215
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e4:	3308      	adds	r3, #8
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fcb3 	bl	8004b54 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3328      	adds	r3, #40	; 0x28
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fd5a 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800421e:	4b96      	ldr	r3, [pc, #600]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f023 0107 	bic.w	r1, r3, #7
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422c:	4a92      	ldr	r2, [pc, #584]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800422e:	430b      	orrs	r3, r1
 8004230:	6553      	str	r3, [r2, #84]	; 0x54
 8004232:	e003      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 0304 	and.w	r3, r2, #4
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d044      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004264:	2b05      	cmp	r3, #5
 8004266:	d825      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042bd 	.word	0x080042bd
 8004274:	08004289 	.word	0x08004289
 8004278:	0800429f 	.word	0x0800429f
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042bd 	.word	0x080042bd
 8004284:	080042bd 	.word	0x080042bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	3308      	adds	r3, #8
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fc5f 	bl	8004b54 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fd06 	bl	8004cb8 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c6:	4b6c      	ldr	r3, [pc, #432]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f023 0107 	bic.w	r1, r3, #7
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	4a68      	ldr	r2, [pc, #416]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6593      	str	r3, [r2, #88]	; 0x58
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f002 0320 	and.w	r3, r2, #32
 80042f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d055      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004312:	d033      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004318:	d82c      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d02f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d826      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004326:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800432a:	d02b      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800432c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004330:	d820      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004336:	d012      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800433c:	d81a      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d022      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004346:	d115      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434c:	3308      	adds	r3, #8
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fbff 	bl	8004b54 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800435c:	e015      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004362:	3328      	adds	r3, #40	; 0x28
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fca6 	bl	8004cb8 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004372:	e00a      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800437a:	e006      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800437c:	bf00      	nop
 800437e:	e004      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004380:	bf00      	nop
 8004382:	e002      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004384:	bf00      	nop
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	4a35      	ldr	r2, [pc, #212]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6553      	str	r3, [r2, #84]	; 0x54
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80043be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80043c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d058      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043de:	d033      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043e4:	d82c      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d02f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d826      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043f6:	d02b      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043fc:	d820      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004402:	d012      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004408:	d81a      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d022      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d115      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004418:	3308      	adds	r3, #8
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fb99 	bl	8004b54 <RCCEx_PLL2_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004428:	e015      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	3328      	adds	r3, #40	; 0x28
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fc40 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800443e:	e00a      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004446:	e006      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004448:	bf00      	nop
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800444c:	bf00      	nop
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10e      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446e:	4a02      	ldr	r2, [pc, #8]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800449a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d055      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044b0:	d033      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044b6:	d82c      	bhi.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d02f      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c2:	d826      	bhi.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044c8:	d02b      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044ce:	d820      	bhi.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d4:	d012      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044da:	d81a      	bhi.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d022      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e4:	d115      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	3308      	adds	r3, #8
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fb30 	bl	8004b54 <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044fa:	e015      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	3328      	adds	r3, #40	; 0x28
 8004502:	2102      	movs	r1, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fbd7 	bl	8004cb8 <RCCEx_PLL3_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004510:	e00a      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004518:	e006      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451a:	bf00      	nop
 800451c:	e004      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004530:	4ba1      	ldr	r3, [pc, #644]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004540:	4a9d      	ldr	r2, [pc, #628]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6593      	str	r3, [r2, #88]	; 0x58
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800454c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f002 0308 	and.w	r3, r2, #8
 800455c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004566:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	d01e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	3328      	adds	r3, #40	; 0x28
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb96 	bl	8004cb8 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004598:	4b87      	ldr	r3, [pc, #540]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a8:	4a83      	ldr	r2, [pc, #524]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f002 0310 	and.w	r3, r2, #16
 80045ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d01e      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d10c      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	3328      	adds	r3, #40	; 0x28
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb67 	bl	8004cb8 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f6:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004606:	4a6c      	ldr	r2, [pc, #432]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004608:	430b      	orrs	r3, r1
 800460a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004622:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d03e      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004638:	d022      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800463a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800463e:	d81b      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d00b      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800464a:	e015      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004650:	3308      	adds	r3, #8
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fa7d 	bl	8004b54 <RCCEx_PLL2_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004660:	e00f      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004666:	3328      	adds	r3, #40	; 0x28
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fb24 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004676:	e004      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800468a:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800469a:	4a47      	ldr	r2, [pc, #284]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469c:	430b      	orrs	r3, r1
 800469e:	6593      	str	r3, [r2, #88]	; 0x58
 80046a0:	e003      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80046b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b8:	2300      	movs	r3, #0
 80046ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d03b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046d2:	d01f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046d8:	d818      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e4:	d007      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046f4:	e00f      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fa:	3328      	adds	r3, #40	; 0x28
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fada 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6553      	str	r3, [r2, #84]	; 0x54
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800473a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800474a:	673b      	str	r3, [r7, #112]	; 0x70
 800474c:	2300      	movs	r3, #0
 800474e:	677b      	str	r3, [r7, #116]	; 0x74
 8004750:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d034      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d007      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800476a:	e011      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004778:	e00e      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477e:	3308      	adds	r3, #8
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f9e6 	bl	8004b54 <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	4a02      	ldr	r2, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80047d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d2:	2300      	movs	r3, #0
 80047d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d00c      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e4:	3328      	adds	r3, #40	; 0x28
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fa65 	bl	8004cb8 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004806:	663b      	str	r3, [r7, #96]	; 0x60
 8004808:	2300      	movs	r3, #0
 800480a:	667b      	str	r3, [r7, #100]	; 0x64
 800480c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d038      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004822:	d018      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004828:	d811      	bhi.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800482a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482e:	d014      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d80b      	bhi.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4bc3      	ldr	r3, [pc, #780]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4ac2      	ldr	r2, [pc, #776]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800484c:	e008      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004854:	e004      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800485e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004868:	4bb9      	ldr	r3, [pc, #740]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004878:	4ab5      	ldr	r2, [pc, #724]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487a:	430b      	orrs	r3, r1
 800487c:	6553      	str	r3, [r2, #84]	; 0x54
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
 8004896:	2300      	movs	r3, #0
 8004898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800489e:	460b      	mov	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a4:	4baa      	ldr	r3, [pc, #680]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	4aa7      	ldr	r2, [pc, #668]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80048c4:	653b      	str	r3, [r7, #80]	; 0x50
 80048c6:	2300      	movs	r3, #0
 80048c8:	657b      	str	r3, [r7, #84]	; 0x54
 80048ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048d4:	4b9e      	ldr	r3, [pc, #632]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048e4:	4a9a      	ldr	r2, [pc, #616]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80048f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f8:	2300      	movs	r3, #0
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004906:	4b92      	ldr	r3, [pc, #584]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004914:	4a8e      	ldr	r2, [pc, #568]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004916:	430b      	orrs	r3, r1
 8004918:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
 8004928:	2300      	movs	r3, #0
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d00e      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004936:	4b86      	ldr	r3, [pc, #536]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	4a85      	ldr	r2, [pc, #532]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004940:	6113      	str	r3, [r2, #16]
 8004942:	4b83      	ldr	r3, [pc, #524]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004944:	6919      	ldr	r1, [r3, #16]
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800494e:	4a80      	ldr	r2, [pc, #512]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004950:	430b      	orrs	r3, r1
 8004952:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
 8004962:	2300      	movs	r3, #0
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004966:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800496a:	460b      	mov	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004970:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	4a74      	ldr	r2, [pc, #464]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004980:	430b      	orrs	r3, r1
 8004982:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004990:	633b      	str	r3, [r7, #48]	; 0x30
 8004992:	2300      	movs	r3, #0
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
 8004996:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800499a:	460b      	mov	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049a0:	4b6b      	ldr	r3, [pc, #428]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b0:	4a67      	ldr	r2, [pc, #412]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	2100      	movs	r1, #0
 80049c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049cc:	460b      	mov	r3, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d011      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d6:	3308      	adds	r3, #8
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f8ba 	bl	8004b54 <RCCEx_PLL2_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	2100      	movs	r1, #0
 8004a00:	6239      	str	r1, [r7, #32]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d011      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a16:	3308      	adds	r3, #8
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f89a 	bl	8004b54 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	61b9      	str	r1, [r7, #24]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	d011      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a56:	3308      	adds	r3, #8
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f87a 	bl	8004b54 <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6139      	str	r1, [r7, #16]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d011      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	3328      	adds	r3, #40	; 0x28
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f90c 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad6:	3328      	adds	r3, #40	; 0x28
 8004ad8:	2101      	movs	r1, #1
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f8ec 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	2100      	movs	r1, #0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d011      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	3328      	adds	r3, #40	; 0x28
 8004b18:	2102      	movs	r1, #2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f8cc 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004b36:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b50:	58024400 	.word	0x58024400

08004b54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b62:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d101      	bne.n	8004b72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e099      	b.n	8004ca6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b72:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a4e      	ldr	r2, [pc, #312]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7e:	f7fc fcc3 	bl	8001508 <HAL_GetTick>
 8004b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b86:	f7fc fcbf 	bl	8001508 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e086      	b.n	8004ca6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b98:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	493f      	ldr	r1, [pc, #252]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	025b      	lsls	r3, r3, #9
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004be8:	4931      	ldr	r1, [pc, #196]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	492d      	ldr	r1, [pc, #180]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f023 0220 	bic.w	r2, r3, #32
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	4928      	ldr	r1, [pc, #160]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	f023 0310 	bic.w	r3, r3, #16
 8004c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <RCCEx_PLL2_Config+0x160>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	69d2      	ldr	r2, [r2, #28]
 8004c2a:	00d2      	lsls	r2, r2, #3
 8004c2c:	4920      	ldr	r1, [pc, #128]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c32:	4b1f      	ldr	r3, [pc, #124]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	f043 0310 	orr.w	r3, r3, #16
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c50:	e00f      	b.n	8004c72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d106      	bne.n	8004c66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c64:	e005      	b.n	8004c72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fc fc43 	bl	8001508 <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c86:	f7fc fc3f 	bl	8001508 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e006      	b.n	8004ca6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	ffff0007 	.word	0xffff0007

08004cb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d101      	bne.n	8004cd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e099      	b.n	8004e0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cd6:	4b4f      	ldr	r3, [pc, #316]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4e      	ldr	r2, [pc, #312]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fc11 	bl	8001508 <HAL_GetTick>
 8004ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cea:	f7fc fc0d 	bl	8001508 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e086      	b.n	8004e0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cfc:	4b45      	ldr	r3, [pc, #276]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d08:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	051b      	lsls	r3, r3, #20
 8004d16:	493f      	ldr	r1, [pc, #252]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	025b      	lsls	r3, r3, #9
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d4c:	4931      	ldr	r1, [pc, #196]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d52:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	4928      	ldr	r1, [pc, #160]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d76:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d82:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <RCCEx_PLL3_Config+0x160>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	69d2      	ldr	r2, [r2, #28]
 8004d8e:	00d2      	lsls	r2, r2, #3
 8004d90:	4920      	ldr	r1, [pc, #128]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d96:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db4:	e00f      	b.n	8004dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004dbc:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dc8:	e005      	b.n	8004dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	4a11      	ldr	r2, [pc, #68]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a0e      	ldr	r2, [pc, #56]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de2:	f7fc fb91 	bl	8001508 <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de8:	e008      	b.n	8004dfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dea:	f7fc fb8d 	bl	8001508 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e006      	b.n	8004e0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	58024400 	.word	0x58024400
 8004e18:	ffff0007 	.word	0xffff0007

08004e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e049      	b.n	8004ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc fa88 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 fa7e 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d122      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d11b      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0202 	mvn.w	r2, #2
 8004ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fa07 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004f12:	e005      	b.n	8004f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f9f9 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa0a 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d122      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d11b      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0204 	mvn.w	r2, #4
 8004f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f9dd 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004f66:	e005      	b.n	8004f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f9cf 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9e0 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d122      	bne.n	8004fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11b      	bne.n	8004fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f06f 0208 	mvn.w	r2, #8
 8004f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9b3 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004fba:	e005      	b.n	8004fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f9a5 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9b6 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d122      	bne.n	8005022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d11b      	bne.n	8005022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0210 	mvn.w	r2, #16
 8004ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f989 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 800500e:	e005      	b.n	800501c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f97b 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f98c 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10e      	bne.n	800504e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0201 	mvn.w	r2, #1
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f955 	bl	80052f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d10e      	bne.n	800507a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d107      	bne.n	800507a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fb41 	bl	80056fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005088:	d10e      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fb34 	bl	8005710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f93a 	bl	8005348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0220 	mvn.w	r2, #32
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 faf4 	bl	80056e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e0dc      	b.n	80052de <HAL_TIM_ConfigClockSource+0x1d6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4b6a      	ldr	r3, [pc, #424]	; (80052e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005140:	4013      	ands	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a64      	ldr	r2, [pc, #400]	; (80052ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	f000 80a9 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005160:	4a62      	ldr	r2, [pc, #392]	; (80052ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f200 80ae 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005168:	4a61      	ldr	r2, [pc, #388]	; (80052f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	f000 80a1 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005170:	4a5f      	ldr	r2, [pc, #380]	; (80052f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	f200 80a6 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005178:	4a5e      	ldr	r2, [pc, #376]	; (80052f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f000 8099 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005180:	4a5c      	ldr	r2, [pc, #368]	; (80052f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005182:	4293      	cmp	r3, r2
 8005184:	f200 809e 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800518c:	f000 8091 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005190:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005194:	f200 8096 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519c:	f000 8089 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80051a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a4:	f200 808e 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ac:	d03e      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x124>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	f200 8087 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	f000 8086 	beq.w	80052ca <HAL_TIM_ConfigClockSource+0x1c2>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d87f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051c4:	2b70      	cmp	r3, #112	; 0x70
 80051c6:	d01a      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xf6>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d87b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051cc:	2b60      	cmp	r3, #96	; 0x60
 80051ce:	d050      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x16a>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d877      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d03c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x14a>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d873      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d058      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x18a>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d86f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d064      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d86b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d060      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d867      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d05a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80051fc:	e062      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800520e:	f000 f9bd 	bl	800558c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e04f      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800523c:	f000 f9a6 	bl	800558c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	609a      	str	r2, [r3, #8]
      break;
 8005250:	e03c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	461a      	mov	r2, r3
 8005260:	f000 f916 	bl	8005490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f970 	bl	8005550 <TIM_ITRx_SetConfig>
      break;
 8005270:	e02c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f935 	bl	80054ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2160      	movs	r1, #96	; 0x60
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f960 	bl	8005550 <TIM_ITRx_SetConfig>
      break;
 8005290:	e01c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f8f6 	bl	8005490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2140      	movs	r1, #64	; 0x40
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f950 	bl	8005550 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e00c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 f947 	bl	8005550 <TIM_ITRx_SetConfig>
      break;
 80052c2:	e003      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	e000      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80052ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	ffceff88 	.word	0xffceff88
 80052ec:	00100040 	.word	0x00100040
 80052f0:	00100030 	.word	0x00100030
 80052f4:	00100020 	.word	0x00100020

080052f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a40      	ldr	r2, [pc, #256]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d00f      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3d      	ldr	r2, [pc, #244]	; (8005474 <TIM_Base_SetConfig+0x118>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3b      	ldr	r2, [pc, #236]	; (800547c <TIM_Base_SetConfig+0x120>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3a      	ldr	r2, [pc, #232]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <TIM_Base_SetConfig+0x114>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01f      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d01b      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0x118>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d017      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <TIM_Base_SetConfig+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <TIM_Base_SetConfig+0x124>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <TIM_Base_SetConfig+0x128>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <TIM_Base_SetConfig+0x12c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a26      	ldr	r2, [pc, #152]	; (800548c <TIM_Base_SetConfig+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a10      	ldr	r2, [pc, #64]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00f      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a11      	ldr	r2, [pc, #68]	; (8005484 <TIM_Base_SetConfig+0x128>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <TIM_Base_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a0f      	ldr	r2, [pc, #60]	; (800548c <TIM_Base_SetConfig+0x130>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40010400 	.word	0x40010400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 030a 	bic.w	r3, r3, #10
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0210 	bic.w	r2, r3, #16
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	031b      	lsls	r3, r3, #12
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800552a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <TIM_ITRx_SetConfig+0x38>)
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	f043 0307 	orr.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	609a      	str	r2, [r3, #8]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	ffcfff8f 	.word	0xffcfff8f

0800558c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e06d      	b.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a30      	ldr	r2, [pc, #192]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800561e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a20      	ldr	r2, [pc, #128]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d01d      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d10c      	bne.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40001800 	.word	0x40001800
 80056e4:	40014000 	.word	0x40014000

080056e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <__cvt>:
 8005724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005726:	ed2d 8b02 	vpush	{d8}
 800572a:	eeb0 8b40 	vmov.f64	d8, d0
 800572e:	b085      	sub	sp, #20
 8005730:	4617      	mov	r7, r2
 8005732:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005734:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005736:	ee18 2a90 	vmov	r2, s17
 800573a:	f025 0520 	bic.w	r5, r5, #32
 800573e:	2a00      	cmp	r2, #0
 8005740:	bfb6      	itet	lt
 8005742:	222d      	movlt	r2, #45	; 0x2d
 8005744:	2200      	movge	r2, #0
 8005746:	eeb1 8b40 	vneglt.f64	d8, d0
 800574a:	2d46      	cmp	r5, #70	; 0x46
 800574c:	460c      	mov	r4, r1
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	d004      	beq.n	800575c <__cvt+0x38>
 8005752:	2d45      	cmp	r5, #69	; 0x45
 8005754:	d100      	bne.n	8005758 <__cvt+0x34>
 8005756:	3401      	adds	r4, #1
 8005758:	2102      	movs	r1, #2
 800575a:	e000      	b.n	800575e <__cvt+0x3a>
 800575c:	2103      	movs	r1, #3
 800575e:	ab03      	add	r3, sp, #12
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	ab02      	add	r3, sp, #8
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4622      	mov	r2, r4
 8005768:	4633      	mov	r3, r6
 800576a:	eeb0 0b48 	vmov.f64	d0, d8
 800576e:	f001 f84f 	bl	8006810 <_dtoa_r>
 8005772:	2d47      	cmp	r5, #71	; 0x47
 8005774:	d101      	bne.n	800577a <__cvt+0x56>
 8005776:	07fb      	lsls	r3, r7, #31
 8005778:	d51a      	bpl.n	80057b0 <__cvt+0x8c>
 800577a:	2d46      	cmp	r5, #70	; 0x46
 800577c:	eb00 0204 	add.w	r2, r0, r4
 8005780:	d10c      	bne.n	800579c <__cvt+0x78>
 8005782:	7803      	ldrb	r3, [r0, #0]
 8005784:	2b30      	cmp	r3, #48	; 0x30
 8005786:	d107      	bne.n	8005798 <__cvt+0x74>
 8005788:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	bf1c      	itt	ne
 8005792:	f1c4 0401 	rsbne	r4, r4, #1
 8005796:	6034      	strne	r4, [r6, #0]
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	441a      	add	r2, r3
 800579c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80057a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a4:	bf08      	it	eq
 80057a6:	9203      	streq	r2, [sp, #12]
 80057a8:	2130      	movs	r1, #48	; 0x30
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d307      	bcc.n	80057c0 <__cvt+0x9c>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057b4:	1a1b      	subs	r3, r3, r0
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	b005      	add	sp, #20
 80057ba:	ecbd 8b02 	vpop	{d8}
 80057be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c0:	1c5c      	adds	r4, r3, #1
 80057c2:	9403      	str	r4, [sp, #12]
 80057c4:	7019      	strb	r1, [r3, #0]
 80057c6:	e7f0      	b.n	80057aa <__cvt+0x86>

080057c8 <__exponent>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	4603      	mov	r3, r0
 80057cc:	2900      	cmp	r1, #0
 80057ce:	bfb8      	it	lt
 80057d0:	4249      	neglt	r1, r1
 80057d2:	f803 2b02 	strb.w	r2, [r3], #2
 80057d6:	bfb4      	ite	lt
 80057d8:	222d      	movlt	r2, #45	; 0x2d
 80057da:	222b      	movge	r2, #43	; 0x2b
 80057dc:	2909      	cmp	r1, #9
 80057de:	7042      	strb	r2, [r0, #1]
 80057e0:	dd2a      	ble.n	8005838 <__exponent+0x70>
 80057e2:	f10d 0207 	add.w	r2, sp, #7
 80057e6:	4617      	mov	r7, r2
 80057e8:	260a      	movs	r6, #10
 80057ea:	4694      	mov	ip, r2
 80057ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80057f0:	fb06 1415 	mls	r4, r6, r5, r1
 80057f4:	3430      	adds	r4, #48	; 0x30
 80057f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057fa:	460c      	mov	r4, r1
 80057fc:	2c63      	cmp	r4, #99	; 0x63
 80057fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8005802:	4629      	mov	r1, r5
 8005804:	dcf1      	bgt.n	80057ea <__exponent+0x22>
 8005806:	3130      	adds	r1, #48	; 0x30
 8005808:	f1ac 0402 	sub.w	r4, ip, #2
 800580c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005810:	1c41      	adds	r1, r0, #1
 8005812:	4622      	mov	r2, r4
 8005814:	42ba      	cmp	r2, r7
 8005816:	d30a      	bcc.n	800582e <__exponent+0x66>
 8005818:	f10d 0209 	add.w	r2, sp, #9
 800581c:	eba2 020c 	sub.w	r2, r2, ip
 8005820:	42bc      	cmp	r4, r7
 8005822:	bf88      	it	hi
 8005824:	2200      	movhi	r2, #0
 8005826:	4413      	add	r3, r2
 8005828:	1a18      	subs	r0, r3, r0
 800582a:	b003      	add	sp, #12
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005832:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005836:	e7ed      	b.n	8005814 <__exponent+0x4c>
 8005838:	2330      	movs	r3, #48	; 0x30
 800583a:	3130      	adds	r1, #48	; 0x30
 800583c:	7083      	strb	r3, [r0, #2]
 800583e:	70c1      	strb	r1, [r0, #3]
 8005840:	1d03      	adds	r3, r0, #4
 8005842:	e7f1      	b.n	8005828 <__exponent+0x60>
 8005844:	0000      	movs	r0, r0
	...

08005848 <_printf_float>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	b08b      	sub	sp, #44	; 0x2c
 800584e:	460c      	mov	r4, r1
 8005850:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005854:	4616      	mov	r6, r2
 8005856:	461f      	mov	r7, r3
 8005858:	4605      	mov	r5, r0
 800585a:	f000 fed1 	bl	8006600 <_localeconv_r>
 800585e:	f8d0 b000 	ldr.w	fp, [r0]
 8005862:	4658      	mov	r0, fp
 8005864:	f7fa fd8c 	bl	8000380 <strlen>
 8005868:	2300      	movs	r3, #0
 800586a:	9308      	str	r3, [sp, #32]
 800586c:	f8d8 3000 	ldr.w	r3, [r8]
 8005870:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	3307      	adds	r3, #7
 8005878:	f023 0307 	bic.w	r3, r3, #7
 800587c:	f103 0108 	add.w	r1, r3, #8
 8005880:	f8c8 1000 	str.w	r1, [r8]
 8005884:	ed93 0b00 	vldr	d0, [r3]
 8005888:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005ae8 <_printf_float+0x2a0>
 800588c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005890:	eeb4 7b46 	vcmp.f64	d7, d6
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800589c:	4682      	mov	sl, r0
 800589e:	dd24      	ble.n	80058ea <_printf_float+0xa2>
 80058a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	d502      	bpl.n	80058b0 <_printf_float+0x68>
 80058aa:	232d      	movs	r3, #45	; 0x2d
 80058ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b0:	498f      	ldr	r1, [pc, #572]	; (8005af0 <_printf_float+0x2a8>)
 80058b2:	4b90      	ldr	r3, [pc, #576]	; (8005af4 <_printf_float+0x2ac>)
 80058b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058b8:	bf94      	ite	ls
 80058ba:	4688      	movls	r8, r1
 80058bc:	4698      	movhi	r8, r3
 80058be:	2303      	movs	r3, #3
 80058c0:	6123      	str	r3, [r4, #16]
 80058c2:	f022 0204 	bic.w	r2, r2, #4
 80058c6:	2300      	movs	r3, #0
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	9700      	str	r7, [sp, #0]
 80058ce:	4633      	mov	r3, r6
 80058d0:	aa09      	add	r2, sp, #36	; 0x24
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f9d1 	bl	8005c7c <_printf_common>
 80058da:	3001      	adds	r0, #1
 80058dc:	f040 808a 	bne.w	80059f4 <_printf_float+0x1ac>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	b00b      	add	sp, #44	; 0x2c
 80058e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d709      	bvc.n	8005908 <_printf_float+0xc0>
 80058f4:	ee10 3a90 	vmov	r3, s1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfbc      	itt	lt
 80058fc:	232d      	movlt	r3, #45	; 0x2d
 80058fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005902:	497d      	ldr	r1, [pc, #500]	; (8005af8 <_printf_float+0x2b0>)
 8005904:	4b7d      	ldr	r3, [pc, #500]	; (8005afc <_printf_float+0x2b4>)
 8005906:	e7d5      	b.n	80058b4 <_printf_float+0x6c>
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800590e:	9104      	str	r1, [sp, #16]
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	d13c      	bne.n	800598e <_printf_float+0x146>
 8005914:	2306      	movs	r3, #6
 8005916:	6063      	str	r3, [r4, #4]
 8005918:	2300      	movs	r3, #0
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	ab08      	add	r3, sp, #32
 800591e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005926:	ab07      	add	r3, sp, #28
 8005928:	6861      	ldr	r1, [r4, #4]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	f10d 031b 	add.w	r3, sp, #27
 8005932:	4628      	mov	r0, r5
 8005934:	f7ff fef6 	bl	8005724 <__cvt>
 8005938:	9b04      	ldr	r3, [sp, #16]
 800593a:	9907      	ldr	r1, [sp, #28]
 800593c:	2b47      	cmp	r3, #71	; 0x47
 800593e:	4680      	mov	r8, r0
 8005940:	d108      	bne.n	8005954 <_printf_float+0x10c>
 8005942:	1cc8      	adds	r0, r1, #3
 8005944:	db02      	blt.n	800594c <_printf_float+0x104>
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	4299      	cmp	r1, r3
 800594a:	dd41      	ble.n	80059d0 <_printf_float+0x188>
 800594c:	f1a9 0902 	sub.w	r9, r9, #2
 8005950:	fa5f f989 	uxtb.w	r9, r9
 8005954:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005958:	d820      	bhi.n	800599c <_printf_float+0x154>
 800595a:	3901      	subs	r1, #1
 800595c:	464a      	mov	r2, r9
 800595e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005962:	9107      	str	r1, [sp, #28]
 8005964:	f7ff ff30 	bl	80057c8 <__exponent>
 8005968:	9a08      	ldr	r2, [sp, #32]
 800596a:	9004      	str	r0, [sp, #16]
 800596c:	1813      	adds	r3, r2, r0
 800596e:	2a01      	cmp	r2, #1
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	dc02      	bgt.n	800597a <_printf_float+0x132>
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	07d2      	lsls	r2, r2, #31
 8005978:	d501      	bpl.n	800597e <_printf_float+0x136>
 800597a:	3301      	adds	r3, #1
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0a2      	beq.n	80058cc <_printf_float+0x84>
 8005986:	232d      	movs	r3, #45	; 0x2d
 8005988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598c:	e79e      	b.n	80058cc <_printf_float+0x84>
 800598e:	9904      	ldr	r1, [sp, #16]
 8005990:	2947      	cmp	r1, #71	; 0x47
 8005992:	d1c1      	bne.n	8005918 <_printf_float+0xd0>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1bf      	bne.n	8005918 <_printf_float+0xd0>
 8005998:	2301      	movs	r3, #1
 800599a:	e7bc      	b.n	8005916 <_printf_float+0xce>
 800599c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059a0:	d118      	bne.n	80059d4 <_printf_float+0x18c>
 80059a2:	2900      	cmp	r1, #0
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	dd0b      	ble.n	80059c0 <_printf_float+0x178>
 80059a8:	6121      	str	r1, [r4, #16]
 80059aa:	b913      	cbnz	r3, 80059b2 <_printf_float+0x16a>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	07d0      	lsls	r0, r2, #31
 80059b0:	d502      	bpl.n	80059b8 <_printf_float+0x170>
 80059b2:	3301      	adds	r3, #1
 80059b4:	440b      	add	r3, r1
 80059b6:	6123      	str	r3, [r4, #16]
 80059b8:	2300      	movs	r3, #0
 80059ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	e7de      	b.n	800597e <_printf_float+0x136>
 80059c0:	b913      	cbnz	r3, 80059c8 <_printf_float+0x180>
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	07d2      	lsls	r2, r2, #31
 80059c6:	d501      	bpl.n	80059cc <_printf_float+0x184>
 80059c8:	3302      	adds	r3, #2
 80059ca:	e7f4      	b.n	80059b6 <_printf_float+0x16e>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e7f2      	b.n	80059b6 <_printf_float+0x16e>
 80059d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	4299      	cmp	r1, r3
 80059d8:	db05      	blt.n	80059e6 <_printf_float+0x19e>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	6121      	str	r1, [r4, #16]
 80059de:	07d8      	lsls	r0, r3, #31
 80059e0:	d5ea      	bpl.n	80059b8 <_printf_float+0x170>
 80059e2:	1c4b      	adds	r3, r1, #1
 80059e4:	e7e7      	b.n	80059b6 <_printf_float+0x16e>
 80059e6:	2900      	cmp	r1, #0
 80059e8:	bfd4      	ite	le
 80059ea:	f1c1 0202 	rsble	r2, r1, #2
 80059ee:	2201      	movgt	r2, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	e7e0      	b.n	80059b6 <_printf_float+0x16e>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	055a      	lsls	r2, r3, #21
 80059f8:	d407      	bmi.n	8005a0a <_printf_float+0x1c2>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	4642      	mov	r2, r8
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b8      	blx	r7
 8005a04:	3001      	adds	r0, #1
 8005a06:	d12a      	bne.n	8005a5e <_printf_float+0x216>
 8005a08:	e76a      	b.n	80058e0 <_printf_float+0x98>
 8005a0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a0e:	f240 80e0 	bls.w	8005bd2 <_printf_float+0x38a>
 8005a12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005a16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1e:	d133      	bne.n	8005a88 <_printf_float+0x240>
 8005a20:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <_printf_float+0x2b8>)
 8005a22:	2301      	movs	r3, #1
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f af58 	beq.w	80058e0 <_printf_float+0x98>
 8005a30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x1f6>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	07d8      	lsls	r0, r3, #31
 8005a3c:	d50f      	bpl.n	8005a5e <_printf_float+0x216>
 8005a3e:	4653      	mov	r3, sl
 8005a40:	465a      	mov	r2, fp
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f af49 	beq.w	80058e0 <_printf_float+0x98>
 8005a4e:	f04f 0800 	mov.w	r8, #0
 8005a52:	f104 091a 	add.w	r9, r4, #26
 8005a56:	9b08      	ldr	r3, [sp, #32]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	4543      	cmp	r3, r8
 8005a5c:	dc09      	bgt.n	8005a72 <_printf_float+0x22a>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	079b      	lsls	r3, r3, #30
 8005a62:	f100 8106 	bmi.w	8005c72 <_printf_float+0x42a>
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	bfb8      	it	lt
 8005a6e:	4618      	movlt	r0, r3
 8005a70:	e738      	b.n	80058e4 <_printf_float+0x9c>
 8005a72:	2301      	movs	r3, #1
 8005a74:	464a      	mov	r2, r9
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f af2f 	beq.w	80058e0 <_printf_float+0x98>
 8005a82:	f108 0801 	add.w	r8, r8, #1
 8005a86:	e7e6      	b.n	8005a56 <_printf_float+0x20e>
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc3a      	bgt.n	8005b04 <_printf_float+0x2bc>
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <_printf_float+0x2b8>)
 8005a90:	2301      	movs	r3, #1
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f43f af21 	beq.w	80058e0 <_printf_float+0x98>
 8005a9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d102      	bne.n	8005aac <_printf_float+0x264>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07d9      	lsls	r1, r3, #31
 8005aaa:	d5d8      	bpl.n	8005a5e <_printf_float+0x216>
 8005aac:	4653      	mov	r3, sl
 8005aae:	465a      	mov	r2, fp
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af12 	beq.w	80058e0 <_printf_float+0x98>
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	f104 0a1a 	add.w	sl, r4, #26
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	425b      	negs	r3, r3
 8005ac8:	454b      	cmp	r3, r9
 8005aca:	dc01      	bgt.n	8005ad0 <_printf_float+0x288>
 8005acc:	9b08      	ldr	r3, [sp, #32]
 8005ace:	e795      	b.n	80059fc <_printf_float+0x1b4>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f af00 	beq.w	80058e0 <_printf_float+0x98>
 8005ae0:	f109 0901 	add.w	r9, r9, #1
 8005ae4:	e7ee      	b.n	8005ac4 <_printf_float+0x27c>
 8005ae6:	bf00      	nop
 8005ae8:	ffffffff 	.word	0xffffffff
 8005aec:	7fefffff 	.word	0x7fefffff
 8005af0:	08009cf8 	.word	0x08009cf8
 8005af4:	08009cfc 	.word	0x08009cfc
 8005af8:	08009d00 	.word	0x08009d00
 8005afc:	08009d04 	.word	0x08009d04
 8005b00:	08009d08 	.word	0x08009d08
 8005b04:	9a08      	ldr	r2, [sp, #32]
 8005b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bfa8      	it	ge
 8005b0c:	461a      	movge	r2, r3
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	4691      	mov	r9, r2
 8005b12:	dc38      	bgt.n	8005b86 <_printf_float+0x33e>
 8005b14:	2300      	movs	r3, #0
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1c:	f104 021a 	add.w	r2, r4, #26
 8005b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b22:	9905      	ldr	r1, [sp, #20]
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	eba3 0309 	sub.w	r3, r3, r9
 8005b2a:	428b      	cmp	r3, r1
 8005b2c:	dc33      	bgt.n	8005b96 <_printf_float+0x34e>
 8005b2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	db3c      	blt.n	8005bb0 <_printf_float+0x368>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	07da      	lsls	r2, r3, #31
 8005b3a:	d439      	bmi.n	8005bb0 <_printf_float+0x368>
 8005b3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005b40:	eba2 0903 	sub.w	r9, r2, r3
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	4591      	cmp	r9, r2
 8005b4a:	bfa8      	it	ge
 8005b4c:	4691      	movge	r9, r2
 8005b4e:	f1b9 0f00 	cmp.w	r9, #0
 8005b52:	dc35      	bgt.n	8005bc0 <_printf_float+0x378>
 8005b54:	f04f 0800 	mov.w	r8, #0
 8005b58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b5c:	f104 0a1a 	add.w	sl, r4, #26
 8005b60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	eba3 0309 	sub.w	r3, r3, r9
 8005b6a:	4543      	cmp	r3, r8
 8005b6c:	f77f af77 	ble.w	8005a5e <_printf_float+0x216>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4652      	mov	r2, sl
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f aeb0 	beq.w	80058e0 <_printf_float+0x98>
 8005b80:	f108 0801 	add.w	r8, r8, #1
 8005b84:	e7ec      	b.n	8005b60 <_printf_float+0x318>
 8005b86:	4613      	mov	r3, r2
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	d1bf      	bne.n	8005b14 <_printf_float+0x2cc>
 8005b94:	e6a4      	b.n	80058e0 <_printf_float+0x98>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	9204      	str	r2, [sp, #16]
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f ae9d 	beq.w	80058e0 <_printf_float+0x98>
 8005ba6:	9b05      	ldr	r3, [sp, #20]
 8005ba8:	9a04      	ldr	r2, [sp, #16]
 8005baa:	3301      	adds	r3, #1
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	e7b7      	b.n	8005b20 <_printf_float+0x2d8>
 8005bb0:	4653      	mov	r3, sl
 8005bb2:	465a      	mov	r2, fp
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d1be      	bne.n	8005b3c <_printf_float+0x2f4>
 8005bbe:	e68f      	b.n	80058e0 <_printf_float+0x98>
 8005bc0:	9a04      	ldr	r2, [sp, #16]
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	4442      	add	r2, r8
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d1c1      	bne.n	8005b54 <_printf_float+0x30c>
 8005bd0:	e686      	b.n	80058e0 <_printf_float+0x98>
 8005bd2:	9a08      	ldr	r2, [sp, #32]
 8005bd4:	2a01      	cmp	r2, #1
 8005bd6:	dc01      	bgt.n	8005bdc <_printf_float+0x394>
 8005bd8:	07db      	lsls	r3, r3, #31
 8005bda:	d537      	bpl.n	8005c4c <_printf_float+0x404>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4642      	mov	r2, r8
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f ae7a 	beq.w	80058e0 <_printf_float+0x98>
 8005bec:	4653      	mov	r3, sl
 8005bee:	465a      	mov	r2, fp
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f ae72 	beq.w	80058e0 <_printf_float+0x98>
 8005bfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005c00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	9b08      	ldr	r3, [sp, #32]
 8005c0a:	d01a      	beq.n	8005c42 <_printf_float+0x3fa>
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	f108 0201 	add.w	r2, r8, #1
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d10e      	bne.n	8005c3a <_printf_float+0x3f2>
 8005c1c:	e660      	b.n	80058e0 <_printf_float+0x98>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae59 	beq.w	80058e0 <_printf_float+0x98>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	9b08      	ldr	r3, [sp, #32]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4543      	cmp	r3, r8
 8005c38:	dcf1      	bgt.n	8005c1e <_printf_float+0x3d6>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c40:	e6dd      	b.n	80059fe <_printf_float+0x1b6>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	f104 091a 	add.w	r9, r4, #26
 8005c4a:	e7f2      	b.n	8005c32 <_printf_float+0x3ea>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4642      	mov	r2, r8
 8005c50:	e7df      	b.n	8005c12 <_printf_float+0x3ca>
 8005c52:	2301      	movs	r3, #1
 8005c54:	464a      	mov	r2, r9
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae3f 	beq.w	80058e0 <_printf_float+0x98>
 8005c62:	f108 0801 	add.w	r8, r8, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	4543      	cmp	r3, r8
 8005c6e:	dcf0      	bgt.n	8005c52 <_printf_float+0x40a>
 8005c70:	e6f9      	b.n	8005a66 <_printf_float+0x21e>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	f104 0919 	add.w	r9, r4, #25
 8005c7a:	e7f4      	b.n	8005c66 <_printf_float+0x41e>

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d4 	beq.w	8005f22 <_printf_i+0x1ca>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80c0 	beq.w	8005f00 <_printf_i+0x1a8>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f09 	.word	0x08005f09
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005ec3 	.word	0x08005ec3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f2b 	.word	0x08005f2b
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ecb 	.word	0x08005ecb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09f      	b.n	8005f44 <_printf_i+0x1ec>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	0607      	lsls	r7, r0, #24
 8005e0a:	f103 0104 	add.w	r1, r3, #4
 8005e0e:	6029      	str	r1, [r5, #0]
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0xbe>
 8005e12:	681e      	ldr	r6, [r3, #0]
 8005e14:	e003      	b.n	8005e1e <_printf_i+0xc6>
 8005e16:	0646      	lsls	r6, r0, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0xba>
 8005e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	da03      	bge.n	8005e2a <_printf_i+0xd2>
 8005e22:	232d      	movs	r3, #45	; 0x2d
 8005e24:	4276      	negs	r6, r6
 8005e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2a:	485a      	ldr	r0, [pc, #360]	; (8005f94 <_printf_i+0x23c>)
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	e012      	b.n	8005e56 <_printf_i+0xfe>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6029      	str	r1, [r5, #0]
 8005e38:	0605      	lsls	r5, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e3c:	681e      	ldr	r6, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0xee>
 8005e40:	0641      	lsls	r1, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xe4>
 8005e44:	881e      	ldrh	r6, [r3, #0]
 8005e46:	4853      	ldr	r0, [pc, #332]	; (8005f94 <_printf_i+0x23c>)
 8005e48:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2308      	moveq	r3, #8
 8005e4e:	230a      	movne	r3, #10
 8005e50:	2100      	movs	r1, #0
 8005e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e56:	6865      	ldr	r5, [r4, #4]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	bfa2      	ittt	ge
 8005e5e:	6821      	ldrge	r1, [r4, #0]
 8005e60:	f021 0104 	bicge.w	r1, r1, #4
 8005e64:	6021      	strge	r1, [r4, #0]
 8005e66:	b90e      	cbnz	r6, 8005e6c <_printf_i+0x114>
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d04b      	beq.n	8005f04 <_printf_i+0x1ac>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e72:	fb03 6711 	mls	r7, r3, r1, r6
 8005e76:	5dc7      	ldrb	r7, [r0, r7]
 8005e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	42bb      	cmp	r3, r7
 8005e80:	460e      	mov	r6, r1
 8005e82:	d9f4      	bls.n	8005e6e <_printf_i+0x116>
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d10b      	bne.n	8005ea0 <_printf_i+0x148>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07de      	lsls	r6, r3, #31
 8005e8c:	d508      	bpl.n	8005ea0 <_printf_i+0x148>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4299      	cmp	r1, r3
 8005e94:	bfde      	ittt	le
 8005e96:	2330      	movle	r3, #48	; 0x30
 8005e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea0:	1b52      	subs	r2, r2, r5
 8005ea2:	6122      	str	r2, [r4, #16]
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	aa03      	add	r2, sp, #12
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fee4 	bl	8005c7c <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d14a      	bne.n	8005f4e <_printf_i+0x1f6>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	b004      	add	sp, #16
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f043 0320 	orr.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	4833      	ldr	r0, [pc, #204]	; (8005f98 <_printf_i+0x240>)
 8005ecc:	2778      	movs	r7, #120	; 0x78
 8005ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	6829      	ldr	r1, [r5, #0]
 8005ed6:	061f      	lsls	r7, r3, #24
 8005ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0x18c>
 8005ede:	065f      	lsls	r7, r3, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2b6      	uxthmi	r6, r6
 8005ee4:	07df      	lsls	r7, r3, #31
 8005ee6:	bf48      	it	mi
 8005ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8005eec:	6029      	str	r1, [r5, #0]
 8005eee:	bf48      	it	mi
 8005ef0:	6023      	strmi	r3, [r4, #0]
 8005ef2:	b91e      	cbnz	r6, 8005efc <_printf_i+0x1a4>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	2310      	movs	r3, #16
 8005efe:	e7a7      	b.n	8005e50 <_printf_i+0xf8>
 8005f00:	4824      	ldr	r0, [pc, #144]	; (8005f94 <_printf_i+0x23c>)
 8005f02:	e7e4      	b.n	8005ece <_printf_i+0x176>
 8005f04:	4615      	mov	r5, r2
 8005f06:	e7bd      	b.n	8005e84 <_printf_i+0x12c>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6826      	ldr	r6, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6028      	str	r0, [r5, #0]
 8005f12:	0635      	lsls	r5, r6, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1c4>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1ca>
 8005f1c:	0670      	lsls	r0, r6, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1c0>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4615      	mov	r5, r2
 8005f28:	e7bc      	b.n	8005ea4 <_printf_i+0x14c>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7fa f9d2 	bl	80002e0 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1ea>
 8005f3e:	1b40      	subs	r0, r0, r5
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4c:	e7aa      	b.n	8005ea4 <_printf_i+0x14c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ad      	beq.n	8005eb8 <_printf_i+0x160>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x232>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a6      	b.n	8005ebc <_printf_i+0x164>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09d      	beq.n	8005eb8 <_printf_i+0x160>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x216>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x20a>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x226>
 8005f92:	bf00      	nop
 8005f94:	08009d0a 	.word	0x08009d0a
 8005f98:	08009d1b 	.word	0x08009d1b

08005f9c <_scanf_float>:
 8005f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	4617      	mov	r7, r2
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	688b      	ldr	r3, [r1, #8]
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005fae:	bf83      	ittte	hi
 8005fb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005fb4:	195b      	addhi	r3, r3, r5
 8005fb6:	9302      	strhi	r3, [sp, #8]
 8005fb8:	2300      	movls	r3, #0
 8005fba:	bf86      	itte	hi
 8005fbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005fc0:	608b      	strhi	r3, [r1, #8]
 8005fc2:	9302      	strls	r3, [sp, #8]
 8005fc4:	680b      	ldr	r3, [r1, #0]
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	2500      	movs	r5, #0
 8005fca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005fce:	f84b 3b1c 	str.w	r3, [fp], #28
 8005fd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	465e      	mov	r6, fp
 8005fdc:	46aa      	mov	sl, r5
 8005fde:	46a9      	mov	r9, r5
 8005fe0:	9501      	str	r5, [sp, #4]
 8005fe2:	68a2      	ldr	r2, [r4, #8]
 8005fe4:	b152      	cbz	r2, 8005ffc <_scanf_float+0x60>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b4e      	cmp	r3, #78	; 0x4e
 8005fec:	d864      	bhi.n	80060b8 <_scanf_float+0x11c>
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d83c      	bhi.n	800606c <_scanf_float+0xd0>
 8005ff2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ff6:	b2c8      	uxtb	r0, r1
 8005ff8:	280e      	cmp	r0, #14
 8005ffa:	d93a      	bls.n	8006072 <_scanf_float+0xd6>
 8005ffc:	f1b9 0f00 	cmp.w	r9, #0
 8006000:	d003      	beq.n	800600a <_scanf_float+0x6e>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800600e:	f1ba 0f01 	cmp.w	sl, #1
 8006012:	f200 8113 	bhi.w	800623c <_scanf_float+0x2a0>
 8006016:	455e      	cmp	r6, fp
 8006018:	f200 8105 	bhi.w	8006226 <_scanf_float+0x28a>
 800601c:	2501      	movs	r5, #1
 800601e:	4628      	mov	r0, r5
 8006020:	b007      	add	sp, #28
 8006022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006026:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800602a:	2a0d      	cmp	r2, #13
 800602c:	d8e6      	bhi.n	8005ffc <_scanf_float+0x60>
 800602e:	a101      	add	r1, pc, #4	; (adr r1, 8006034 <_scanf_float+0x98>)
 8006030:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006034:	08006173 	.word	0x08006173
 8006038:	08005ffd 	.word	0x08005ffd
 800603c:	08005ffd 	.word	0x08005ffd
 8006040:	08005ffd 	.word	0x08005ffd
 8006044:	080061d3 	.word	0x080061d3
 8006048:	080061ab 	.word	0x080061ab
 800604c:	08005ffd 	.word	0x08005ffd
 8006050:	08005ffd 	.word	0x08005ffd
 8006054:	08006181 	.word	0x08006181
 8006058:	08005ffd 	.word	0x08005ffd
 800605c:	08005ffd 	.word	0x08005ffd
 8006060:	08005ffd 	.word	0x08005ffd
 8006064:	08005ffd 	.word	0x08005ffd
 8006068:	08006139 	.word	0x08006139
 800606c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006070:	e7db      	b.n	800602a <_scanf_float+0x8e>
 8006072:	290e      	cmp	r1, #14
 8006074:	d8c2      	bhi.n	8005ffc <_scanf_float+0x60>
 8006076:	a001      	add	r0, pc, #4	; (adr r0, 800607c <_scanf_float+0xe0>)
 8006078:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800607c:	0800612b 	.word	0x0800612b
 8006080:	08005ffd 	.word	0x08005ffd
 8006084:	0800612b 	.word	0x0800612b
 8006088:	080061bf 	.word	0x080061bf
 800608c:	08005ffd 	.word	0x08005ffd
 8006090:	080060d9 	.word	0x080060d9
 8006094:	08006115 	.word	0x08006115
 8006098:	08006115 	.word	0x08006115
 800609c:	08006115 	.word	0x08006115
 80060a0:	08006115 	.word	0x08006115
 80060a4:	08006115 	.word	0x08006115
 80060a8:	08006115 	.word	0x08006115
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006115 	.word	0x08006115
 80060b4:	08006115 	.word	0x08006115
 80060b8:	2b6e      	cmp	r3, #110	; 0x6e
 80060ba:	d809      	bhi.n	80060d0 <_scanf_float+0x134>
 80060bc:	2b60      	cmp	r3, #96	; 0x60
 80060be:	d8b2      	bhi.n	8006026 <_scanf_float+0x8a>
 80060c0:	2b54      	cmp	r3, #84	; 0x54
 80060c2:	d077      	beq.n	80061b4 <_scanf_float+0x218>
 80060c4:	2b59      	cmp	r3, #89	; 0x59
 80060c6:	d199      	bne.n	8005ffc <_scanf_float+0x60>
 80060c8:	2d07      	cmp	r5, #7
 80060ca:	d197      	bne.n	8005ffc <_scanf_float+0x60>
 80060cc:	2508      	movs	r5, #8
 80060ce:	e029      	b.n	8006124 <_scanf_float+0x188>
 80060d0:	2b74      	cmp	r3, #116	; 0x74
 80060d2:	d06f      	beq.n	80061b4 <_scanf_float+0x218>
 80060d4:	2b79      	cmp	r3, #121	; 0x79
 80060d6:	e7f6      	b.n	80060c6 <_scanf_float+0x12a>
 80060d8:	6821      	ldr	r1, [r4, #0]
 80060da:	05c8      	lsls	r0, r1, #23
 80060dc:	d51a      	bpl.n	8006114 <_scanf_float+0x178>
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80060e4:	6021      	str	r1, [r4, #0]
 80060e6:	f109 0901 	add.w	r9, r9, #1
 80060ea:	b11b      	cbz	r3, 80060f4 <_scanf_float+0x158>
 80060ec:	3b01      	subs	r3, #1
 80060ee:	3201      	adds	r2, #1
 80060f0:	9302      	str	r3, [sp, #8]
 80060f2:	60a2      	str	r2, [r4, #8]
 80060f4:	68a3      	ldr	r3, [r4, #8]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	60a3      	str	r3, [r4, #8]
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	3301      	adds	r3, #1
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	f340 8084 	ble.w	8006214 <_scanf_float+0x278>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	e766      	b.n	8005fe2 <_scanf_float+0x46>
 8006114:	eb1a 0f05 	cmn.w	sl, r5
 8006118:	f47f af70 	bne.w	8005ffc <_scanf_float+0x60>
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	f806 3b01 	strb.w	r3, [r6], #1
 8006128:	e7e4      	b.n	80060f4 <_scanf_float+0x158>
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	0610      	lsls	r0, r2, #24
 800612e:	f57f af65 	bpl.w	8005ffc <_scanf_float+0x60>
 8006132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006136:	e7f4      	b.n	8006122 <_scanf_float+0x186>
 8006138:	f1ba 0f00 	cmp.w	sl, #0
 800613c:	d10e      	bne.n	800615c <_scanf_float+0x1c0>
 800613e:	f1b9 0f00 	cmp.w	r9, #0
 8006142:	d10e      	bne.n	8006162 <_scanf_float+0x1c6>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800614a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800614e:	d108      	bne.n	8006162 <_scanf_float+0x1c6>
 8006150:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	f04f 0a01 	mov.w	sl, #1
 800615a:	e7e3      	b.n	8006124 <_scanf_float+0x188>
 800615c:	f1ba 0f02 	cmp.w	sl, #2
 8006160:	d055      	beq.n	800620e <_scanf_float+0x272>
 8006162:	2d01      	cmp	r5, #1
 8006164:	d002      	beq.n	800616c <_scanf_float+0x1d0>
 8006166:	2d04      	cmp	r5, #4
 8006168:	f47f af48 	bne.w	8005ffc <_scanf_float+0x60>
 800616c:	3501      	adds	r5, #1
 800616e:	b2ed      	uxtb	r5, r5
 8006170:	e7d8      	b.n	8006124 <_scanf_float+0x188>
 8006172:	f1ba 0f01 	cmp.w	sl, #1
 8006176:	f47f af41 	bne.w	8005ffc <_scanf_float+0x60>
 800617a:	f04f 0a02 	mov.w	sl, #2
 800617e:	e7d1      	b.n	8006124 <_scanf_float+0x188>
 8006180:	b97d      	cbnz	r5, 80061a2 <_scanf_float+0x206>
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	f47f af3c 	bne.w	8006002 <_scanf_float+0x66>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006190:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006194:	f47f af39 	bne.w	800600a <_scanf_float+0x6e>
 8006198:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	2501      	movs	r5, #1
 80061a0:	e7c0      	b.n	8006124 <_scanf_float+0x188>
 80061a2:	2d03      	cmp	r5, #3
 80061a4:	d0e2      	beq.n	800616c <_scanf_float+0x1d0>
 80061a6:	2d05      	cmp	r5, #5
 80061a8:	e7de      	b.n	8006168 <_scanf_float+0x1cc>
 80061aa:	2d02      	cmp	r5, #2
 80061ac:	f47f af26 	bne.w	8005ffc <_scanf_float+0x60>
 80061b0:	2503      	movs	r5, #3
 80061b2:	e7b7      	b.n	8006124 <_scanf_float+0x188>
 80061b4:	2d06      	cmp	r5, #6
 80061b6:	f47f af21 	bne.w	8005ffc <_scanf_float+0x60>
 80061ba:	2507      	movs	r5, #7
 80061bc:	e7b2      	b.n	8006124 <_scanf_float+0x188>
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	0591      	lsls	r1, r2, #22
 80061c2:	f57f af1b 	bpl.w	8005ffc <_scanf_float+0x60>
 80061c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80061d0:	e7a8      	b.n	8006124 <_scanf_float+0x188>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80061d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061dc:	d006      	beq.n	80061ec <_scanf_float+0x250>
 80061de:	0550      	lsls	r0, r2, #21
 80061e0:	f57f af0c 	bpl.w	8005ffc <_scanf_float+0x60>
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	f43f af0f 	beq.w	800600a <_scanf_float+0x6e>
 80061ec:	0591      	lsls	r1, r2, #22
 80061ee:	bf58      	it	pl
 80061f0:	9901      	ldrpl	r1, [sp, #4]
 80061f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061f6:	bf58      	it	pl
 80061f8:	eba9 0101 	subpl.w	r1, r9, r1
 80061fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006200:	bf58      	it	pl
 8006202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	f04f 0900 	mov.w	r9, #0
 800620c:	e78a      	b.n	8006124 <_scanf_float+0x188>
 800620e:	f04f 0a03 	mov.w	sl, #3
 8006212:	e787      	b.n	8006124 <_scanf_float+0x188>
 8006214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006218:	4639      	mov	r1, r7
 800621a:	4640      	mov	r0, r8
 800621c:	4798      	blx	r3
 800621e:	2800      	cmp	r0, #0
 8006220:	f43f aedf 	beq.w	8005fe2 <_scanf_float+0x46>
 8006224:	e6ea      	b.n	8005ffc <_scanf_float+0x60>
 8006226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800622a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800622e:	463a      	mov	r2, r7
 8006230:	4640      	mov	r0, r8
 8006232:	4798      	blx	r3
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	3b01      	subs	r3, #1
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	e6ec      	b.n	8006016 <_scanf_float+0x7a>
 800623c:	1e6b      	subs	r3, r5, #1
 800623e:	2b06      	cmp	r3, #6
 8006240:	d825      	bhi.n	800628e <_scanf_float+0x2f2>
 8006242:	2d02      	cmp	r5, #2
 8006244:	d836      	bhi.n	80062b4 <_scanf_float+0x318>
 8006246:	455e      	cmp	r6, fp
 8006248:	f67f aee8 	bls.w	800601c <_scanf_float+0x80>
 800624c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006250:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006254:	463a      	mov	r2, r7
 8006256:	4640      	mov	r0, r8
 8006258:	4798      	blx	r3
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	3b01      	subs	r3, #1
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	e7f1      	b.n	8006246 <_scanf_float+0x2aa>
 8006262:	9802      	ldr	r0, [sp, #8]
 8006264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006268:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800626c:	9002      	str	r0, [sp, #8]
 800626e:	463a      	mov	r2, r7
 8006270:	4640      	mov	r0, r8
 8006272:	4798      	blx	r3
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	3b01      	subs	r3, #1
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627e:	fa5f fa8a 	uxtb.w	sl, sl
 8006282:	f1ba 0f02 	cmp.w	sl, #2
 8006286:	d1ec      	bne.n	8006262 <_scanf_float+0x2c6>
 8006288:	3d03      	subs	r5, #3
 800628a:	b2ed      	uxtb	r5, r5
 800628c:	1b76      	subs	r6, r6, r5
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	05da      	lsls	r2, r3, #23
 8006292:	d52f      	bpl.n	80062f4 <_scanf_float+0x358>
 8006294:	055b      	lsls	r3, r3, #21
 8006296:	d510      	bpl.n	80062ba <_scanf_float+0x31e>
 8006298:	455e      	cmp	r6, fp
 800629a:	f67f aebf 	bls.w	800601c <_scanf_float+0x80>
 800629e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062a6:	463a      	mov	r2, r7
 80062a8:	4640      	mov	r0, r8
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	e7f1      	b.n	8006298 <_scanf_float+0x2fc>
 80062b4:	46aa      	mov	sl, r5
 80062b6:	9602      	str	r6, [sp, #8]
 80062b8:	e7df      	b.n	800627a <_scanf_float+0x2de>
 80062ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	2965      	cmp	r1, #101	; 0x65
 80062c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	d00c      	beq.n	80062e8 <_scanf_float+0x34c>
 80062ce:	2945      	cmp	r1, #69	; 0x45
 80062d0:	d00a      	beq.n	80062e8 <_scanf_float+0x34c>
 80062d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062d6:	463a      	mov	r2, r7
 80062d8:	4640      	mov	r0, r8
 80062da:	4798      	blx	r3
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	1eb5      	subs	r5, r6, #2
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062ec:	463a      	mov	r2, r7
 80062ee:	4640      	mov	r0, r8
 80062f0:	4798      	blx	r3
 80062f2:	462e      	mov	r6, r5
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	f015 0510 	ands.w	r5, r5, #16
 80062fa:	d14d      	bne.n	8006398 <_scanf_float+0x3fc>
 80062fc:	7035      	strb	r5, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	d11a      	bne.n	8006340 <_scanf_float+0x3a4>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	454b      	cmp	r3, r9
 800630e:	eba3 0209 	sub.w	r2, r3, r9
 8006312:	d122      	bne.n	800635a <_scanf_float+0x3be>
 8006314:	2200      	movs	r2, #0
 8006316:	4659      	mov	r1, fp
 8006318:	4640      	mov	r0, r8
 800631a:	f002 fb5b 	bl	80089d4 <_strtod_r>
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	6821      	ldr	r1, [r4, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f011 0f02 	tst.w	r1, #2
 8006328:	f103 0204 	add.w	r2, r3, #4
 800632c:	d020      	beq.n	8006370 <_scanf_float+0x3d4>
 800632e:	9903      	ldr	r1, [sp, #12]
 8006330:	600a      	str	r2, [r1, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	ed83 0b00 	vstr	d0, [r3]
 8006338:	68e3      	ldr	r3, [r4, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60e3      	str	r3, [r4, #12]
 800633e:	e66e      	b.n	800601e <_scanf_float+0x82>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0e6      	beq.n	8006314 <_scanf_float+0x378>
 8006346:	9905      	ldr	r1, [sp, #20]
 8006348:	230a      	movs	r3, #10
 800634a:	462a      	mov	r2, r5
 800634c:	3101      	adds	r1, #1
 800634e:	4640      	mov	r0, r8
 8006350:	f002 fbc8 	bl	8008ae4 <_strtol_r>
 8006354:	9b04      	ldr	r3, [sp, #16]
 8006356:	9e05      	ldr	r6, [sp, #20]
 8006358:	1ac2      	subs	r2, r0, r3
 800635a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800635e:	429e      	cmp	r6, r3
 8006360:	bf28      	it	cs
 8006362:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006366:	490d      	ldr	r1, [pc, #52]	; (800639c <_scanf_float+0x400>)
 8006368:	4630      	mov	r0, r6
 800636a:	f000 f8dd 	bl	8006528 <siprintf>
 800636e:	e7d1      	b.n	8006314 <_scanf_float+0x378>
 8006370:	f011 0f04 	tst.w	r1, #4
 8006374:	9903      	ldr	r1, [sp, #12]
 8006376:	600a      	str	r2, [r1, #0]
 8006378:	d1db      	bne.n	8006332 <_scanf_float+0x396>
 800637a:	eeb4 0b40 	vcmp.f64	d0, d0
 800637e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006382:	681e      	ldr	r6, [r3, #0]
 8006384:	d705      	bvc.n	8006392 <_scanf_float+0x3f6>
 8006386:	4806      	ldr	r0, [pc, #24]	; (80063a0 <_scanf_float+0x404>)
 8006388:	f000 f9b2 	bl	80066f0 <nanf>
 800638c:	ed86 0a00 	vstr	s0, [r6]
 8006390:	e7d2      	b.n	8006338 <_scanf_float+0x39c>
 8006392:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006396:	e7f9      	b.n	800638c <_scanf_float+0x3f0>
 8006398:	2500      	movs	r5, #0
 800639a:	e640      	b.n	800601e <_scanf_float+0x82>
 800639c:	08009d2c 	.word	0x08009d2c
 80063a0:	0800a0bd 	.word	0x0800a0bd

080063a4 <std>:
 80063a4:	2300      	movs	r3, #0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4604      	mov	r4, r0
 80063aa:	e9c0 3300 	strd	r3, r3, [r0]
 80063ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063b2:	6083      	str	r3, [r0, #8]
 80063b4:	8181      	strh	r1, [r0, #12]
 80063b6:	6643      	str	r3, [r0, #100]	; 0x64
 80063b8:	81c2      	strh	r2, [r0, #14]
 80063ba:	6183      	str	r3, [r0, #24]
 80063bc:	4619      	mov	r1, r3
 80063be:	2208      	movs	r2, #8
 80063c0:	305c      	adds	r0, #92	; 0x5c
 80063c2:	f000 f914 	bl	80065ee <memset>
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <std+0x58>)
 80063c8:	6263      	str	r3, [r4, #36]	; 0x24
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <std+0x5c>)
 80063cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <std+0x60>)
 80063d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <std+0x64>)
 80063d4:	6323      	str	r3, [r4, #48]	; 0x30
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <std+0x68>)
 80063d8:	6224      	str	r4, [r4, #32]
 80063da:	429c      	cmp	r4, r3
 80063dc:	d006      	beq.n	80063ec <std+0x48>
 80063de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063e2:	4294      	cmp	r4, r2
 80063e4:	d002      	beq.n	80063ec <std+0x48>
 80063e6:	33d0      	adds	r3, #208	; 0xd0
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d105      	bne.n	80063f8 <std+0x54>
 80063ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f000 b978 	b.w	80066e8 <__retarget_lock_init_recursive>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	08006569 	.word	0x08006569
 8006400:	0800658b 	.word	0x0800658b
 8006404:	080065c3 	.word	0x080065c3
 8006408:	080065e7 	.word	0x080065e7
 800640c:	2400029c 	.word	0x2400029c

08006410 <stdio_exit_handler>:
 8006410:	4a02      	ldr	r2, [pc, #8]	; (800641c <stdio_exit_handler+0xc>)
 8006412:	4903      	ldr	r1, [pc, #12]	; (8006420 <stdio_exit_handler+0x10>)
 8006414:	4803      	ldr	r0, [pc, #12]	; (8006424 <stdio_exit_handler+0x14>)
 8006416:	f000 b869 	b.w	80064ec <_fwalk_sglue>
 800641a:	bf00      	nop
 800641c:	24000010 	.word	0x24000010
 8006420:	08008ea5 	.word	0x08008ea5
 8006424:	2400001c 	.word	0x2400001c

08006428 <cleanup_stdio>:
 8006428:	6841      	ldr	r1, [r0, #4]
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <cleanup_stdio+0x34>)
 800642c:	4299      	cmp	r1, r3
 800642e:	b510      	push	{r4, lr}
 8006430:	4604      	mov	r4, r0
 8006432:	d001      	beq.n	8006438 <cleanup_stdio+0x10>
 8006434:	f002 fd36 	bl	8008ea4 <_fflush_r>
 8006438:	68a1      	ldr	r1, [r4, #8]
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <cleanup_stdio+0x38>)
 800643c:	4299      	cmp	r1, r3
 800643e:	d002      	beq.n	8006446 <cleanup_stdio+0x1e>
 8006440:	4620      	mov	r0, r4
 8006442:	f002 fd2f 	bl	8008ea4 <_fflush_r>
 8006446:	68e1      	ldr	r1, [r4, #12]
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <cleanup_stdio+0x3c>)
 800644a:	4299      	cmp	r1, r3
 800644c:	d004      	beq.n	8006458 <cleanup_stdio+0x30>
 800644e:	4620      	mov	r0, r4
 8006450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006454:	f002 bd26 	b.w	8008ea4 <_fflush_r>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	2400029c 	.word	0x2400029c
 8006460:	24000304 	.word	0x24000304
 8006464:	2400036c 	.word	0x2400036c

08006468 <global_stdio_init.part.0>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <global_stdio_init.part.0+0x30>)
 800646c:	4c0b      	ldr	r4, [pc, #44]	; (800649c <global_stdio_init.part.0+0x34>)
 800646e:	4a0c      	ldr	r2, [pc, #48]	; (80064a0 <global_stdio_init.part.0+0x38>)
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	2200      	movs	r2, #0
 8006476:	2104      	movs	r1, #4
 8006478:	f7ff ff94 	bl	80063a4 <std>
 800647c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006480:	2201      	movs	r2, #1
 8006482:	2109      	movs	r1, #9
 8006484:	f7ff ff8e 	bl	80063a4 <std>
 8006488:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800648c:	2202      	movs	r2, #2
 800648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006492:	2112      	movs	r1, #18
 8006494:	f7ff bf86 	b.w	80063a4 <std>
 8006498:	240003d4 	.word	0x240003d4
 800649c:	2400029c 	.word	0x2400029c
 80064a0:	08006411 	.word	0x08006411

080064a4 <__sfp_lock_acquire>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__sfp_lock_acquire+0x8>)
 80064a6:	f000 b920 	b.w	80066ea <__retarget_lock_acquire_recursive>
 80064aa:	bf00      	nop
 80064ac:	240003dd 	.word	0x240003dd

080064b0 <__sfp_lock_release>:
 80064b0:	4801      	ldr	r0, [pc, #4]	; (80064b8 <__sfp_lock_release+0x8>)
 80064b2:	f000 b91b 	b.w	80066ec <__retarget_lock_release_recursive>
 80064b6:	bf00      	nop
 80064b8:	240003dd 	.word	0x240003dd

080064bc <__sinit>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	4604      	mov	r4, r0
 80064c0:	f7ff fff0 	bl	80064a4 <__sfp_lock_acquire>
 80064c4:	6a23      	ldr	r3, [r4, #32]
 80064c6:	b11b      	cbz	r3, 80064d0 <__sinit+0x14>
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f7ff bff0 	b.w	80064b0 <__sfp_lock_release>
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <__sinit+0x28>)
 80064d2:	6223      	str	r3, [r4, #32]
 80064d4:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <__sinit+0x2c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f5      	bne.n	80064c8 <__sinit+0xc>
 80064dc:	f7ff ffc4 	bl	8006468 <global_stdio_init.part.0>
 80064e0:	e7f2      	b.n	80064c8 <__sinit+0xc>
 80064e2:	bf00      	nop
 80064e4:	08006429 	.word	0x08006429
 80064e8:	240003d4 	.word	0x240003d4

080064ec <_fwalk_sglue>:
 80064ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f0:	4607      	mov	r7, r0
 80064f2:	4688      	mov	r8, r1
 80064f4:	4614      	mov	r4, r2
 80064f6:	2600      	movs	r6, #0
 80064f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006500:	d505      	bpl.n	800650e <_fwalk_sglue+0x22>
 8006502:	6824      	ldr	r4, [r4, #0]
 8006504:	2c00      	cmp	r4, #0
 8006506:	d1f7      	bne.n	80064f8 <_fwalk_sglue+0xc>
 8006508:	4630      	mov	r0, r6
 800650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d907      	bls.n	8006524 <_fwalk_sglue+0x38>
 8006514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006518:	3301      	adds	r3, #1
 800651a:	d003      	beq.n	8006524 <_fwalk_sglue+0x38>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	47c0      	blx	r8
 8006522:	4306      	orrs	r6, r0
 8006524:	3568      	adds	r5, #104	; 0x68
 8006526:	e7e9      	b.n	80064fc <_fwalk_sglue+0x10>

08006528 <siprintf>:
 8006528:	b40e      	push	{r1, r2, r3}
 800652a:	b500      	push	{lr}
 800652c:	b09c      	sub	sp, #112	; 0x70
 800652e:	ab1d      	add	r3, sp, #116	; 0x74
 8006530:	9002      	str	r0, [sp, #8]
 8006532:	9006      	str	r0, [sp, #24]
 8006534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006538:	4809      	ldr	r0, [pc, #36]	; (8006560 <siprintf+0x38>)
 800653a:	9107      	str	r1, [sp, #28]
 800653c:	9104      	str	r1, [sp, #16]
 800653e:	4909      	ldr	r1, [pc, #36]	; (8006564 <siprintf+0x3c>)
 8006540:	f853 2b04 	ldr.w	r2, [r3], #4
 8006544:	9105      	str	r1, [sp, #20]
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	a902      	add	r1, sp, #8
 800654c:	f002 fb26 	bl	8008b9c <_svfiprintf_r>
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	b01c      	add	sp, #112	; 0x70
 8006558:	f85d eb04 	ldr.w	lr, [sp], #4
 800655c:	b003      	add	sp, #12
 800655e:	4770      	bx	lr
 8006560:	24000068 	.word	0x24000068
 8006564:	ffff0208 	.word	0xffff0208

08006568 <__sread>:
 8006568:	b510      	push	{r4, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006570:	f000 f86c 	bl	800664c <_read_r>
 8006574:	2800      	cmp	r0, #0
 8006576:	bfab      	itete	ge
 8006578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800657a:	89a3      	ldrhlt	r3, [r4, #12]
 800657c:	181b      	addge	r3, r3, r0
 800657e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006582:	bfac      	ite	ge
 8006584:	6563      	strge	r3, [r4, #84]	; 0x54
 8006586:	81a3      	strhlt	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__swrite>:
 800658a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658e:	461f      	mov	r7, r3
 8006590:	898b      	ldrh	r3, [r1, #12]
 8006592:	05db      	lsls	r3, r3, #23
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4616      	mov	r6, r2
 800659a:	d505      	bpl.n	80065a8 <__swrite+0x1e>
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	2302      	movs	r3, #2
 80065a2:	2200      	movs	r2, #0
 80065a4:	f000 f840 	bl	8006628 <_lseek_r>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	4632      	mov	r2, r6
 80065b6:	463b      	mov	r3, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	f000 b857 	b.w	8006670 <_write_r>

080065c2 <__sseek>:
 80065c2:	b510      	push	{r4, lr}
 80065c4:	460c      	mov	r4, r1
 80065c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ca:	f000 f82d 	bl	8006628 <_lseek_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	bf15      	itete	ne
 80065d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065de:	81a3      	strheq	r3, [r4, #12]
 80065e0:	bf18      	it	ne
 80065e2:	81a3      	strhne	r3, [r4, #12]
 80065e4:	bd10      	pop	{r4, pc}

080065e6 <__sclose>:
 80065e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ea:	f000 b80d 	b.w	8006608 <_close_r>

080065ee <memset>:
 80065ee:	4402      	add	r2, r0
 80065f0:	4603      	mov	r3, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	f803 1b01 	strb.w	r1, [r3], #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <_localeconv_r>:
 8006600:	4800      	ldr	r0, [pc, #0]	; (8006604 <_localeconv_r+0x4>)
 8006602:	4770      	bx	lr
 8006604:	2400015c 	.word	0x2400015c

08006608 <_close_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	; (8006624 <_close_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fa fd5d 	bl	80010d2 <_close>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_close_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_close_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	240003d8 	.word	0x240003d8

08006628 <_lseek_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	; (8006648 <_lseek_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fa fd72 	bl	8001120 <_lseek>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_lseek_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_lseek_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	240003d8 	.word	0x240003d8

0800664c <_read_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_read_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fd00 	bl	8001060 <_read>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_read_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_read_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	240003d8 	.word	0x240003d8

08006670 <_write_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	; (8006690 <_write_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fa fd0b 	bl	800109a <_write>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_write_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_write_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	240003d8 	.word	0x240003d8

08006694 <__errno>:
 8006694:	4b01      	ldr	r3, [pc, #4]	; (800669c <__errno+0x8>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	24000068 	.word	0x24000068

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4d0d      	ldr	r5, [pc, #52]	; (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	; (80066dc <__libc_init_array+0x3c>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2600      	movs	r6, #0
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4d0b      	ldr	r5, [pc, #44]	; (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	; (80066e4 <__libc_init_array+0x44>)
 80066b4:	f003 fb0c 	bl	8009cd0 <_init>
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2600      	movs	r6, #0
 80066be:	42a6      	cmp	r6, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c8:	4798      	blx	r3
 80066ca:	3601      	adds	r6, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d2:	4798      	blx	r3
 80066d4:	3601      	adds	r6, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	0800a120 	.word	0x0800a120
 80066dc:	0800a120 	.word	0x0800a120
 80066e0:	0800a120 	.word	0x0800a120
 80066e4:	0800a124 	.word	0x0800a124

080066e8 <__retarget_lock_init_recursive>:
 80066e8:	4770      	bx	lr

080066ea <__retarget_lock_acquire_recursive>:
 80066ea:	4770      	bx	lr

080066ec <__retarget_lock_release_recursive>:
 80066ec:	4770      	bx	lr
	...

080066f0 <nanf>:
 80066f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066f8 <nanf+0x8>
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	7fc00000 	.word	0x7fc00000

080066fc <quorem>:
 80066fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	6903      	ldr	r3, [r0, #16]
 8006702:	690c      	ldr	r4, [r1, #16]
 8006704:	42a3      	cmp	r3, r4
 8006706:	4607      	mov	r7, r0
 8006708:	db7e      	blt.n	8006808 <quorem+0x10c>
 800670a:	3c01      	subs	r4, #1
 800670c:	f101 0814 	add.w	r8, r1, #20
 8006710:	f100 0514 	add.w	r5, r0, #20
 8006714:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800671e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006722:	3301      	adds	r3, #1
 8006724:	429a      	cmp	r2, r3
 8006726:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800672a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800672e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006732:	d331      	bcc.n	8006798 <quorem+0x9c>
 8006734:	f04f 0e00 	mov.w	lr, #0
 8006738:	4640      	mov	r0, r8
 800673a:	46ac      	mov	ip, r5
 800673c:	46f2      	mov	sl, lr
 800673e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006742:	b293      	uxth	r3, r2
 8006744:	fb06 e303 	mla	r3, r6, r3, lr
 8006748:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800674c:	0c1a      	lsrs	r2, r3, #16
 800674e:	b29b      	uxth	r3, r3
 8006750:	ebaa 0303 	sub.w	r3, sl, r3
 8006754:	f8dc a000 	ldr.w	sl, [ip]
 8006758:	fa13 f38a 	uxtah	r3, r3, sl
 800675c:	fb06 220e 	mla	r2, r6, lr, r2
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006768:	b292      	uxth	r2, r2
 800676a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800676e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006772:	f8bd 3000 	ldrh.w	r3, [sp]
 8006776:	4581      	cmp	r9, r0
 8006778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800677c:	f84c 3b04 	str.w	r3, [ip], #4
 8006780:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006784:	d2db      	bcs.n	800673e <quorem+0x42>
 8006786:	f855 300b 	ldr.w	r3, [r5, fp]
 800678a:	b92b      	cbnz	r3, 8006798 <quorem+0x9c>
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	3b04      	subs	r3, #4
 8006790:	429d      	cmp	r5, r3
 8006792:	461a      	mov	r2, r3
 8006794:	d32c      	bcc.n	80067f0 <quorem+0xf4>
 8006796:	613c      	str	r4, [r7, #16]
 8006798:	4638      	mov	r0, r7
 800679a:	f001 f96b 	bl	8007a74 <__mcmp>
 800679e:	2800      	cmp	r0, #0
 80067a0:	db22      	blt.n	80067e8 <quorem+0xec>
 80067a2:	3601      	adds	r6, #1
 80067a4:	4629      	mov	r1, r5
 80067a6:	2000      	movs	r0, #0
 80067a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80067ac:	f8d1 c000 	ldr.w	ip, [r1]
 80067b0:	b293      	uxth	r3, r2
 80067b2:	1ac3      	subs	r3, r0, r3
 80067b4:	0c12      	lsrs	r2, r2, #16
 80067b6:	fa13 f38c 	uxtah	r3, r3, ip
 80067ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80067be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c8:	45c1      	cmp	r9, r8
 80067ca:	f841 3b04 	str.w	r3, [r1], #4
 80067ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067d2:	d2e9      	bcs.n	80067a8 <quorem+0xac>
 80067d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067dc:	b922      	cbnz	r2, 80067e8 <quorem+0xec>
 80067de:	3b04      	subs	r3, #4
 80067e0:	429d      	cmp	r5, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	d30a      	bcc.n	80067fc <quorem+0x100>
 80067e6:	613c      	str	r4, [r7, #16]
 80067e8:	4630      	mov	r0, r6
 80067ea:	b003      	add	sp, #12
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	3b04      	subs	r3, #4
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1ce      	bne.n	8006796 <quorem+0x9a>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	e7c9      	b.n	8006790 <quorem+0x94>
 80067fc:	6812      	ldr	r2, [r2, #0]
 80067fe:	3b04      	subs	r3, #4
 8006800:	2a00      	cmp	r2, #0
 8006802:	d1f0      	bne.n	80067e6 <quorem+0xea>
 8006804:	3c01      	subs	r4, #1
 8006806:	e7eb      	b.n	80067e0 <quorem+0xe4>
 8006808:	2000      	movs	r0, #0
 800680a:	e7ee      	b.n	80067ea <quorem+0xee>
 800680c:	0000      	movs	r0, r0
	...

08006810 <_dtoa_r>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	ed2d 8b02 	vpush	{d8}
 8006818:	69c5      	ldr	r5, [r0, #28]
 800681a:	b091      	sub	sp, #68	; 0x44
 800681c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006820:	ec59 8b10 	vmov	r8, r9, d0
 8006824:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006826:	9106      	str	r1, [sp, #24]
 8006828:	4606      	mov	r6, r0
 800682a:	9208      	str	r2, [sp, #32]
 800682c:	930c      	str	r3, [sp, #48]	; 0x30
 800682e:	b975      	cbnz	r5, 800684e <_dtoa_r+0x3e>
 8006830:	2010      	movs	r0, #16
 8006832:	f000 fda5 	bl	8007380 <malloc>
 8006836:	4602      	mov	r2, r0
 8006838:	61f0      	str	r0, [r6, #28]
 800683a:	b920      	cbnz	r0, 8006846 <_dtoa_r+0x36>
 800683c:	4ba6      	ldr	r3, [pc, #664]	; (8006ad8 <_dtoa_r+0x2c8>)
 800683e:	21ef      	movs	r1, #239	; 0xef
 8006840:	48a6      	ldr	r0, [pc, #664]	; (8006adc <_dtoa_r+0x2cc>)
 8006842:	f002 fba9 	bl	8008f98 <__assert_func>
 8006846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800684a:	6005      	str	r5, [r0, #0]
 800684c:	60c5      	str	r5, [r0, #12]
 800684e:	69f3      	ldr	r3, [r6, #28]
 8006850:	6819      	ldr	r1, [r3, #0]
 8006852:	b151      	cbz	r1, 800686a <_dtoa_r+0x5a>
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	604a      	str	r2, [r1, #4]
 8006858:	2301      	movs	r3, #1
 800685a:	4093      	lsls	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
 800685e:	4630      	mov	r0, r6
 8006860:	f000 fe82 	bl	8007568 <_Bfree>
 8006864:	69f3      	ldr	r3, [r6, #28]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f1b9 0300 	subs.w	r3, r9, #0
 800686e:	bfbb      	ittet	lt
 8006870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006874:	9303      	strlt	r3, [sp, #12]
 8006876:	2300      	movge	r3, #0
 8006878:	2201      	movlt	r2, #1
 800687a:	bfac      	ite	ge
 800687c:	6023      	strge	r3, [r4, #0]
 800687e:	6022      	strlt	r2, [r4, #0]
 8006880:	4b97      	ldr	r3, [pc, #604]	; (8006ae0 <_dtoa_r+0x2d0>)
 8006882:	9c03      	ldr	r4, [sp, #12]
 8006884:	43a3      	bics	r3, r4
 8006886:	d11c      	bne.n	80068c2 <_dtoa_r+0xb2>
 8006888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800688a:	f242 730f 	movw	r3, #9999	; 0x270f
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006894:	ea53 0308 	orrs.w	r3, r3, r8
 8006898:	f000 84fb 	beq.w	8007292 <_dtoa_r+0xa82>
 800689c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800689e:	b963      	cbnz	r3, 80068ba <_dtoa_r+0xaa>
 80068a0:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <_dtoa_r+0x2d4>)
 80068a2:	e020      	b.n	80068e6 <_dtoa_r+0xd6>
 80068a4:	4b90      	ldr	r3, [pc, #576]	; (8006ae8 <_dtoa_r+0x2d8>)
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	3308      	adds	r3, #8
 80068aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	9801      	ldr	r0, [sp, #4]
 80068b0:	b011      	add	sp, #68	; 0x44
 80068b2:	ecbd 8b02 	vpop	{d8}
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	4b8a      	ldr	r3, [pc, #552]	; (8006ae4 <_dtoa_r+0x2d4>)
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	3303      	adds	r3, #3
 80068c0:	e7f3      	b.n	80068aa <_dtoa_r+0x9a>
 80068c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80068c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80068ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ce:	d10c      	bne.n	80068ea <_dtoa_r+0xda>
 80068d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068d2:	2301      	movs	r3, #1
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 84d7 	beq.w	800728c <_dtoa_r+0xa7c>
 80068de:	4b83      	ldr	r3, [pc, #524]	; (8006aec <_dtoa_r+0x2dc>)
 80068e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	e7e1      	b.n	80068ae <_dtoa_r+0x9e>
 80068ea:	aa0e      	add	r2, sp, #56	; 0x38
 80068ec:	a90f      	add	r1, sp, #60	; 0x3c
 80068ee:	4630      	mov	r0, r6
 80068f0:	eeb0 0b48 	vmov.f64	d0, d8
 80068f4:	f001 f9d4 	bl	8007ca0 <__d2b>
 80068f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80068fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068fe:	4605      	mov	r5, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d046      	beq.n	8006992 <_dtoa_r+0x182>
 8006904:	eeb0 7b48 	vmov.f64	d7, d8
 8006908:	ee18 1a90 	vmov	r1, s17
 800690c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006910:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006914:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800691c:	2000      	movs	r0, #0
 800691e:	ee07 1a90 	vmov	s15, r1
 8006922:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006926:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006ac0 <_dtoa_r+0x2b0>
 800692a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800692e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006ac8 <_dtoa_r+0x2b8>
 8006932:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006936:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006ad0 <_dtoa_r+0x2c0>
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006942:	eeb0 7b46 	vmov.f64	d7, d6
 8006946:	eea4 7b05 	vfma.f64	d7, d4, d5
 800694a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800694e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	ee16 ba90 	vmov	fp, s13
 800695a:	9009      	str	r0, [sp, #36]	; 0x24
 800695c:	d508      	bpl.n	8006970 <_dtoa_r+0x160>
 800695e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006962:	eeb4 6b47 	vcmp.f64	d6, d7
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	bf18      	it	ne
 800696c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006970:	f1bb 0f16 	cmp.w	fp, #22
 8006974:	d82b      	bhi.n	80069ce <_dtoa_r+0x1be>
 8006976:	495e      	ldr	r1, [pc, #376]	; (8006af0 <_dtoa_r+0x2e0>)
 8006978:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800697c:	ed91 7b00 	vldr	d7, [r1]
 8006980:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006988:	d501      	bpl.n	800698e <_dtoa_r+0x17e>
 800698a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800698e:	2100      	movs	r1, #0
 8006990:	e01e      	b.n	80069d0 <_dtoa_r+0x1c0>
 8006992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006994:	4413      	add	r3, r2
 8006996:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800699a:	2920      	cmp	r1, #32
 800699c:	bfc1      	itttt	gt
 800699e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80069a2:	408c      	lslgt	r4, r1
 80069a4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80069a8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80069ac:	bfd6      	itet	le
 80069ae:	f1c1 0120 	rsble	r1, r1, #32
 80069b2:	4321      	orrgt	r1, r4
 80069b4:	fa08 f101 	lslle.w	r1, r8, r1
 80069b8:	ee07 1a90 	vmov	s15, r1
 80069bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80069c0:	3b01      	subs	r3, #1
 80069c2:	ee17 1a90 	vmov	r1, s15
 80069c6:	2001      	movs	r0, #1
 80069c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80069cc:	e7a7      	b.n	800691e <_dtoa_r+0x10e>
 80069ce:	2101      	movs	r1, #1
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	1e53      	subs	r3, r2, #1
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	bf45      	ittet	mi
 80069d8:	f1c2 0301 	rsbmi	r3, r2, #1
 80069dc:	9304      	strmi	r3, [sp, #16]
 80069de:	2300      	movpl	r3, #0
 80069e0:	2300      	movmi	r3, #0
 80069e2:	bf4c      	ite	mi
 80069e4:	9305      	strmi	r3, [sp, #20]
 80069e6:	9304      	strpl	r3, [sp, #16]
 80069e8:	f1bb 0f00 	cmp.w	fp, #0
 80069ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80069ee:	db18      	blt.n	8006a22 <_dtoa_r+0x212>
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80069f6:	445b      	add	r3, fp
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9a06      	ldr	r2, [sp, #24]
 80069fe:	2a09      	cmp	r2, #9
 8006a00:	d848      	bhi.n	8006a94 <_dtoa_r+0x284>
 8006a02:	2a05      	cmp	r2, #5
 8006a04:	bfc4      	itt	gt
 8006a06:	3a04      	subgt	r2, #4
 8006a08:	9206      	strgt	r2, [sp, #24]
 8006a0a:	9a06      	ldr	r2, [sp, #24]
 8006a0c:	f1a2 0202 	sub.w	r2, r2, #2
 8006a10:	bfcc      	ite	gt
 8006a12:	2400      	movgt	r4, #0
 8006a14:	2401      	movle	r4, #1
 8006a16:	2a03      	cmp	r2, #3
 8006a18:	d847      	bhi.n	8006aaa <_dtoa_r+0x29a>
 8006a1a:	e8df f002 	tbb	[pc, r2]
 8006a1e:	2d0b      	.short	0x2d0b
 8006a20:	392b      	.short	0x392b
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	2200      	movs	r2, #0
 8006a26:	eba3 030b 	sub.w	r3, r3, fp
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a2e:	f1cb 0300 	rsb	r3, fp, #0
 8006a32:	e7e3      	b.n	80069fc <_dtoa_r+0x1ec>
 8006a34:	2200      	movs	r2, #0
 8006a36:	9207      	str	r2, [sp, #28]
 8006a38:	9a08      	ldr	r2, [sp, #32]
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	dc38      	bgt.n	8006ab0 <_dtoa_r+0x2a0>
 8006a3e:	f04f 0a01 	mov.w	sl, #1
 8006a42:	46d1      	mov	r9, sl
 8006a44:	4652      	mov	r2, sl
 8006a46:	f8cd a020 	str.w	sl, [sp, #32]
 8006a4a:	69f7      	ldr	r7, [r6, #28]
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	2004      	movs	r0, #4
 8006a50:	f100 0c14 	add.w	ip, r0, #20
 8006a54:	4594      	cmp	ip, r2
 8006a56:	d930      	bls.n	8006aba <_dtoa_r+0x2aa>
 8006a58:	6079      	str	r1, [r7, #4]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a5e:	f000 fd43 	bl	80074e8 <_Balloc>
 8006a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a64:	9001      	str	r0, [sp, #4]
 8006a66:	4602      	mov	r2, r0
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d145      	bne.n	8006af8 <_dtoa_r+0x2e8>
 8006a6c:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <_dtoa_r+0x2e4>)
 8006a6e:	f240 11af 	movw	r1, #431	; 0x1af
 8006a72:	e6e5      	b.n	8006840 <_dtoa_r+0x30>
 8006a74:	2201      	movs	r2, #1
 8006a76:	e7de      	b.n	8006a36 <_dtoa_r+0x226>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	9207      	str	r2, [sp, #28]
 8006a7c:	9a08      	ldr	r2, [sp, #32]
 8006a7e:	eb0b 0a02 	add.w	sl, fp, r2
 8006a82:	f10a 0901 	add.w	r9, sl, #1
 8006a86:	464a      	mov	r2, r9
 8006a88:	2a01      	cmp	r2, #1
 8006a8a:	bfb8      	it	lt
 8006a8c:	2201      	movlt	r2, #1
 8006a8e:	e7dc      	b.n	8006a4a <_dtoa_r+0x23a>
 8006a90:	2201      	movs	r2, #1
 8006a92:	e7f2      	b.n	8006a7a <_dtoa_r+0x26a>
 8006a94:	2401      	movs	r4, #1
 8006a96:	2200      	movs	r2, #0
 8006a98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	46d1      	mov	r9, sl
 8006aa4:	2212      	movs	r2, #18
 8006aa6:	9108      	str	r1, [sp, #32]
 8006aa8:	e7cf      	b.n	8006a4a <_dtoa_r+0x23a>
 8006aaa:	2201      	movs	r2, #1
 8006aac:	9207      	str	r2, [sp, #28]
 8006aae:	e7f5      	b.n	8006a9c <_dtoa_r+0x28c>
 8006ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ab4:	46d1      	mov	r9, sl
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	e7c7      	b.n	8006a4a <_dtoa_r+0x23a>
 8006aba:	3101      	adds	r1, #1
 8006abc:	0040      	lsls	r0, r0, #1
 8006abe:	e7c7      	b.n	8006a50 <_dtoa_r+0x240>
 8006ac0:	636f4361 	.word	0x636f4361
 8006ac4:	3fd287a7 	.word	0x3fd287a7
 8006ac8:	8b60c8b3 	.word	0x8b60c8b3
 8006acc:	3fc68a28 	.word	0x3fc68a28
 8006ad0:	509f79fb 	.word	0x509f79fb
 8006ad4:	3fd34413 	.word	0x3fd34413
 8006ad8:	08009d3e 	.word	0x08009d3e
 8006adc:	08009d55 	.word	0x08009d55
 8006ae0:	7ff00000 	.word	0x7ff00000
 8006ae4:	08009d3a 	.word	0x08009d3a
 8006ae8:	08009d31 	.word	0x08009d31
 8006aec:	08009d09 	.word	0x08009d09
 8006af0:	08009e40 	.word	0x08009e40
 8006af4:	08009dad 	.word	0x08009dad
 8006af8:	69f2      	ldr	r2, [r6, #28]
 8006afa:	9901      	ldr	r1, [sp, #4]
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	f1b9 0f0e 	cmp.w	r9, #14
 8006b02:	d86c      	bhi.n	8006bde <_dtoa_r+0x3ce>
 8006b04:	2c00      	cmp	r4, #0
 8006b06:	d06a      	beq.n	8006bde <_dtoa_r+0x3ce>
 8006b08:	f1bb 0f00 	cmp.w	fp, #0
 8006b0c:	f340 80a0 	ble.w	8006c50 <_dtoa_r+0x440>
 8006b10:	4ac1      	ldr	r2, [pc, #772]	; (8006e18 <_dtoa_r+0x608>)
 8006b12:	f00b 010f 	and.w	r1, fp, #15
 8006b16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006b1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b1e:	ed92 7b00 	vldr	d7, [r2]
 8006b22:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006b26:	f000 8087 	beq.w	8006c38 <_dtoa_r+0x428>
 8006b2a:	49bc      	ldr	r1, [pc, #752]	; (8006e1c <_dtoa_r+0x60c>)
 8006b2c:	ed91 6b08 	vldr	d6, [r1, #32]
 8006b30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006b38:	f002 020f 	and.w	r2, r2, #15
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	48b7      	ldr	r0, [pc, #732]	; (8006e1c <_dtoa_r+0x60c>)
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	d17b      	bne.n	8006c3c <_dtoa_r+0x42c>
 8006b44:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	f000 80a0 	beq.w	8006c9c <_dtoa_r+0x48c>
 8006b5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006b60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b68:	f140 8098 	bpl.w	8006c9c <_dtoa_r+0x48c>
 8006b6c:	f1b9 0f00 	cmp.w	r9, #0
 8006b70:	f000 8094 	beq.w	8006c9c <_dtoa_r+0x48c>
 8006b74:	f1ba 0f00 	cmp.w	sl, #0
 8006b78:	dd2f      	ble.n	8006bda <_dtoa_r+0x3ca>
 8006b7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006b7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b86:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006b8a:	3101      	adds	r1, #1
 8006b8c:	4654      	mov	r4, sl
 8006b8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b92:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006b96:	ee07 1a90 	vmov	s15, r1
 8006b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b9e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006ba2:	ee15 7a90 	vmov	r7, s11
 8006ba6:	ec51 0b15 	vmov	r0, r1, d5
 8006baa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d177      	bne.n	8006ca2 <_dtoa_r+0x492>
 8006bb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006bb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006bba:	ec41 0b17 	vmov	d7, r0, r1
 8006bbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc6:	f300 826a 	bgt.w	800709e <_dtoa_r+0x88e>
 8006bca:	eeb1 7b47 	vneg.f64	d7, d7
 8006bce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd6:	f100 8260 	bmi.w	800709a <_dtoa_r+0x88a>
 8006bda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	f2c0 811d 	blt.w	8006e20 <_dtoa_r+0x610>
 8006be6:	f1bb 0f0e 	cmp.w	fp, #14
 8006bea:	f300 8119 	bgt.w	8006e20 <_dtoa_r+0x610>
 8006bee:	4b8a      	ldr	r3, [pc, #552]	; (8006e18 <_dtoa_r+0x608>)
 8006bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bf4:	ed93 6b00 	vldr	d6, [r3]
 8006bf8:	9b08      	ldr	r3, [sp, #32]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f280 80b7 	bge.w	8006d6e <_dtoa_r+0x55e>
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	f300 80b3 	bgt.w	8006d6e <_dtoa_r+0x55e>
 8006c08:	f040 8246 	bne.w	8007098 <_dtoa_r+0x888>
 8006c0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006c10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	464c      	mov	r4, r9
 8006c22:	464f      	mov	r7, r9
 8006c24:	f280 821c 	bge.w	8007060 <_dtoa_r+0x850>
 8006c28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c2c:	2331      	movs	r3, #49	; 0x31
 8006c2e:	f808 3b01 	strb.w	r3, [r8], #1
 8006c32:	f10b 0b01 	add.w	fp, fp, #1
 8006c36:	e218      	b.n	800706a <_dtoa_r+0x85a>
 8006c38:	2102      	movs	r1, #2
 8006c3a:	e780      	b.n	8006b3e <_dtoa_r+0x32e>
 8006c3c:	07d4      	lsls	r4, r2, #31
 8006c3e:	d504      	bpl.n	8006c4a <_dtoa_r+0x43a>
 8006c40:	ed90 6b00 	vldr	d6, [r0]
 8006c44:	3101      	adds	r1, #1
 8006c46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c4a:	1052      	asrs	r2, r2, #1
 8006c4c:	3008      	adds	r0, #8
 8006c4e:	e777      	b.n	8006b40 <_dtoa_r+0x330>
 8006c50:	d022      	beq.n	8006c98 <_dtoa_r+0x488>
 8006c52:	f1cb 0200 	rsb	r2, fp, #0
 8006c56:	4970      	ldr	r1, [pc, #448]	; (8006e18 <_dtoa_r+0x608>)
 8006c58:	f002 000f 	and.w	r0, r2, #15
 8006c5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006c60:	ed91 7b00 	vldr	d7, [r1]
 8006c64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006c68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c6c:	486b      	ldr	r0, [pc, #428]	; (8006e1c <_dtoa_r+0x60c>)
 8006c6e:	1112      	asrs	r2, r2, #4
 8006c70:	2400      	movs	r4, #0
 8006c72:	2102      	movs	r1, #2
 8006c74:	b92a      	cbnz	r2, 8006c82 <_dtoa_r+0x472>
 8006c76:	2c00      	cmp	r4, #0
 8006c78:	f43f af6a 	beq.w	8006b50 <_dtoa_r+0x340>
 8006c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c80:	e766      	b.n	8006b50 <_dtoa_r+0x340>
 8006c82:	07d7      	lsls	r7, r2, #31
 8006c84:	d505      	bpl.n	8006c92 <_dtoa_r+0x482>
 8006c86:	ed90 6b00 	vldr	d6, [r0]
 8006c8a:	3101      	adds	r1, #1
 8006c8c:	2401      	movs	r4, #1
 8006c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c92:	1052      	asrs	r2, r2, #1
 8006c94:	3008      	adds	r0, #8
 8006c96:	e7ed      	b.n	8006c74 <_dtoa_r+0x464>
 8006c98:	2102      	movs	r1, #2
 8006c9a:	e759      	b.n	8006b50 <_dtoa_r+0x340>
 8006c9c:	465a      	mov	r2, fp
 8006c9e:	464c      	mov	r4, r9
 8006ca0:	e775      	b.n	8006b8e <_dtoa_r+0x37e>
 8006ca2:	ec41 0b17 	vmov	d7, r0, r1
 8006ca6:	495c      	ldr	r1, [pc, #368]	; (8006e18 <_dtoa_r+0x608>)
 8006ca8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006cac:	ed11 4b02 	vldr	d4, [r1, #-8]
 8006cb0:	9901      	ldr	r1, [sp, #4]
 8006cb2:	440c      	add	r4, r1
 8006cb4:	9907      	ldr	r1, [sp, #28]
 8006cb6:	b351      	cbz	r1, 8006d0e <_dtoa_r+0x4fe>
 8006cb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006cbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006cc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006cc4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006cc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006ccc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006cd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006cd4:	ee14 1a90 	vmov	r1, s9
 8006cd8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006cdc:	3130      	adds	r1, #48	; 0x30
 8006cde:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ce2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cea:	f808 1b01 	strb.w	r1, [r8], #1
 8006cee:	d439      	bmi.n	8006d64 <_dtoa_r+0x554>
 8006cf0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006cf4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfc:	d472      	bmi.n	8006de4 <_dtoa_r+0x5d4>
 8006cfe:	45a0      	cmp	r8, r4
 8006d00:	f43f af6b 	beq.w	8006bda <_dtoa_r+0x3ca>
 8006d04:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006d08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d0c:	e7e0      	b.n	8006cd0 <_dtoa_r+0x4c0>
 8006d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d16:	4620      	mov	r0, r4
 8006d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006d1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006d20:	ee14 1a90 	vmov	r1, s9
 8006d24:	3130      	adds	r1, #48	; 0x30
 8006d26:	f808 1b01 	strb.w	r1, [r8], #1
 8006d2a:	45a0      	cmp	r8, r4
 8006d2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006d30:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006d34:	d118      	bne.n	8006d68 <_dtoa_r+0x558>
 8006d36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006d3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006d3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	dc4d      	bgt.n	8006de4 <_dtoa_r+0x5d4>
 8006d48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006d4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	f57f af41 	bpl.w	8006bda <_dtoa_r+0x3ca>
 8006d58:	4680      	mov	r8, r0
 8006d5a:	3801      	subs	r0, #1
 8006d5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d0f9      	beq.n	8006d58 <_dtoa_r+0x548>
 8006d64:	4693      	mov	fp, r2
 8006d66:	e02a      	b.n	8006dbe <_dtoa_r+0x5ae>
 8006d68:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d6c:	e7d6      	b.n	8006d1c <_dtoa_r+0x50c>
 8006d6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006d76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006d7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006d82:	ee15 3a10 	vmov	r3, s10
 8006d86:	3330      	adds	r3, #48	; 0x30
 8006d88:	f808 3b01 	strb.w	r3, [r8], #1
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	eba8 0303 	sub.w	r3, r8, r3
 8006d92:	4599      	cmp	r9, r3
 8006d94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006d98:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006d9c:	d133      	bne.n	8006e06 <_dtoa_r+0x5f6>
 8006d9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006da2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006daa:	dc1a      	bgt.n	8006de2 <_dtoa_r+0x5d2>
 8006dac:	eeb4 7b46 	vcmp.f64	d7, d6
 8006db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db4:	d103      	bne.n	8006dbe <_dtoa_r+0x5ae>
 8006db6:	ee15 3a10 	vmov	r3, s10
 8006dba:	07d9      	lsls	r1, r3, #31
 8006dbc:	d411      	bmi.n	8006de2 <_dtoa_r+0x5d2>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f000 fbd1 	bl	8007568 <_Bfree>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dca:	f888 3000 	strb.w	r3, [r8]
 8006dce:	f10b 0301 	add.w	r3, fp, #1
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f43f ad69 	beq.w	80068ae <_dtoa_r+0x9e>
 8006ddc:	f8c3 8000 	str.w	r8, [r3]
 8006de0:	e565      	b.n	80068ae <_dtoa_r+0x9e>
 8006de2:	465a      	mov	r2, fp
 8006de4:	4643      	mov	r3, r8
 8006de6:	4698      	mov	r8, r3
 8006de8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006dec:	2939      	cmp	r1, #57	; 0x39
 8006dee:	d106      	bne.n	8006dfe <_dtoa_r+0x5ee>
 8006df0:	9901      	ldr	r1, [sp, #4]
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d1f7      	bne.n	8006de6 <_dtoa_r+0x5d6>
 8006df6:	9801      	ldr	r0, [sp, #4]
 8006df8:	2130      	movs	r1, #48	; 0x30
 8006dfa:	3201      	adds	r2, #1
 8006dfc:	7001      	strb	r1, [r0, #0]
 8006dfe:	7819      	ldrb	r1, [r3, #0]
 8006e00:	3101      	adds	r1, #1
 8006e02:	7019      	strb	r1, [r3, #0]
 8006e04:	e7ae      	b.n	8006d64 <_dtoa_r+0x554>
 8006e06:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e12:	d1b2      	bne.n	8006d7a <_dtoa_r+0x56a>
 8006e14:	e7d3      	b.n	8006dbe <_dtoa_r+0x5ae>
 8006e16:	bf00      	nop
 8006e18:	08009e40 	.word	0x08009e40
 8006e1c:	08009e18 	.word	0x08009e18
 8006e20:	9907      	ldr	r1, [sp, #28]
 8006e22:	2900      	cmp	r1, #0
 8006e24:	f000 80d0 	beq.w	8006fc8 <_dtoa_r+0x7b8>
 8006e28:	9906      	ldr	r1, [sp, #24]
 8006e2a:	2901      	cmp	r1, #1
 8006e2c:	f300 80b4 	bgt.w	8006f98 <_dtoa_r+0x788>
 8006e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e32:	2900      	cmp	r1, #0
 8006e34:	f000 80ac 	beq.w	8006f90 <_dtoa_r+0x780>
 8006e38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e40:	461c      	mov	r4, r3
 8006e42:	9309      	str	r3, [sp, #36]	; 0x24
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	4630      	mov	r0, r6
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	f000 fc88 	bl	8007768 <__i2b>
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	f1b8 0f00 	cmp.w	r8, #0
 8006e60:	d00d      	beq.n	8006e7e <_dtoa_r+0x66e>
 8006e62:	9a05      	ldr	r2, [sp, #20]
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	dd0a      	ble.n	8006e7e <_dtoa_r+0x66e>
 8006e68:	4542      	cmp	r2, r8
 8006e6a:	9904      	ldr	r1, [sp, #16]
 8006e6c:	bfa8      	it	ge
 8006e6e:	4642      	movge	r2, r8
 8006e70:	1a89      	subs	r1, r1, r2
 8006e72:	9104      	str	r1, [sp, #16]
 8006e74:	9905      	ldr	r1, [sp, #20]
 8006e76:	eba8 0802 	sub.w	r8, r8, r2
 8006e7a:	1a8a      	subs	r2, r1, r2
 8006e7c:	9205      	str	r2, [sp, #20]
 8006e7e:	b303      	cbz	r3, 8006ec2 <_dtoa_r+0x6b2>
 8006e80:	9a07      	ldr	r2, [sp, #28]
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	f000 80a5 	beq.w	8006fd2 <_dtoa_r+0x7c2>
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	dd13      	ble.n	8006eb4 <_dtoa_r+0x6a4>
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	4622      	mov	r2, r4
 8006e90:	4630      	mov	r0, r6
 8006e92:	930d      	str	r3, [sp, #52]	; 0x34
 8006e94:	f000 fd28 	bl	80078e8 <__pow5mult>
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 fc78 	bl	8007794 <__multiply>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 fb5d 	bl	8007568 <_Bfree>
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb2:	4615      	mov	r5, r2
 8006eb4:	1b1a      	subs	r2, r3, r4
 8006eb6:	d004      	beq.n	8006ec2 <_dtoa_r+0x6b2>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f000 fd14 	bl	80078e8 <__pow5mult>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 fc4f 	bl	8007768 <__i2b>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f340 8081 	ble.w	8006fd6 <_dtoa_r+0x7c6>
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 fd05 	bl	80078e8 <__pow5mult>
 8006ede:	9b06      	ldr	r3, [sp, #24]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	dd7a      	ble.n	8006fdc <_dtoa_r+0x7cc>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eea:	6922      	ldr	r2, [r4, #16]
 8006eec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006ef0:	6910      	ldr	r0, [r2, #16]
 8006ef2:	f000 fbeb 	bl	80076cc <__hi0bits>
 8006ef6:	f1c0 0020 	rsb	r0, r0, #32
 8006efa:	9b05      	ldr	r3, [sp, #20]
 8006efc:	4418      	add	r0, r3
 8006efe:	f010 001f 	ands.w	r0, r0, #31
 8006f02:	f000 8093 	beq.w	800702c <_dtoa_r+0x81c>
 8006f06:	f1c0 0220 	rsb	r2, r0, #32
 8006f0a:	2a04      	cmp	r2, #4
 8006f0c:	f340 8085 	ble.w	800701a <_dtoa_r+0x80a>
 8006f10:	9b04      	ldr	r3, [sp, #16]
 8006f12:	f1c0 001c 	rsb	r0, r0, #28
 8006f16:	4403      	add	r3, r0
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	4480      	add	r8, r0
 8006f1e:	4403      	add	r3, r0
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	9b04      	ldr	r3, [sp, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd05      	ble.n	8006f34 <_dtoa_r+0x724>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 fd35 	bl	800799c <__lshift>
 8006f32:	4605      	mov	r5, r0
 8006f34:	9b05      	ldr	r3, [sp, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd05      	ble.n	8006f46 <_dtoa_r+0x736>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f000 fd2c 	bl	800799c <__lshift>
 8006f44:	4604      	mov	r4, r0
 8006f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d071      	beq.n	8007030 <_dtoa_r+0x820>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 fd90 	bl	8007a74 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	da6b      	bge.n	8007030 <_dtoa_r+0x820>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 fb24 	bl	80075ac <__multadd>
 8006f64:	9b07      	ldr	r3, [sp, #28]
 8006f66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8197 	beq.w	80072a0 <_dtoa_r+0xa90>
 8006f72:	4639      	mov	r1, r7
 8006f74:	2300      	movs	r3, #0
 8006f76:	220a      	movs	r2, #10
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f000 fb17 	bl	80075ac <__multadd>
 8006f7e:	f1ba 0f00 	cmp.w	sl, #0
 8006f82:	4607      	mov	r7, r0
 8006f84:	f300 8093 	bgt.w	80070ae <_dtoa_r+0x89e>
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	dc57      	bgt.n	800703e <_dtoa_r+0x82e>
 8006f8e:	e08e      	b.n	80070ae <_dtoa_r+0x89e>
 8006f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f96:	e751      	b.n	8006e3c <_dtoa_r+0x62c>
 8006f98:	f109 34ff 	add.w	r4, r9, #4294967295
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	bfbf      	itttt	lt
 8006fa0:	1ae2      	sublt	r2, r4, r3
 8006fa2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006fa4:	189b      	addlt	r3, r3, r2
 8006fa6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006fa8:	bfae      	itee	ge
 8006faa:	1b1c      	subge	r4, r3, r4
 8006fac:	4623      	movlt	r3, r4
 8006fae:	2400      	movlt	r4, #0
 8006fb0:	f1b9 0f00 	cmp.w	r9, #0
 8006fb4:	bfb5      	itete	lt
 8006fb6:	9a04      	ldrlt	r2, [sp, #16]
 8006fb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006fbc:	eba2 0809 	sublt.w	r8, r2, r9
 8006fc0:	464a      	movge	r2, r9
 8006fc2:	bfb8      	it	lt
 8006fc4:	2200      	movlt	r2, #0
 8006fc6:	e73c      	b.n	8006e42 <_dtoa_r+0x632>
 8006fc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006fcc:	9f07      	ldr	r7, [sp, #28]
 8006fce:	461c      	mov	r4, r3
 8006fd0:	e744      	b.n	8006e5c <_dtoa_r+0x64c>
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	e770      	b.n	8006eb8 <_dtoa_r+0x6a8>
 8006fd6:	9b06      	ldr	r3, [sp, #24]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	dc18      	bgt.n	800700e <_dtoa_r+0x7fe>
 8006fdc:	9b02      	ldr	r3, [sp, #8]
 8006fde:	b9b3      	cbnz	r3, 800700e <_dtoa_r+0x7fe>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006fe6:	b9a2      	cbnz	r2, 8007012 <_dtoa_r+0x802>
 8006fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fec:	0d12      	lsrs	r2, r2, #20
 8006fee:	0512      	lsls	r2, r2, #20
 8006ff0:	b18a      	cbz	r2, 8007016 <_dtoa_r+0x806>
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9305      	str	r3, [sp, #20]
 8006ffe:	2301      	movs	r3, #1
 8007000:	9309      	str	r3, [sp, #36]	; 0x24
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f af70 	bne.w	8006eea <_dtoa_r+0x6da>
 800700a:	2001      	movs	r0, #1
 800700c:	e775      	b.n	8006efa <_dtoa_r+0x6ea>
 800700e:	2300      	movs	r3, #0
 8007010:	e7f6      	b.n	8007000 <_dtoa_r+0x7f0>
 8007012:	9b02      	ldr	r3, [sp, #8]
 8007014:	e7f4      	b.n	8007000 <_dtoa_r+0x7f0>
 8007016:	9209      	str	r2, [sp, #36]	; 0x24
 8007018:	e7f3      	b.n	8007002 <_dtoa_r+0x7f2>
 800701a:	d082      	beq.n	8006f22 <_dtoa_r+0x712>
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	321c      	adds	r2, #28
 8007020:	4413      	add	r3, r2
 8007022:	9304      	str	r3, [sp, #16]
 8007024:	9b05      	ldr	r3, [sp, #20]
 8007026:	4490      	add	r8, r2
 8007028:	4413      	add	r3, r2
 800702a:	e779      	b.n	8006f20 <_dtoa_r+0x710>
 800702c:	4602      	mov	r2, r0
 800702e:	e7f5      	b.n	800701c <_dtoa_r+0x80c>
 8007030:	f1b9 0f00 	cmp.w	r9, #0
 8007034:	dc36      	bgt.n	80070a4 <_dtoa_r+0x894>
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	2b02      	cmp	r3, #2
 800703a:	dd33      	ble.n	80070a4 <_dtoa_r+0x894>
 800703c:	46ca      	mov	sl, r9
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	d10d      	bne.n	8007060 <_dtoa_r+0x850>
 8007044:	4621      	mov	r1, r4
 8007046:	4653      	mov	r3, sl
 8007048:	2205      	movs	r2, #5
 800704a:	4630      	mov	r0, r6
 800704c:	f000 faae 	bl	80075ac <__multadd>
 8007050:	4601      	mov	r1, r0
 8007052:	4604      	mov	r4, r0
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fd0d 	bl	8007a74 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	f73f ade4 	bgt.w	8006c28 <_dtoa_r+0x418>
 8007060:	9b08      	ldr	r3, [sp, #32]
 8007062:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007066:	ea6f 0b03 	mvn.w	fp, r3
 800706a:	f04f 0900 	mov.w	r9, #0
 800706e:	4621      	mov	r1, r4
 8007070:	4630      	mov	r0, r6
 8007072:	f000 fa79 	bl	8007568 <_Bfree>
 8007076:	2f00      	cmp	r7, #0
 8007078:	f43f aea1 	beq.w	8006dbe <_dtoa_r+0x5ae>
 800707c:	f1b9 0f00 	cmp.w	r9, #0
 8007080:	d005      	beq.n	800708e <_dtoa_r+0x87e>
 8007082:	45b9      	cmp	r9, r7
 8007084:	d003      	beq.n	800708e <_dtoa_r+0x87e>
 8007086:	4649      	mov	r1, r9
 8007088:	4630      	mov	r0, r6
 800708a:	f000 fa6d 	bl	8007568 <_Bfree>
 800708e:	4639      	mov	r1, r7
 8007090:	4630      	mov	r0, r6
 8007092:	f000 fa69 	bl	8007568 <_Bfree>
 8007096:	e692      	b.n	8006dbe <_dtoa_r+0x5ae>
 8007098:	2400      	movs	r4, #0
 800709a:	4627      	mov	r7, r4
 800709c:	e7e0      	b.n	8007060 <_dtoa_r+0x850>
 800709e:	4693      	mov	fp, r2
 80070a0:	4627      	mov	r7, r4
 80070a2:	e5c1      	b.n	8006c28 <_dtoa_r+0x418>
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	46ca      	mov	sl, r9
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8100 	beq.w	80072ae <_dtoa_r+0xa9e>
 80070ae:	f1b8 0f00 	cmp.w	r8, #0
 80070b2:	dd05      	ble.n	80070c0 <_dtoa_r+0x8b0>
 80070b4:	4639      	mov	r1, r7
 80070b6:	4642      	mov	r2, r8
 80070b8:	4630      	mov	r0, r6
 80070ba:	f000 fc6f 	bl	800799c <__lshift>
 80070be:	4607      	mov	r7, r0
 80070c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d05d      	beq.n	8007182 <_dtoa_r+0x972>
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4630      	mov	r0, r6
 80070ca:	f000 fa0d 	bl	80074e8 <_Balloc>
 80070ce:	4680      	mov	r8, r0
 80070d0:	b928      	cbnz	r0, 80070de <_dtoa_r+0x8ce>
 80070d2:	4b82      	ldr	r3, [pc, #520]	; (80072dc <_dtoa_r+0xacc>)
 80070d4:	4602      	mov	r2, r0
 80070d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070da:	f7ff bbb1 	b.w	8006840 <_dtoa_r+0x30>
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	3202      	adds	r2, #2
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	f107 010c 	add.w	r1, r7, #12
 80070e8:	300c      	adds	r0, #12
 80070ea:	f001 ff3f 	bl	8008f6c <memcpy>
 80070ee:	2201      	movs	r2, #1
 80070f0:	4641      	mov	r1, r8
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 fc52 	bl	800799c <__lshift>
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	3301      	adds	r3, #1
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	4453      	add	r3, sl
 8007102:	9308      	str	r3, [sp, #32]
 8007104:	9b02      	ldr	r3, [sp, #8]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	46b9      	mov	r9, r7
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	4607      	mov	r7, r0
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	4621      	mov	r1, r4
 8007114:	3b01      	subs	r3, #1
 8007116:	4628      	mov	r0, r5
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	f7ff faef 	bl	80066fc <quorem>
 800711e:	4603      	mov	r3, r0
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	9005      	str	r0, [sp, #20]
 8007124:	4649      	mov	r1, r9
 8007126:	4628      	mov	r0, r5
 8007128:	9309      	str	r3, [sp, #36]	; 0x24
 800712a:	f000 fca3 	bl	8007a74 <__mcmp>
 800712e:	463a      	mov	r2, r7
 8007130:	4682      	mov	sl, r0
 8007132:	4621      	mov	r1, r4
 8007134:	4630      	mov	r0, r6
 8007136:	f000 fcb9 	bl	8007aac <__mdiff>
 800713a:	68c2      	ldr	r2, [r0, #12]
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	4680      	mov	r8, r0
 8007140:	bb0a      	cbnz	r2, 8007186 <_dtoa_r+0x976>
 8007142:	4601      	mov	r1, r0
 8007144:	4628      	mov	r0, r5
 8007146:	f000 fc95 	bl	8007a74 <__mcmp>
 800714a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714c:	4602      	mov	r2, r0
 800714e:	4641      	mov	r1, r8
 8007150:	4630      	mov	r0, r6
 8007152:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007156:	f000 fa07 	bl	8007568 <_Bfree>
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007162:	ea43 0102 	orr.w	r1, r3, r2
 8007166:	9b07      	ldr	r3, [sp, #28]
 8007168:	4319      	orrs	r1, r3
 800716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716c:	d10d      	bne.n	800718a <_dtoa_r+0x97a>
 800716e:	2b39      	cmp	r3, #57	; 0x39
 8007170:	d029      	beq.n	80071c6 <_dtoa_r+0x9b6>
 8007172:	f1ba 0f00 	cmp.w	sl, #0
 8007176:	dd01      	ble.n	800717c <_dtoa_r+0x96c>
 8007178:	9b05      	ldr	r3, [sp, #20]
 800717a:	3331      	adds	r3, #49	; 0x31
 800717c:	9a02      	ldr	r2, [sp, #8]
 800717e:	7013      	strb	r3, [r2, #0]
 8007180:	e775      	b.n	800706e <_dtoa_r+0x85e>
 8007182:	4638      	mov	r0, r7
 8007184:	e7b8      	b.n	80070f8 <_dtoa_r+0x8e8>
 8007186:	2201      	movs	r2, #1
 8007188:	e7e1      	b.n	800714e <_dtoa_r+0x93e>
 800718a:	f1ba 0f00 	cmp.w	sl, #0
 800718e:	db06      	blt.n	800719e <_dtoa_r+0x98e>
 8007190:	9906      	ldr	r1, [sp, #24]
 8007192:	ea41 0a0a 	orr.w	sl, r1, sl
 8007196:	9907      	ldr	r1, [sp, #28]
 8007198:	ea5a 0a01 	orrs.w	sl, sl, r1
 800719c:	d120      	bne.n	80071e0 <_dtoa_r+0x9d0>
 800719e:	2a00      	cmp	r2, #0
 80071a0:	ddec      	ble.n	800717c <_dtoa_r+0x96c>
 80071a2:	4629      	mov	r1, r5
 80071a4:	2201      	movs	r2, #1
 80071a6:	4630      	mov	r0, r6
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	f000 fbf7 	bl	800799c <__lshift>
 80071ae:	4621      	mov	r1, r4
 80071b0:	4605      	mov	r5, r0
 80071b2:	f000 fc5f 	bl	8007a74 <__mcmp>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	9b04      	ldr	r3, [sp, #16]
 80071ba:	dc02      	bgt.n	80071c2 <_dtoa_r+0x9b2>
 80071bc:	d1de      	bne.n	800717c <_dtoa_r+0x96c>
 80071be:	07da      	lsls	r2, r3, #31
 80071c0:	d5dc      	bpl.n	800717c <_dtoa_r+0x96c>
 80071c2:	2b39      	cmp	r3, #57	; 0x39
 80071c4:	d1d8      	bne.n	8007178 <_dtoa_r+0x968>
 80071c6:	9a02      	ldr	r2, [sp, #8]
 80071c8:	2339      	movs	r3, #57	; 0x39
 80071ca:	7013      	strb	r3, [r2, #0]
 80071cc:	4643      	mov	r3, r8
 80071ce:	4698      	mov	r8, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80071d6:	2a39      	cmp	r2, #57	; 0x39
 80071d8:	d051      	beq.n	800727e <_dtoa_r+0xa6e>
 80071da:	3201      	adds	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e746      	b.n	800706e <_dtoa_r+0x85e>
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	dd03      	ble.n	80071ec <_dtoa_r+0x9dc>
 80071e4:	2b39      	cmp	r3, #57	; 0x39
 80071e6:	d0ee      	beq.n	80071c6 <_dtoa_r+0x9b6>
 80071e8:	3301      	adds	r3, #1
 80071ea:	e7c7      	b.n	800717c <_dtoa_r+0x96c>
 80071ec:	9a04      	ldr	r2, [sp, #16]
 80071ee:	9908      	ldr	r1, [sp, #32]
 80071f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071f4:	428a      	cmp	r2, r1
 80071f6:	d02b      	beq.n	8007250 <_dtoa_r+0xa40>
 80071f8:	4629      	mov	r1, r5
 80071fa:	2300      	movs	r3, #0
 80071fc:	220a      	movs	r2, #10
 80071fe:	4630      	mov	r0, r6
 8007200:	f000 f9d4 	bl	80075ac <__multadd>
 8007204:	45b9      	cmp	r9, r7
 8007206:	4605      	mov	r5, r0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	f04f 020a 	mov.w	r2, #10
 8007210:	4649      	mov	r1, r9
 8007212:	4630      	mov	r0, r6
 8007214:	d107      	bne.n	8007226 <_dtoa_r+0xa16>
 8007216:	f000 f9c9 	bl	80075ac <__multadd>
 800721a:	4681      	mov	r9, r0
 800721c:	4607      	mov	r7, r0
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	3301      	adds	r3, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	e774      	b.n	8007110 <_dtoa_r+0x900>
 8007226:	f000 f9c1 	bl	80075ac <__multadd>
 800722a:	4639      	mov	r1, r7
 800722c:	4681      	mov	r9, r0
 800722e:	2300      	movs	r3, #0
 8007230:	220a      	movs	r2, #10
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f9ba 	bl	80075ac <__multadd>
 8007238:	4607      	mov	r7, r0
 800723a:	e7f0      	b.n	800721e <_dtoa_r+0xa0e>
 800723c:	f1ba 0f00 	cmp.w	sl, #0
 8007240:	9a01      	ldr	r2, [sp, #4]
 8007242:	bfcc      	ite	gt
 8007244:	46d0      	movgt	r8, sl
 8007246:	f04f 0801 	movle.w	r8, #1
 800724a:	4490      	add	r8, r2
 800724c:	f04f 0900 	mov.w	r9, #0
 8007250:	4629      	mov	r1, r5
 8007252:	2201      	movs	r2, #1
 8007254:	4630      	mov	r0, r6
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	f000 fba0 	bl	800799c <__lshift>
 800725c:	4621      	mov	r1, r4
 800725e:	4605      	mov	r5, r0
 8007260:	f000 fc08 	bl	8007a74 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	dcb1      	bgt.n	80071cc <_dtoa_r+0x9bc>
 8007268:	d102      	bne.n	8007270 <_dtoa_r+0xa60>
 800726a:	9b02      	ldr	r3, [sp, #8]
 800726c:	07db      	lsls	r3, r3, #31
 800726e:	d4ad      	bmi.n	80071cc <_dtoa_r+0x9bc>
 8007270:	4643      	mov	r3, r8
 8007272:	4698      	mov	r8, r3
 8007274:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007278:	2a30      	cmp	r2, #48	; 0x30
 800727a:	d0fa      	beq.n	8007272 <_dtoa_r+0xa62>
 800727c:	e6f7      	b.n	800706e <_dtoa_r+0x85e>
 800727e:	9a01      	ldr	r2, [sp, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d1a4      	bne.n	80071ce <_dtoa_r+0x9be>
 8007284:	f10b 0b01 	add.w	fp, fp, #1
 8007288:	2331      	movs	r3, #49	; 0x31
 800728a:	e778      	b.n	800717e <_dtoa_r+0x96e>
 800728c:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <_dtoa_r+0xad0>)
 800728e:	f7ff bb2a 	b.w	80068e6 <_dtoa_r+0xd6>
 8007292:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007294:	2b00      	cmp	r3, #0
 8007296:	f47f ab05 	bne.w	80068a4 <_dtoa_r+0x94>
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <_dtoa_r+0xad4>)
 800729c:	f7ff bb23 	b.w	80068e6 <_dtoa_r+0xd6>
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	dc03      	bgt.n	80072ae <_dtoa_r+0xa9e>
 80072a6:	9b06      	ldr	r3, [sp, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f73f aec8 	bgt.w	800703e <_dtoa_r+0x82e>
 80072ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072b2:	4621      	mov	r1, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f7ff fa21 	bl	80066fc <quorem>
 80072ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072be:	f808 3b01 	strb.w	r3, [r8], #1
 80072c2:	9a01      	ldr	r2, [sp, #4]
 80072c4:	eba8 0202 	sub.w	r2, r8, r2
 80072c8:	4592      	cmp	sl, r2
 80072ca:	ddb7      	ble.n	800723c <_dtoa_r+0xa2c>
 80072cc:	4629      	mov	r1, r5
 80072ce:	2300      	movs	r3, #0
 80072d0:	220a      	movs	r2, #10
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 f96a 	bl	80075ac <__multadd>
 80072d8:	4605      	mov	r5, r0
 80072da:	e7ea      	b.n	80072b2 <_dtoa_r+0xaa2>
 80072dc:	08009dad 	.word	0x08009dad
 80072e0:	08009d08 	.word	0x08009d08
 80072e4:	08009d31 	.word	0x08009d31

080072e8 <_free_r>:
 80072e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d044      	beq.n	8007378 <_free_r+0x90>
 80072ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f2:	9001      	str	r0, [sp, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f1a1 0404 	sub.w	r4, r1, #4
 80072fa:	bfb8      	it	lt
 80072fc:	18e4      	addlt	r4, r4, r3
 80072fe:	f000 f8e7 	bl	80074d0 <__malloc_lock>
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <_free_r+0x94>)
 8007304:	9801      	ldr	r0, [sp, #4]
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	b933      	cbnz	r3, 8007318 <_free_r+0x30>
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	6014      	str	r4, [r2, #0]
 800730e:	b003      	add	sp, #12
 8007310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007314:	f000 b8e2 	b.w	80074dc <__malloc_unlock>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d908      	bls.n	800732e <_free_r+0x46>
 800731c:	6825      	ldr	r5, [r4, #0]
 800731e:	1961      	adds	r1, r4, r5
 8007320:	428b      	cmp	r3, r1
 8007322:	bf01      	itttt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	1949      	addeq	r1, r1, r5
 800732a:	6021      	streq	r1, [r4, #0]
 800732c:	e7ed      	b.n	800730a <_free_r+0x22>
 800732e:	461a      	mov	r2, r3
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	b10b      	cbz	r3, 8007338 <_free_r+0x50>
 8007334:	42a3      	cmp	r3, r4
 8007336:	d9fa      	bls.n	800732e <_free_r+0x46>
 8007338:	6811      	ldr	r1, [r2, #0]
 800733a:	1855      	adds	r5, r2, r1
 800733c:	42a5      	cmp	r5, r4
 800733e:	d10b      	bne.n	8007358 <_free_r+0x70>
 8007340:	6824      	ldr	r4, [r4, #0]
 8007342:	4421      	add	r1, r4
 8007344:	1854      	adds	r4, r2, r1
 8007346:	42a3      	cmp	r3, r4
 8007348:	6011      	str	r1, [r2, #0]
 800734a:	d1e0      	bne.n	800730e <_free_r+0x26>
 800734c:	681c      	ldr	r4, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	6053      	str	r3, [r2, #4]
 8007352:	440c      	add	r4, r1
 8007354:	6014      	str	r4, [r2, #0]
 8007356:	e7da      	b.n	800730e <_free_r+0x26>
 8007358:	d902      	bls.n	8007360 <_free_r+0x78>
 800735a:	230c      	movs	r3, #12
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	e7d6      	b.n	800730e <_free_r+0x26>
 8007360:	6825      	ldr	r5, [r4, #0]
 8007362:	1961      	adds	r1, r4, r5
 8007364:	428b      	cmp	r3, r1
 8007366:	bf04      	itt	eq
 8007368:	6819      	ldreq	r1, [r3, #0]
 800736a:	685b      	ldreq	r3, [r3, #4]
 800736c:	6063      	str	r3, [r4, #4]
 800736e:	bf04      	itt	eq
 8007370:	1949      	addeq	r1, r1, r5
 8007372:	6021      	streq	r1, [r4, #0]
 8007374:	6054      	str	r4, [r2, #4]
 8007376:	e7ca      	b.n	800730e <_free_r+0x26>
 8007378:	b003      	add	sp, #12
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	240003e0 	.word	0x240003e0

08007380 <malloc>:
 8007380:	4b02      	ldr	r3, [pc, #8]	; (800738c <malloc+0xc>)
 8007382:	4601      	mov	r1, r0
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	f000 b823 	b.w	80073d0 <_malloc_r>
 800738a:	bf00      	nop
 800738c:	24000068 	.word	0x24000068

08007390 <sbrk_aligned>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4e0e      	ldr	r6, [pc, #56]	; (80073cc <sbrk_aligned+0x3c>)
 8007394:	460c      	mov	r4, r1
 8007396:	6831      	ldr	r1, [r6, #0]
 8007398:	4605      	mov	r5, r0
 800739a:	b911      	cbnz	r1, 80073a2 <sbrk_aligned+0x12>
 800739c:	f001 fdd6 	bl	8008f4c <_sbrk_r>
 80073a0:	6030      	str	r0, [r6, #0]
 80073a2:	4621      	mov	r1, r4
 80073a4:	4628      	mov	r0, r5
 80073a6:	f001 fdd1 	bl	8008f4c <_sbrk_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d00a      	beq.n	80073c4 <sbrk_aligned+0x34>
 80073ae:	1cc4      	adds	r4, r0, #3
 80073b0:	f024 0403 	bic.w	r4, r4, #3
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	d007      	beq.n	80073c8 <sbrk_aligned+0x38>
 80073b8:	1a21      	subs	r1, r4, r0
 80073ba:	4628      	mov	r0, r5
 80073bc:	f001 fdc6 	bl	8008f4c <_sbrk_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d101      	bne.n	80073c8 <sbrk_aligned+0x38>
 80073c4:	f04f 34ff 	mov.w	r4, #4294967295
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	240003e4 	.word	0x240003e4

080073d0 <_malloc_r>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	1ccd      	adds	r5, r1, #3
 80073d6:	f025 0503 	bic.w	r5, r5, #3
 80073da:	3508      	adds	r5, #8
 80073dc:	2d0c      	cmp	r5, #12
 80073de:	bf38      	it	cc
 80073e0:	250c      	movcc	r5, #12
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	4607      	mov	r7, r0
 80073e6:	db01      	blt.n	80073ec <_malloc_r+0x1c>
 80073e8:	42a9      	cmp	r1, r5
 80073ea:	d905      	bls.n	80073f8 <_malloc_r+0x28>
 80073ec:	230c      	movs	r3, #12
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	2600      	movs	r6, #0
 80073f2:	4630      	mov	r0, r6
 80073f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074cc <_malloc_r+0xfc>
 80073fc:	f000 f868 	bl	80074d0 <__malloc_lock>
 8007400:	f8d8 3000 	ldr.w	r3, [r8]
 8007404:	461c      	mov	r4, r3
 8007406:	bb5c      	cbnz	r4, 8007460 <_malloc_r+0x90>
 8007408:	4629      	mov	r1, r5
 800740a:	4638      	mov	r0, r7
 800740c:	f7ff ffc0 	bl	8007390 <sbrk_aligned>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	4604      	mov	r4, r0
 8007414:	d155      	bne.n	80074c2 <_malloc_r+0xf2>
 8007416:	f8d8 4000 	ldr.w	r4, [r8]
 800741a:	4626      	mov	r6, r4
 800741c:	2e00      	cmp	r6, #0
 800741e:	d145      	bne.n	80074ac <_malloc_r+0xdc>
 8007420:	2c00      	cmp	r4, #0
 8007422:	d048      	beq.n	80074b6 <_malloc_r+0xe6>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	4631      	mov	r1, r6
 8007428:	4638      	mov	r0, r7
 800742a:	eb04 0903 	add.w	r9, r4, r3
 800742e:	f001 fd8d 	bl	8008f4c <_sbrk_r>
 8007432:	4581      	cmp	r9, r0
 8007434:	d13f      	bne.n	80074b6 <_malloc_r+0xe6>
 8007436:	6821      	ldr	r1, [r4, #0]
 8007438:	1a6d      	subs	r5, r5, r1
 800743a:	4629      	mov	r1, r5
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff ffa7 	bl	8007390 <sbrk_aligned>
 8007442:	3001      	adds	r0, #1
 8007444:	d037      	beq.n	80074b6 <_malloc_r+0xe6>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	442b      	add	r3, r5
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	f8d8 3000 	ldr.w	r3, [r8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d038      	beq.n	80074c6 <_malloc_r+0xf6>
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	42a2      	cmp	r2, r4
 8007458:	d12b      	bne.n	80074b2 <_malloc_r+0xe2>
 800745a:	2200      	movs	r2, #0
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xb0>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d41f      	bmi.n	80074a6 <_malloc_r+0xd6>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xca>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4638      	mov	r0, r7
 8007482:	f104 060b 	add.w	r6, r4, #11
 8007486:	f000 f829 	bl	80074dc <__malloc_unlock>
 800748a:	f026 0607 	bic.w	r6, r6, #7
 800748e:	1d23      	adds	r3, r4, #4
 8007490:	1af2      	subs	r2, r6, r3
 8007492:	d0ae      	beq.n	80073f2 <_malloc_r+0x22>
 8007494:	1b9b      	subs	r3, r3, r6
 8007496:	50a3      	str	r3, [r4, r2]
 8007498:	e7ab      	b.n	80073f2 <_malloc_r+0x22>
 800749a:	42a3      	cmp	r3, r4
 800749c:	6862      	ldr	r2, [r4, #4]
 800749e:	d1dd      	bne.n	800745c <_malloc_r+0x8c>
 80074a0:	f8c8 2000 	str.w	r2, [r8]
 80074a4:	e7ec      	b.n	8007480 <_malloc_r+0xb0>
 80074a6:	4623      	mov	r3, r4
 80074a8:	6864      	ldr	r4, [r4, #4]
 80074aa:	e7ac      	b.n	8007406 <_malloc_r+0x36>
 80074ac:	4634      	mov	r4, r6
 80074ae:	6876      	ldr	r6, [r6, #4]
 80074b0:	e7b4      	b.n	800741c <_malloc_r+0x4c>
 80074b2:	4613      	mov	r3, r2
 80074b4:	e7cc      	b.n	8007450 <_malloc_r+0x80>
 80074b6:	230c      	movs	r3, #12
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	4638      	mov	r0, r7
 80074bc:	f000 f80e 	bl	80074dc <__malloc_unlock>
 80074c0:	e797      	b.n	80073f2 <_malloc_r+0x22>
 80074c2:	6025      	str	r5, [r4, #0]
 80074c4:	e7dc      	b.n	8007480 <_malloc_r+0xb0>
 80074c6:	605b      	str	r3, [r3, #4]
 80074c8:	deff      	udf	#255	; 0xff
 80074ca:	bf00      	nop
 80074cc:	240003e0 	.word	0x240003e0

080074d0 <__malloc_lock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__malloc_lock+0x8>)
 80074d2:	f7ff b90a 	b.w	80066ea <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	240003dc 	.word	0x240003dc

080074dc <__malloc_unlock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_unlock+0x8>)
 80074de:	f7ff b905 	b.w	80066ec <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	240003dc 	.word	0x240003dc

080074e8 <_Balloc>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	69c6      	ldr	r6, [r0, #28]
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	b976      	cbnz	r6, 8007510 <_Balloc+0x28>
 80074f2:	2010      	movs	r0, #16
 80074f4:	f7ff ff44 	bl	8007380 <malloc>
 80074f8:	4602      	mov	r2, r0
 80074fa:	61e0      	str	r0, [r4, #28]
 80074fc:	b920      	cbnz	r0, 8007508 <_Balloc+0x20>
 80074fe:	4b18      	ldr	r3, [pc, #96]	; (8007560 <_Balloc+0x78>)
 8007500:	4818      	ldr	r0, [pc, #96]	; (8007564 <_Balloc+0x7c>)
 8007502:	216b      	movs	r1, #107	; 0x6b
 8007504:	f001 fd48 	bl	8008f98 <__assert_func>
 8007508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800750c:	6006      	str	r6, [r0, #0]
 800750e:	60c6      	str	r6, [r0, #12]
 8007510:	69e6      	ldr	r6, [r4, #28]
 8007512:	68f3      	ldr	r3, [r6, #12]
 8007514:	b183      	cbz	r3, 8007538 <_Balloc+0x50>
 8007516:	69e3      	ldr	r3, [r4, #28]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800751e:	b9b8      	cbnz	r0, 8007550 <_Balloc+0x68>
 8007520:	2101      	movs	r1, #1
 8007522:	fa01 f605 	lsl.w	r6, r1, r5
 8007526:	1d72      	adds	r2, r6, #5
 8007528:	0092      	lsls	r2, r2, #2
 800752a:	4620      	mov	r0, r4
 800752c:	f001 fd52 	bl	8008fd4 <_calloc_r>
 8007530:	b160      	cbz	r0, 800754c <_Balloc+0x64>
 8007532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007536:	e00e      	b.n	8007556 <_Balloc+0x6e>
 8007538:	2221      	movs	r2, #33	; 0x21
 800753a:	2104      	movs	r1, #4
 800753c:	4620      	mov	r0, r4
 800753e:	f001 fd49 	bl	8008fd4 <_calloc_r>
 8007542:	69e3      	ldr	r3, [r4, #28]
 8007544:	60f0      	str	r0, [r6, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e4      	bne.n	8007516 <_Balloc+0x2e>
 800754c:	2000      	movs	r0, #0
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007556:	2300      	movs	r3, #0
 8007558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800755c:	e7f7      	b.n	800754e <_Balloc+0x66>
 800755e:	bf00      	nop
 8007560:	08009d3e 	.word	0x08009d3e
 8007564:	08009dbe 	.word	0x08009dbe

08007568 <_Bfree>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	69c6      	ldr	r6, [r0, #28]
 800756c:	4605      	mov	r5, r0
 800756e:	460c      	mov	r4, r1
 8007570:	b976      	cbnz	r6, 8007590 <_Bfree+0x28>
 8007572:	2010      	movs	r0, #16
 8007574:	f7ff ff04 	bl	8007380 <malloc>
 8007578:	4602      	mov	r2, r0
 800757a:	61e8      	str	r0, [r5, #28]
 800757c:	b920      	cbnz	r0, 8007588 <_Bfree+0x20>
 800757e:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <_Bfree+0x3c>)
 8007580:	4809      	ldr	r0, [pc, #36]	; (80075a8 <_Bfree+0x40>)
 8007582:	218f      	movs	r1, #143	; 0x8f
 8007584:	f001 fd08 	bl	8008f98 <__assert_func>
 8007588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800758c:	6006      	str	r6, [r0, #0]
 800758e:	60c6      	str	r6, [r0, #12]
 8007590:	b13c      	cbz	r4, 80075a2 <_Bfree+0x3a>
 8007592:	69eb      	ldr	r3, [r5, #28]
 8007594:	6862      	ldr	r2, [r4, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800759c:	6021      	str	r1, [r4, #0]
 800759e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	08009d3e 	.word	0x08009d3e
 80075a8:	08009dbe 	.word	0x08009dbe

080075ac <__multadd>:
 80075ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	690d      	ldr	r5, [r1, #16]
 80075b2:	4607      	mov	r7, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	461e      	mov	r6, r3
 80075b8:	f101 0c14 	add.w	ip, r1, #20
 80075bc:	2000      	movs	r0, #0
 80075be:	f8dc 3000 	ldr.w	r3, [ip]
 80075c2:	b299      	uxth	r1, r3
 80075c4:	fb02 6101 	mla	r1, r2, r1, r6
 80075c8:	0c1e      	lsrs	r6, r3, #16
 80075ca:	0c0b      	lsrs	r3, r1, #16
 80075cc:	fb02 3306 	mla	r3, r2, r6, r3
 80075d0:	b289      	uxth	r1, r1
 80075d2:	3001      	adds	r0, #1
 80075d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075d8:	4285      	cmp	r5, r0
 80075da:	f84c 1b04 	str.w	r1, [ip], #4
 80075de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075e2:	dcec      	bgt.n	80075be <__multadd+0x12>
 80075e4:	b30e      	cbz	r6, 800762a <__multadd+0x7e>
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	dc19      	bgt.n	8007620 <__multadd+0x74>
 80075ec:	6861      	ldr	r1, [r4, #4]
 80075ee:	4638      	mov	r0, r7
 80075f0:	3101      	adds	r1, #1
 80075f2:	f7ff ff79 	bl	80074e8 <_Balloc>
 80075f6:	4680      	mov	r8, r0
 80075f8:	b928      	cbnz	r0, 8007606 <__multadd+0x5a>
 80075fa:	4602      	mov	r2, r0
 80075fc:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <__multadd+0x84>)
 80075fe:	480d      	ldr	r0, [pc, #52]	; (8007634 <__multadd+0x88>)
 8007600:	21ba      	movs	r1, #186	; 0xba
 8007602:	f001 fcc9 	bl	8008f98 <__assert_func>
 8007606:	6922      	ldr	r2, [r4, #16]
 8007608:	3202      	adds	r2, #2
 800760a:	f104 010c 	add.w	r1, r4, #12
 800760e:	0092      	lsls	r2, r2, #2
 8007610:	300c      	adds	r0, #12
 8007612:	f001 fcab 	bl	8008f6c <memcpy>
 8007616:	4621      	mov	r1, r4
 8007618:	4638      	mov	r0, r7
 800761a:	f7ff ffa5 	bl	8007568 <_Bfree>
 800761e:	4644      	mov	r4, r8
 8007620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007624:	3501      	adds	r5, #1
 8007626:	615e      	str	r6, [r3, #20]
 8007628:	6125      	str	r5, [r4, #16]
 800762a:	4620      	mov	r0, r4
 800762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007630:	08009dad 	.word	0x08009dad
 8007634:	08009dbe 	.word	0x08009dbe

08007638 <__s2b>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	460c      	mov	r4, r1
 800763e:	4615      	mov	r5, r2
 8007640:	461f      	mov	r7, r3
 8007642:	2209      	movs	r2, #9
 8007644:	3308      	adds	r3, #8
 8007646:	4606      	mov	r6, r0
 8007648:	fb93 f3f2 	sdiv	r3, r3, r2
 800764c:	2100      	movs	r1, #0
 800764e:	2201      	movs	r2, #1
 8007650:	429a      	cmp	r2, r3
 8007652:	db09      	blt.n	8007668 <__s2b+0x30>
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff ff47 	bl	80074e8 <_Balloc>
 800765a:	b940      	cbnz	r0, 800766e <__s2b+0x36>
 800765c:	4602      	mov	r2, r0
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <__s2b+0x8c>)
 8007660:	4819      	ldr	r0, [pc, #100]	; (80076c8 <__s2b+0x90>)
 8007662:	21d3      	movs	r1, #211	; 0xd3
 8007664:	f001 fc98 	bl	8008f98 <__assert_func>
 8007668:	0052      	lsls	r2, r2, #1
 800766a:	3101      	adds	r1, #1
 800766c:	e7f0      	b.n	8007650 <__s2b+0x18>
 800766e:	9b08      	ldr	r3, [sp, #32]
 8007670:	6143      	str	r3, [r0, #20]
 8007672:	2d09      	cmp	r5, #9
 8007674:	f04f 0301 	mov.w	r3, #1
 8007678:	6103      	str	r3, [r0, #16]
 800767a:	dd16      	ble.n	80076aa <__s2b+0x72>
 800767c:	f104 0909 	add.w	r9, r4, #9
 8007680:	46c8      	mov	r8, r9
 8007682:	442c      	add	r4, r5
 8007684:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007688:	4601      	mov	r1, r0
 800768a:	3b30      	subs	r3, #48	; 0x30
 800768c:	220a      	movs	r2, #10
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff ff8c 	bl	80075ac <__multadd>
 8007694:	45a0      	cmp	r8, r4
 8007696:	d1f5      	bne.n	8007684 <__s2b+0x4c>
 8007698:	f1a5 0408 	sub.w	r4, r5, #8
 800769c:	444c      	add	r4, r9
 800769e:	1b2d      	subs	r5, r5, r4
 80076a0:	1963      	adds	r3, r4, r5
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	db04      	blt.n	80076b0 <__s2b+0x78>
 80076a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076aa:	340a      	adds	r4, #10
 80076ac:	2509      	movs	r5, #9
 80076ae:	e7f6      	b.n	800769e <__s2b+0x66>
 80076b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076b4:	4601      	mov	r1, r0
 80076b6:	3b30      	subs	r3, #48	; 0x30
 80076b8:	220a      	movs	r2, #10
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ff76 	bl	80075ac <__multadd>
 80076c0:	e7ee      	b.n	80076a0 <__s2b+0x68>
 80076c2:	bf00      	nop
 80076c4:	08009dad 	.word	0x08009dad
 80076c8:	08009dbe 	.word	0x08009dbe

080076cc <__hi0bits>:
 80076cc:	0c03      	lsrs	r3, r0, #16
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	b9d3      	cbnz	r3, 8007708 <__hi0bits+0x3c>
 80076d2:	0400      	lsls	r0, r0, #16
 80076d4:	2310      	movs	r3, #16
 80076d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076da:	bf04      	itt	eq
 80076dc:	0200      	lsleq	r0, r0, #8
 80076de:	3308      	addeq	r3, #8
 80076e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076e4:	bf04      	itt	eq
 80076e6:	0100      	lsleq	r0, r0, #4
 80076e8:	3304      	addeq	r3, #4
 80076ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076ee:	bf04      	itt	eq
 80076f0:	0080      	lsleq	r0, r0, #2
 80076f2:	3302      	addeq	r3, #2
 80076f4:	2800      	cmp	r0, #0
 80076f6:	db05      	blt.n	8007704 <__hi0bits+0x38>
 80076f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076fc:	f103 0301 	add.w	r3, r3, #1
 8007700:	bf08      	it	eq
 8007702:	2320      	moveq	r3, #32
 8007704:	4618      	mov	r0, r3
 8007706:	4770      	bx	lr
 8007708:	2300      	movs	r3, #0
 800770a:	e7e4      	b.n	80076d6 <__hi0bits+0xa>

0800770c <__lo0bits>:
 800770c:	6803      	ldr	r3, [r0, #0]
 800770e:	f013 0207 	ands.w	r2, r3, #7
 8007712:	d00c      	beq.n	800772e <__lo0bits+0x22>
 8007714:	07d9      	lsls	r1, r3, #31
 8007716:	d422      	bmi.n	800775e <__lo0bits+0x52>
 8007718:	079a      	lsls	r2, r3, #30
 800771a:	bf49      	itett	mi
 800771c:	085b      	lsrmi	r3, r3, #1
 800771e:	089b      	lsrpl	r3, r3, #2
 8007720:	6003      	strmi	r3, [r0, #0]
 8007722:	2201      	movmi	r2, #1
 8007724:	bf5c      	itt	pl
 8007726:	6003      	strpl	r3, [r0, #0]
 8007728:	2202      	movpl	r2, #2
 800772a:	4610      	mov	r0, r2
 800772c:	4770      	bx	lr
 800772e:	b299      	uxth	r1, r3
 8007730:	b909      	cbnz	r1, 8007736 <__lo0bits+0x2a>
 8007732:	0c1b      	lsrs	r3, r3, #16
 8007734:	2210      	movs	r2, #16
 8007736:	b2d9      	uxtb	r1, r3
 8007738:	b909      	cbnz	r1, 800773e <__lo0bits+0x32>
 800773a:	3208      	adds	r2, #8
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	0719      	lsls	r1, r3, #28
 8007740:	bf04      	itt	eq
 8007742:	091b      	lsreq	r3, r3, #4
 8007744:	3204      	addeq	r2, #4
 8007746:	0799      	lsls	r1, r3, #30
 8007748:	bf04      	itt	eq
 800774a:	089b      	lsreq	r3, r3, #2
 800774c:	3202      	addeq	r2, #2
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	d403      	bmi.n	800775a <__lo0bits+0x4e>
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	f102 0201 	add.w	r2, r2, #1
 8007758:	d003      	beq.n	8007762 <__lo0bits+0x56>
 800775a:	6003      	str	r3, [r0, #0]
 800775c:	e7e5      	b.n	800772a <__lo0bits+0x1e>
 800775e:	2200      	movs	r2, #0
 8007760:	e7e3      	b.n	800772a <__lo0bits+0x1e>
 8007762:	2220      	movs	r2, #32
 8007764:	e7e1      	b.n	800772a <__lo0bits+0x1e>
	...

08007768 <__i2b>:
 8007768:	b510      	push	{r4, lr}
 800776a:	460c      	mov	r4, r1
 800776c:	2101      	movs	r1, #1
 800776e:	f7ff febb 	bl	80074e8 <_Balloc>
 8007772:	4602      	mov	r2, r0
 8007774:	b928      	cbnz	r0, 8007782 <__i2b+0x1a>
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <__i2b+0x24>)
 8007778:	4805      	ldr	r0, [pc, #20]	; (8007790 <__i2b+0x28>)
 800777a:	f240 1145 	movw	r1, #325	; 0x145
 800777e:	f001 fc0b 	bl	8008f98 <__assert_func>
 8007782:	2301      	movs	r3, #1
 8007784:	6144      	str	r4, [r0, #20]
 8007786:	6103      	str	r3, [r0, #16]
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	08009dad 	.word	0x08009dad
 8007790:	08009dbe 	.word	0x08009dbe

08007794 <__multiply>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4691      	mov	r9, r2
 800779a:	690a      	ldr	r2, [r1, #16]
 800779c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	bfb8      	it	lt
 80077a4:	460b      	movlt	r3, r1
 80077a6:	460c      	mov	r4, r1
 80077a8:	bfbc      	itt	lt
 80077aa:	464c      	movlt	r4, r9
 80077ac:	4699      	movlt	r9, r3
 80077ae:	6927      	ldr	r7, [r4, #16]
 80077b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b4:	68a3      	ldr	r3, [r4, #8]
 80077b6:	6861      	ldr	r1, [r4, #4]
 80077b8:	eb07 060a 	add.w	r6, r7, sl
 80077bc:	42b3      	cmp	r3, r6
 80077be:	b085      	sub	sp, #20
 80077c0:	bfb8      	it	lt
 80077c2:	3101      	addlt	r1, #1
 80077c4:	f7ff fe90 	bl	80074e8 <_Balloc>
 80077c8:	b930      	cbnz	r0, 80077d8 <__multiply+0x44>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <__multiply+0x14c>)
 80077ce:	4845      	ldr	r0, [pc, #276]	; (80078e4 <__multiply+0x150>)
 80077d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077d4:	f001 fbe0 	bl	8008f98 <__assert_func>
 80077d8:	f100 0514 	add.w	r5, r0, #20
 80077dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e0:	462b      	mov	r3, r5
 80077e2:	2200      	movs	r2, #0
 80077e4:	4543      	cmp	r3, r8
 80077e6:	d321      	bcc.n	800782c <__multiply+0x98>
 80077e8:	f104 0314 	add.w	r3, r4, #20
 80077ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077f0:	f109 0314 	add.w	r3, r9, #20
 80077f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077f8:	9202      	str	r2, [sp, #8]
 80077fa:	1b3a      	subs	r2, r7, r4
 80077fc:	3a15      	subs	r2, #21
 80077fe:	f022 0203 	bic.w	r2, r2, #3
 8007802:	3204      	adds	r2, #4
 8007804:	f104 0115 	add.w	r1, r4, #21
 8007808:	428f      	cmp	r7, r1
 800780a:	bf38      	it	cc
 800780c:	2204      	movcc	r2, #4
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9a02      	ldr	r2, [sp, #8]
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d80c      	bhi.n	8007832 <__multiply+0x9e>
 8007818:	2e00      	cmp	r6, #0
 800781a:	dd03      	ble.n	8007824 <__multiply+0x90>
 800781c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05b      	beq.n	80078dc <__multiply+0x148>
 8007824:	6106      	str	r6, [r0, #16]
 8007826:	b005      	add	sp, #20
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	f843 2b04 	str.w	r2, [r3], #4
 8007830:	e7d8      	b.n	80077e4 <__multiply+0x50>
 8007832:	f8b3 a000 	ldrh.w	sl, [r3]
 8007836:	f1ba 0f00 	cmp.w	sl, #0
 800783a:	d024      	beq.n	8007886 <__multiply+0xf2>
 800783c:	f104 0e14 	add.w	lr, r4, #20
 8007840:	46a9      	mov	r9, r5
 8007842:	f04f 0c00 	mov.w	ip, #0
 8007846:	f85e 2b04 	ldr.w	r2, [lr], #4
 800784a:	f8d9 1000 	ldr.w	r1, [r9]
 800784e:	fa1f fb82 	uxth.w	fp, r2
 8007852:	b289      	uxth	r1, r1
 8007854:	fb0a 110b 	mla	r1, sl, fp, r1
 8007858:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800785c:	f8d9 2000 	ldr.w	r2, [r9]
 8007860:	4461      	add	r1, ip
 8007862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007866:	fb0a c20b 	mla	r2, sl, fp, ip
 800786a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800786e:	b289      	uxth	r1, r1
 8007870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007874:	4577      	cmp	r7, lr
 8007876:	f849 1b04 	str.w	r1, [r9], #4
 800787a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800787e:	d8e2      	bhi.n	8007846 <__multiply+0xb2>
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	f845 c002 	str.w	ip, [r5, r2]
 8007886:	9a03      	ldr	r2, [sp, #12]
 8007888:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800788c:	3304      	adds	r3, #4
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	d021      	beq.n	80078d8 <__multiply+0x144>
 8007894:	6829      	ldr	r1, [r5, #0]
 8007896:	f104 0c14 	add.w	ip, r4, #20
 800789a:	46ae      	mov	lr, r5
 800789c:	f04f 0a00 	mov.w	sl, #0
 80078a0:	f8bc b000 	ldrh.w	fp, [ip]
 80078a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078a8:	fb09 220b 	mla	r2, r9, fp, r2
 80078ac:	4452      	add	r2, sl
 80078ae:	b289      	uxth	r1, r1
 80078b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078b4:	f84e 1b04 	str.w	r1, [lr], #4
 80078b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078c0:	f8be 1000 	ldrh.w	r1, [lr]
 80078c4:	fb09 110a 	mla	r1, r9, sl, r1
 80078c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078cc:	4567      	cmp	r7, ip
 80078ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078d2:	d8e5      	bhi.n	80078a0 <__multiply+0x10c>
 80078d4:	9a01      	ldr	r2, [sp, #4]
 80078d6:	50a9      	str	r1, [r5, r2]
 80078d8:	3504      	adds	r5, #4
 80078da:	e799      	b.n	8007810 <__multiply+0x7c>
 80078dc:	3e01      	subs	r6, #1
 80078de:	e79b      	b.n	8007818 <__multiply+0x84>
 80078e0:	08009dad 	.word	0x08009dad
 80078e4:	08009dbe 	.word	0x08009dbe

080078e8 <__pow5mult>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4615      	mov	r5, r2
 80078ee:	f012 0203 	ands.w	r2, r2, #3
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	d007      	beq.n	8007908 <__pow5mult+0x20>
 80078f8:	4c25      	ldr	r4, [pc, #148]	; (8007990 <__pow5mult+0xa8>)
 80078fa:	3a01      	subs	r2, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007902:	f7ff fe53 	bl	80075ac <__multadd>
 8007906:	4607      	mov	r7, r0
 8007908:	10ad      	asrs	r5, r5, #2
 800790a:	d03d      	beq.n	8007988 <__pow5mult+0xa0>
 800790c:	69f4      	ldr	r4, [r6, #28]
 800790e:	b97c      	cbnz	r4, 8007930 <__pow5mult+0x48>
 8007910:	2010      	movs	r0, #16
 8007912:	f7ff fd35 	bl	8007380 <malloc>
 8007916:	4602      	mov	r2, r0
 8007918:	61f0      	str	r0, [r6, #28]
 800791a:	b928      	cbnz	r0, 8007928 <__pow5mult+0x40>
 800791c:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <__pow5mult+0xac>)
 800791e:	481e      	ldr	r0, [pc, #120]	; (8007998 <__pow5mult+0xb0>)
 8007920:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007924:	f001 fb38 	bl	8008f98 <__assert_func>
 8007928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800792c:	6004      	str	r4, [r0, #0]
 800792e:	60c4      	str	r4, [r0, #12]
 8007930:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007938:	b94c      	cbnz	r4, 800794e <__pow5mult+0x66>
 800793a:	f240 2171 	movw	r1, #625	; 0x271
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff12 	bl	8007768 <__i2b>
 8007944:	2300      	movs	r3, #0
 8007946:	f8c8 0008 	str.w	r0, [r8, #8]
 800794a:	4604      	mov	r4, r0
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	07eb      	lsls	r3, r5, #31
 8007954:	d50a      	bpl.n	800796c <__pow5mult+0x84>
 8007956:	4639      	mov	r1, r7
 8007958:	4622      	mov	r2, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ff1a 	bl	8007794 <__multiply>
 8007960:	4639      	mov	r1, r7
 8007962:	4680      	mov	r8, r0
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fdff 	bl	8007568 <_Bfree>
 800796a:	4647      	mov	r7, r8
 800796c:	106d      	asrs	r5, r5, #1
 800796e:	d00b      	beq.n	8007988 <__pow5mult+0xa0>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	b938      	cbnz	r0, 8007984 <__pow5mult+0x9c>
 8007974:	4622      	mov	r2, r4
 8007976:	4621      	mov	r1, r4
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ff0b 	bl	8007794 <__multiply>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	f8c0 9000 	str.w	r9, [r0]
 8007984:	4604      	mov	r4, r0
 8007986:	e7e4      	b.n	8007952 <__pow5mult+0x6a>
 8007988:	4638      	mov	r0, r7
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	bf00      	nop
 8007990:	08009f08 	.word	0x08009f08
 8007994:	08009d3e 	.word	0x08009d3e
 8007998:	08009dbe 	.word	0x08009dbe

0800799c <__lshift>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	4607      	mov	r7, r0
 80079ae:	4691      	mov	r9, r2
 80079b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b4:	f108 0601 	add.w	r6, r8, #1
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	db0b      	blt.n	80079d4 <__lshift+0x38>
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff fd93 	bl	80074e8 <_Balloc>
 80079c2:	4605      	mov	r5, r0
 80079c4:	b948      	cbnz	r0, 80079da <__lshift+0x3e>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <__lshift+0xd0>)
 80079ca:	4829      	ldr	r0, [pc, #164]	; (8007a70 <__lshift+0xd4>)
 80079cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079d0:	f001 fae2 	bl	8008f98 <__assert_func>
 80079d4:	3101      	adds	r1, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	e7ee      	b.n	80079b8 <__lshift+0x1c>
 80079da:	2300      	movs	r3, #0
 80079dc:	f100 0114 	add.w	r1, r0, #20
 80079e0:	f100 0210 	add.w	r2, r0, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	4553      	cmp	r3, sl
 80079e8:	db33      	blt.n	8007a52 <__lshift+0xb6>
 80079ea:	6920      	ldr	r0, [r4, #16]
 80079ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f0:	f104 0314 	add.w	r3, r4, #20
 80079f4:	f019 091f 	ands.w	r9, r9, #31
 80079f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a00:	d02b      	beq.n	8007a5a <__lshift+0xbe>
 8007a02:	f1c9 0e20 	rsb	lr, r9, #32
 8007a06:	468a      	mov	sl, r1
 8007a08:	2200      	movs	r2, #0
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a10:	4310      	orrs	r0, r2
 8007a12:	f84a 0b04 	str.w	r0, [sl], #4
 8007a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1a:	459c      	cmp	ip, r3
 8007a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a20:	d8f3      	bhi.n	8007a0a <__lshift+0x6e>
 8007a22:	ebac 0304 	sub.w	r3, ip, r4
 8007a26:	3b15      	subs	r3, #21
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	f104 0015 	add.w	r0, r4, #21
 8007a32:	4584      	cmp	ip, r0
 8007a34:	bf38      	it	cc
 8007a36:	2304      	movcc	r3, #4
 8007a38:	50ca      	str	r2, [r1, r3]
 8007a3a:	b10a      	cbz	r2, 8007a40 <__lshift+0xa4>
 8007a3c:	f108 0602 	add.w	r6, r8, #2
 8007a40:	3e01      	subs	r6, #1
 8007a42:	4638      	mov	r0, r7
 8007a44:	612e      	str	r6, [r5, #16]
 8007a46:	4621      	mov	r1, r4
 8007a48:	f7ff fd8e 	bl	8007568 <_Bfree>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a56:	3301      	adds	r3, #1
 8007a58:	e7c5      	b.n	80079e6 <__lshift+0x4a>
 8007a5a:	3904      	subs	r1, #4
 8007a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a64:	459c      	cmp	ip, r3
 8007a66:	d8f9      	bhi.n	8007a5c <__lshift+0xc0>
 8007a68:	e7ea      	b.n	8007a40 <__lshift+0xa4>
 8007a6a:	bf00      	nop
 8007a6c:	08009dad 	.word	0x08009dad
 8007a70:	08009dbe 	.word	0x08009dbe

08007a74 <__mcmp>:
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	6902      	ldr	r2, [r0, #16]
 8007a78:	690c      	ldr	r4, [r1, #16]
 8007a7a:	1b12      	subs	r2, r2, r4
 8007a7c:	d10e      	bne.n	8007a9c <__mcmp+0x28>
 8007a7e:	f100 0314 	add.w	r3, r0, #20
 8007a82:	3114      	adds	r1, #20
 8007a84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a94:	42a5      	cmp	r5, r4
 8007a96:	d003      	beq.n	8007aa0 <__mcmp+0x2c>
 8007a98:	d305      	bcc.n	8007aa6 <__mcmp+0x32>
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	bd30      	pop	{r4, r5, pc}
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	d3f3      	bcc.n	8007a8c <__mcmp+0x18>
 8007aa4:	e7fa      	b.n	8007a9c <__mcmp+0x28>
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	e7f7      	b.n	8007a9c <__mcmp+0x28>

08007aac <__mdiff>:
 8007aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4690      	mov	r8, r2
 8007aba:	f7ff ffdb 	bl	8007a74 <__mcmp>
 8007abe:	1e05      	subs	r5, r0, #0
 8007ac0:	d110      	bne.n	8007ae4 <__mdiff+0x38>
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f7ff fd0f 	bl	80074e8 <_Balloc>
 8007aca:	b930      	cbnz	r0, 8007ada <__mdiff+0x2e>
 8007acc:	4b3a      	ldr	r3, [pc, #232]	; (8007bb8 <__mdiff+0x10c>)
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f240 2137 	movw	r1, #567	; 0x237
 8007ad4:	4839      	ldr	r0, [pc, #228]	; (8007bbc <__mdiff+0x110>)
 8007ad6:	f001 fa5f 	bl	8008f98 <__assert_func>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	bfa4      	itt	ge
 8007ae6:	4643      	movge	r3, r8
 8007ae8:	46a0      	movge	r8, r4
 8007aea:	4630      	mov	r0, r6
 8007aec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007af0:	bfa6      	itte	ge
 8007af2:	461c      	movge	r4, r3
 8007af4:	2500      	movge	r5, #0
 8007af6:	2501      	movlt	r5, #1
 8007af8:	f7ff fcf6 	bl	80074e8 <_Balloc>
 8007afc:	b920      	cbnz	r0, 8007b08 <__mdiff+0x5c>
 8007afe:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <__mdiff+0x10c>)
 8007b00:	4602      	mov	r2, r0
 8007b02:	f240 2145 	movw	r1, #581	; 0x245
 8007b06:	e7e5      	b.n	8007ad4 <__mdiff+0x28>
 8007b08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b0c:	6926      	ldr	r6, [r4, #16]
 8007b0e:	60c5      	str	r5, [r0, #12]
 8007b10:	f104 0914 	add.w	r9, r4, #20
 8007b14:	f108 0514 	add.w	r5, r8, #20
 8007b18:	f100 0e14 	add.w	lr, r0, #20
 8007b1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b24:	f108 0210 	add.w	r2, r8, #16
 8007b28:	46f2      	mov	sl, lr
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b34:	fa11 f88b 	uxtah	r8, r1, fp
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	eba8 0801 	sub.w	r8, r8, r1
 8007b40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b48:	fa1f f888 	uxth.w	r8, r8
 8007b4c:	1419      	asrs	r1, r3, #16
 8007b4e:	454e      	cmp	r6, r9
 8007b50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b54:	f84a 3b04 	str.w	r3, [sl], #4
 8007b58:	d8e8      	bhi.n	8007b2c <__mdiff+0x80>
 8007b5a:	1b33      	subs	r3, r6, r4
 8007b5c:	3b15      	subs	r3, #21
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	3304      	adds	r3, #4
 8007b64:	3415      	adds	r4, #21
 8007b66:	42a6      	cmp	r6, r4
 8007b68:	bf38      	it	cc
 8007b6a:	2304      	movcc	r3, #4
 8007b6c:	441d      	add	r5, r3
 8007b6e:	4473      	add	r3, lr
 8007b70:	469e      	mov	lr, r3
 8007b72:	462e      	mov	r6, r5
 8007b74:	4566      	cmp	r6, ip
 8007b76:	d30e      	bcc.n	8007b96 <__mdiff+0xea>
 8007b78:	f10c 0203 	add.w	r2, ip, #3
 8007b7c:	1b52      	subs	r2, r2, r5
 8007b7e:	f022 0203 	bic.w	r2, r2, #3
 8007b82:	3d03      	subs	r5, #3
 8007b84:	45ac      	cmp	ip, r5
 8007b86:	bf38      	it	cc
 8007b88:	2200      	movcc	r2, #0
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b90:	b17a      	cbz	r2, 8007bb2 <__mdiff+0x106>
 8007b92:	6107      	str	r7, [r0, #16]
 8007b94:	e7a4      	b.n	8007ae0 <__mdiff+0x34>
 8007b96:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b9a:	fa11 f288 	uxtah	r2, r1, r8
 8007b9e:	1414      	asrs	r4, r2, #16
 8007ba0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007baa:	f84e 2b04 	str.w	r2, [lr], #4
 8007bae:	1421      	asrs	r1, r4, #16
 8007bb0:	e7e0      	b.n	8007b74 <__mdiff+0xc8>
 8007bb2:	3f01      	subs	r7, #1
 8007bb4:	e7ea      	b.n	8007b8c <__mdiff+0xe0>
 8007bb6:	bf00      	nop
 8007bb8:	08009dad 	.word	0x08009dad
 8007bbc:	08009dbe 	.word	0x08009dbe

08007bc0 <__ulp>:
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	ed8d 0b00 	vstr	d0, [sp]
 8007bc6:	9a01      	ldr	r2, [sp, #4]
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <__ulp+0x48>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc08      	bgt.n	8007be6 <__ulp+0x26>
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bde:	da04      	bge.n	8007bea <__ulp+0x2a>
 8007be0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007be4:	4113      	asrs	r3, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	e008      	b.n	8007bfc <__ulp+0x3c>
 8007bea:	f1a2 0314 	sub.w	r3, r2, #20
 8007bee:	2b1e      	cmp	r3, #30
 8007bf0:	bfda      	itte	le
 8007bf2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007bf6:	40da      	lsrle	r2, r3
 8007bf8:	2201      	movgt	r2, #1
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	ec41 0b10 	vmov	d0, r0, r1
 8007c04:	b002      	add	sp, #8
 8007c06:	4770      	bx	lr
 8007c08:	7ff00000 	.word	0x7ff00000

08007c0c <__b2d>:
 8007c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c10:	6906      	ldr	r6, [r0, #16]
 8007c12:	f100 0814 	add.w	r8, r0, #20
 8007c16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c1a:	1f37      	subs	r7, r6, #4
 8007c1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7ff fd53 	bl	80076cc <__hi0bits>
 8007c26:	f1c0 0320 	rsb	r3, r0, #32
 8007c2a:	280a      	cmp	r0, #10
 8007c2c:	600b      	str	r3, [r1, #0]
 8007c2e:	491b      	ldr	r1, [pc, #108]	; (8007c9c <__b2d+0x90>)
 8007c30:	dc15      	bgt.n	8007c5e <__b2d+0x52>
 8007c32:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c36:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c3a:	45b8      	cmp	r8, r7
 8007c3c:	ea43 0501 	orr.w	r5, r3, r1
 8007c40:	bf34      	ite	cc
 8007c42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c46:	2300      	movcs	r3, #0
 8007c48:	3015      	adds	r0, #21
 8007c4a:	fa02 f000 	lsl.w	r0, r2, r0
 8007c4e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c52:	4303      	orrs	r3, r0
 8007c54:	461c      	mov	r4, r3
 8007c56:	ec45 4b10 	vmov	d0, r4, r5
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5e:	45b8      	cmp	r8, r7
 8007c60:	bf3a      	itte	cc
 8007c62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c66:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c6a:	2300      	movcs	r3, #0
 8007c6c:	380b      	subs	r0, #11
 8007c6e:	d012      	beq.n	8007c96 <__b2d+0x8a>
 8007c70:	f1c0 0120 	rsb	r1, r0, #32
 8007c74:	fa23 f401 	lsr.w	r4, r3, r1
 8007c78:	4082      	lsls	r2, r0
 8007c7a:	4322      	orrs	r2, r4
 8007c7c:	4547      	cmp	r7, r8
 8007c7e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007c82:	bf8c      	ite	hi
 8007c84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007c88:	2200      	movls	r2, #0
 8007c8a:	4083      	lsls	r3, r0
 8007c8c:	40ca      	lsrs	r2, r1
 8007c8e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c92:	4313      	orrs	r3, r2
 8007c94:	e7de      	b.n	8007c54 <__b2d+0x48>
 8007c96:	ea42 0501 	orr.w	r5, r2, r1
 8007c9a:	e7db      	b.n	8007c54 <__b2d+0x48>
 8007c9c:	3ff00000 	.word	0x3ff00000

08007ca0 <__d2b>:
 8007ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	ec59 8b10 	vmov	r8, r9, d0
 8007cac:	4616      	mov	r6, r2
 8007cae:	f7ff fc1b 	bl	80074e8 <_Balloc>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	b930      	cbnz	r0, 8007cc4 <__d2b+0x24>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <__d2b+0xac>)
 8007cba:	4825      	ldr	r0, [pc, #148]	; (8007d50 <__d2b+0xb0>)
 8007cbc:	f240 310f 	movw	r1, #783	; 0x30f
 8007cc0:	f001 f96a 	bl	8008f98 <__assert_func>
 8007cc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ccc:	bb2d      	cbnz	r5, 8007d1a <__d2b+0x7a>
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	f1b8 0300 	subs.w	r3, r8, #0
 8007cd4:	d026      	beq.n	8007d24 <__d2b+0x84>
 8007cd6:	4668      	mov	r0, sp
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	f7ff fd17 	bl	800770c <__lo0bits>
 8007cde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ce2:	b1e8      	cbz	r0, 8007d20 <__d2b+0x80>
 8007ce4:	f1c0 0320 	rsb	r3, r0, #32
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	430b      	orrs	r3, r1
 8007cee:	40c2      	lsrs	r2, r0
 8007cf0:	6163      	str	r3, [r4, #20]
 8007cf2:	9201      	str	r2, [sp, #4]
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	61a3      	str	r3, [r4, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bf14      	ite	ne
 8007cfc:	2202      	movne	r2, #2
 8007cfe:	2201      	moveq	r2, #1
 8007d00:	6122      	str	r2, [r4, #16]
 8007d02:	b1bd      	cbz	r5, 8007d34 <__d2b+0x94>
 8007d04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d08:	4405      	add	r5, r0
 8007d0a:	603d      	str	r5, [r7, #0]
 8007d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	4620      	mov	r0, r4
 8007d14:	b003      	add	sp, #12
 8007d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1e:	e7d6      	b.n	8007cce <__d2b+0x2e>
 8007d20:	6161      	str	r1, [r4, #20]
 8007d22:	e7e7      	b.n	8007cf4 <__d2b+0x54>
 8007d24:	a801      	add	r0, sp, #4
 8007d26:	f7ff fcf1 	bl	800770c <__lo0bits>
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	6163      	str	r3, [r4, #20]
 8007d2e:	3020      	adds	r0, #32
 8007d30:	2201      	movs	r2, #1
 8007d32:	e7e5      	b.n	8007d00 <__d2b+0x60>
 8007d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d3c:	6038      	str	r0, [r7, #0]
 8007d3e:	6918      	ldr	r0, [r3, #16]
 8007d40:	f7ff fcc4 	bl	80076cc <__hi0bits>
 8007d44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d48:	e7e2      	b.n	8007d10 <__d2b+0x70>
 8007d4a:	bf00      	nop
 8007d4c:	08009dad 	.word	0x08009dad
 8007d50:	08009dbe 	.word	0x08009dbe

08007d54 <__ratio>:
 8007d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	4688      	mov	r8, r1
 8007d5a:	4669      	mov	r1, sp
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	f7ff ff55 	bl	8007c0c <__b2d>
 8007d62:	a901      	add	r1, sp, #4
 8007d64:	4640      	mov	r0, r8
 8007d66:	ec55 4b10 	vmov	r4, r5, d0
 8007d6a:	ee10 aa10 	vmov	sl, s0
 8007d6e:	f7ff ff4d 	bl	8007c0c <__b2d>
 8007d72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007d76:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007d80:	1a5b      	subs	r3, r3, r1
 8007d82:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007d86:	ec57 6b10 	vmov	r6, r7, d0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfd6      	itet	le
 8007d8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d92:	462a      	movgt	r2, r5
 8007d94:	463a      	movle	r2, r7
 8007d96:	46ab      	mov	fp, r5
 8007d98:	bfd6      	itet	le
 8007d9a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8007d9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007da2:	ee00 3a90 	vmovle	s1, r3
 8007da6:	ec4b ab17 	vmov	d7, sl, fp
 8007daa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8007dae:	b003      	add	sp, #12
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007db4 <__copybits>:
 8007db4:	3901      	subs	r1, #1
 8007db6:	b570      	push	{r4, r5, r6, lr}
 8007db8:	1149      	asrs	r1, r1, #5
 8007dba:	6914      	ldr	r4, [r2, #16]
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	f102 0314 	add.w	r3, r2, #20
 8007dc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007dca:	1f05      	subs	r5, r0, #4
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d30c      	bcc.n	8007dea <__copybits+0x36>
 8007dd0:	1aa3      	subs	r3, r4, r2
 8007dd2:	3b11      	subs	r3, #17
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	3211      	adds	r2, #17
 8007dda:	42a2      	cmp	r2, r4
 8007ddc:	bf88      	it	hi
 8007dde:	2300      	movhi	r3, #0
 8007de0:	4418      	add	r0, r3
 8007de2:	2300      	movs	r3, #0
 8007de4:	4288      	cmp	r0, r1
 8007de6:	d305      	bcc.n	8007df4 <__copybits+0x40>
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	f853 6b04 	ldr.w	r6, [r3], #4
 8007dee:	f845 6f04 	str.w	r6, [r5, #4]!
 8007df2:	e7eb      	b.n	8007dcc <__copybits+0x18>
 8007df4:	f840 3b04 	str.w	r3, [r0], #4
 8007df8:	e7f4      	b.n	8007de4 <__copybits+0x30>

08007dfa <__any_on>:
 8007dfa:	f100 0214 	add.w	r2, r0, #20
 8007dfe:	6900      	ldr	r0, [r0, #16]
 8007e00:	114b      	asrs	r3, r1, #5
 8007e02:	4298      	cmp	r0, r3
 8007e04:	b510      	push	{r4, lr}
 8007e06:	db11      	blt.n	8007e2c <__any_on+0x32>
 8007e08:	dd0a      	ble.n	8007e20 <__any_on+0x26>
 8007e0a:	f011 011f 	ands.w	r1, r1, #31
 8007e0e:	d007      	beq.n	8007e20 <__any_on+0x26>
 8007e10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e14:	fa24 f001 	lsr.w	r0, r4, r1
 8007e18:	fa00 f101 	lsl.w	r1, r0, r1
 8007e1c:	428c      	cmp	r4, r1
 8007e1e:	d10b      	bne.n	8007e38 <__any_on+0x3e>
 8007e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d803      	bhi.n	8007e30 <__any_on+0x36>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	bd10      	pop	{r4, pc}
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	e7f7      	b.n	8007e20 <__any_on+0x26>
 8007e30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e34:	2900      	cmp	r1, #0
 8007e36:	d0f5      	beq.n	8007e24 <__any_on+0x2a>
 8007e38:	2001      	movs	r0, #1
 8007e3a:	e7f6      	b.n	8007e2a <__any_on+0x30>

08007e3c <sulp>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460d      	mov	r5, r1
 8007e42:	4616      	mov	r6, r2
 8007e44:	ec45 4b10 	vmov	d0, r4, r5
 8007e48:	f7ff feba 	bl	8007bc0 <__ulp>
 8007e4c:	b17e      	cbz	r6, 8007e6e <sulp+0x32>
 8007e4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dd09      	ble.n	8007e6e <sulp+0x32>
 8007e5a:	051b      	lsls	r3, r3, #20
 8007e5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007e60:	2000      	movs	r0, #0
 8007e62:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007e66:	ec41 0b17 	vmov	d7, r0, r1
 8007e6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}

08007e70 <_strtod_l>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	ed2d 8b0e 	vpush	{d8-d14}
 8007e78:	b097      	sub	sp, #92	; 0x5c
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	920d      	str	r2, [sp, #52]	; 0x34
 8007e7e:	2200      	movs	r2, #0
 8007e80:	9212      	str	r2, [sp, #72]	; 0x48
 8007e82:	468a      	mov	sl, r1
 8007e84:	f04f 0800 	mov.w	r8, #0
 8007e88:	f04f 0900 	mov.w	r9, #0
 8007e8c:	460a      	mov	r2, r1
 8007e8e:	9211      	str	r2, [sp, #68]	; 0x44
 8007e90:	7811      	ldrb	r1, [r2, #0]
 8007e92:	292b      	cmp	r1, #43	; 0x2b
 8007e94:	d04c      	beq.n	8007f30 <_strtod_l+0xc0>
 8007e96:	d839      	bhi.n	8007f0c <_strtod_l+0x9c>
 8007e98:	290d      	cmp	r1, #13
 8007e9a:	d833      	bhi.n	8007f04 <_strtod_l+0x94>
 8007e9c:	2908      	cmp	r1, #8
 8007e9e:	d833      	bhi.n	8007f08 <_strtod_l+0x98>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d03c      	beq.n	8007f1e <_strtod_l+0xae>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	9208      	str	r2, [sp, #32]
 8007ea8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007eaa:	7832      	ldrb	r2, [r6, #0]
 8007eac:	2a30      	cmp	r2, #48	; 0x30
 8007eae:	f040 80b8 	bne.w	8008022 <_strtod_l+0x1b2>
 8007eb2:	7872      	ldrb	r2, [r6, #1]
 8007eb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007eb8:	2a58      	cmp	r2, #88	; 0x58
 8007eba:	d170      	bne.n	8007f9e <_strtod_l+0x12e>
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	ab12      	add	r3, sp, #72	; 0x48
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4a91      	ldr	r2, [pc, #580]	; (800810c <_strtod_l+0x29c>)
 8007ec8:	ab13      	add	r3, sp, #76	; 0x4c
 8007eca:	a911      	add	r1, sp, #68	; 0x44
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f001 f8ff 	bl	80090d0 <__gethex>
 8007ed2:	f010 070f 	ands.w	r7, r0, #15
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	d005      	beq.n	8007ee6 <_strtod_l+0x76>
 8007eda:	2f06      	cmp	r7, #6
 8007edc:	d12a      	bne.n	8007f34 <_strtod_l+0xc4>
 8007ede:	3601      	adds	r6, #1
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ee4:	9308      	str	r3, [sp, #32]
 8007ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 8555 	bne.w	8008998 <_strtod_l+0xb28>
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	ec49 8b10 	vmov	d0, r8, r9
 8007ef4:	b1cb      	cbz	r3, 8007f2a <_strtod_l+0xba>
 8007ef6:	eeb1 0b40 	vneg.f64	d0, d0
 8007efa:	b017      	add	sp, #92	; 0x5c
 8007efc:	ecbd 8b0e 	vpop	{d8-d14}
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	2920      	cmp	r1, #32
 8007f06:	d1cd      	bne.n	8007ea4 <_strtod_l+0x34>
 8007f08:	3201      	adds	r2, #1
 8007f0a:	e7c0      	b.n	8007e8e <_strtod_l+0x1e>
 8007f0c:	292d      	cmp	r1, #45	; 0x2d
 8007f0e:	d1c9      	bne.n	8007ea4 <_strtod_l+0x34>
 8007f10:	2101      	movs	r1, #1
 8007f12:	9108      	str	r1, [sp, #32]
 8007f14:	1c51      	adds	r1, r2, #1
 8007f16:	9111      	str	r1, [sp, #68]	; 0x44
 8007f18:	7852      	ldrb	r2, [r2, #1]
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1c4      	bne.n	8007ea8 <_strtod_l+0x38>
 8007f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f20:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8535 	bne.w	8008994 <_strtod_l+0xb24>
 8007f2a:	ec49 8b10 	vmov	d0, r8, r9
 8007f2e:	e7e4      	b.n	8007efa <_strtod_l+0x8a>
 8007f30:	2100      	movs	r1, #0
 8007f32:	e7ee      	b.n	8007f12 <_strtod_l+0xa2>
 8007f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f36:	b13a      	cbz	r2, 8007f48 <_strtod_l+0xd8>
 8007f38:	2135      	movs	r1, #53	; 0x35
 8007f3a:	a814      	add	r0, sp, #80	; 0x50
 8007f3c:	f7ff ff3a 	bl	8007db4 <__copybits>
 8007f40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7ff fb10 	bl	8007568 <_Bfree>
 8007f48:	1e7b      	subs	r3, r7, #1
 8007f4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d806      	bhi.n	8007f5e <_strtod_l+0xee>
 8007f50:	e8df f003 	tbb	[pc, r3]
 8007f54:	201d0314 	.word	0x201d0314
 8007f58:	14          	.byte	0x14
 8007f59:	00          	.byte	0x00
 8007f5a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007f5e:	05eb      	lsls	r3, r5, #23
 8007f60:	bf48      	it	mi
 8007f62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f6a:	0d1b      	lsrs	r3, r3, #20
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1b9      	bne.n	8007ee6 <_strtod_l+0x76>
 8007f72:	f7fe fb8f 	bl	8006694 <__errno>
 8007f76:	2322      	movs	r3, #34	; 0x22
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	e7b4      	b.n	8007ee6 <_strtod_l+0x76>
 8007f7c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007f80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f8c:	e7e7      	b.n	8007f5e <_strtod_l+0xee>
 8007f8e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008114 <_strtod_l+0x2a4>
 8007f92:	e7e4      	b.n	8007f5e <_strtod_l+0xee>
 8007f94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f98:	f04f 38ff 	mov.w	r8, #4294967295
 8007f9c:	e7df      	b.n	8007f5e <_strtod_l+0xee>
 8007f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	9211      	str	r2, [sp, #68]	; 0x44
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b30      	cmp	r3, #48	; 0x30
 8007fa8:	d0f9      	beq.n	8007f9e <_strtod_l+0x12e>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d09b      	beq.n	8007ee6 <_strtod_l+0x76>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9306      	str	r3, [sp, #24]
 8007fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	9307      	str	r3, [sp, #28]
 8007fbc:	461e      	mov	r6, r3
 8007fbe:	220a      	movs	r2, #10
 8007fc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007fc2:	7805      	ldrb	r5, [r0, #0]
 8007fc4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007fc8:	b2d9      	uxtb	r1, r3
 8007fca:	2909      	cmp	r1, #9
 8007fcc:	d92b      	bls.n	8008026 <_strtod_l+0x1b6>
 8007fce:	4950      	ldr	r1, [pc, #320]	; (8008110 <_strtod_l+0x2a0>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f000 ffa9 	bl	8008f28 <strncmp>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d035      	beq.n	8008046 <_strtod_l+0x1d6>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4633      	mov	r3, r6
 8007fe0:	4683      	mov	fp, r0
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	2a65      	cmp	r2, #101	; 0x65
 8007fe6:	d001      	beq.n	8007fec <_strtod_l+0x17c>
 8007fe8:	2a45      	cmp	r2, #69	; 0x45
 8007fea:	d118      	bne.n	800801e <_strtod_l+0x1ae>
 8007fec:	b91b      	cbnz	r3, 8007ff6 <_strtod_l+0x186>
 8007fee:	9b06      	ldr	r3, [sp, #24]
 8007ff0:	4303      	orrs	r3, r0
 8007ff2:	d094      	beq.n	8007f1e <_strtod_l+0xae>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8007ffa:	f10a 0201 	add.w	r2, sl, #1
 8007ffe:	9211      	str	r2, [sp, #68]	; 0x44
 8008000:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008004:	2a2b      	cmp	r2, #43	; 0x2b
 8008006:	d075      	beq.n	80080f4 <_strtod_l+0x284>
 8008008:	2a2d      	cmp	r2, #45	; 0x2d
 800800a:	d07b      	beq.n	8008104 <_strtod_l+0x294>
 800800c:	f04f 0e00 	mov.w	lr, #0
 8008010:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008014:	2d09      	cmp	r5, #9
 8008016:	f240 8083 	bls.w	8008120 <_strtod_l+0x2b0>
 800801a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800801e:	2500      	movs	r5, #0
 8008020:	e09e      	b.n	8008160 <_strtod_l+0x2f0>
 8008022:	2300      	movs	r3, #0
 8008024:	e7c4      	b.n	8007fb0 <_strtod_l+0x140>
 8008026:	2e08      	cmp	r6, #8
 8008028:	bfd5      	itete	le
 800802a:	9907      	ldrle	r1, [sp, #28]
 800802c:	9905      	ldrgt	r1, [sp, #20]
 800802e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008032:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008036:	f100 0001 	add.w	r0, r0, #1
 800803a:	bfd4      	ite	le
 800803c:	9307      	strle	r3, [sp, #28]
 800803e:	9305      	strgt	r3, [sp, #20]
 8008040:	3601      	adds	r6, #1
 8008042:	9011      	str	r0, [sp, #68]	; 0x44
 8008044:	e7bc      	b.n	8007fc0 <_strtod_l+0x150>
 8008046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	9211      	str	r2, [sp, #68]	; 0x44
 800804c:	785a      	ldrb	r2, [r3, #1]
 800804e:	b3ae      	cbz	r6, 80080bc <_strtod_l+0x24c>
 8008050:	4683      	mov	fp, r0
 8008052:	4633      	mov	r3, r6
 8008054:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008058:	2909      	cmp	r1, #9
 800805a:	d912      	bls.n	8008082 <_strtod_l+0x212>
 800805c:	2101      	movs	r1, #1
 800805e:	e7c1      	b.n	8007fe4 <_strtod_l+0x174>
 8008060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	9211      	str	r2, [sp, #68]	; 0x44
 8008066:	785a      	ldrb	r2, [r3, #1]
 8008068:	3001      	adds	r0, #1
 800806a:	2a30      	cmp	r2, #48	; 0x30
 800806c:	d0f8      	beq.n	8008060 <_strtod_l+0x1f0>
 800806e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008072:	2b08      	cmp	r3, #8
 8008074:	f200 8495 	bhi.w	80089a2 <_strtod_l+0xb32>
 8008078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800807a:	9309      	str	r3, [sp, #36]	; 0x24
 800807c:	4683      	mov	fp, r0
 800807e:	2000      	movs	r0, #0
 8008080:	4603      	mov	r3, r0
 8008082:	3a30      	subs	r2, #48	; 0x30
 8008084:	f100 0101 	add.w	r1, r0, #1
 8008088:	d012      	beq.n	80080b0 <_strtod_l+0x240>
 800808a:	448b      	add	fp, r1
 800808c:	eb00 0c03 	add.w	ip, r0, r3
 8008090:	4619      	mov	r1, r3
 8008092:	250a      	movs	r5, #10
 8008094:	4561      	cmp	r1, ip
 8008096:	d113      	bne.n	80080c0 <_strtod_l+0x250>
 8008098:	1819      	adds	r1, r3, r0
 800809a:	2908      	cmp	r1, #8
 800809c:	f103 0301 	add.w	r3, r3, #1
 80080a0:	4403      	add	r3, r0
 80080a2:	dc1b      	bgt.n	80080dc <_strtod_l+0x26c>
 80080a4:	9807      	ldr	r0, [sp, #28]
 80080a6:	210a      	movs	r1, #10
 80080a8:	fb01 2200 	mla	r2, r1, r0, r2
 80080ac:	9207      	str	r2, [sp, #28]
 80080ae:	2100      	movs	r1, #0
 80080b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080b2:	1c50      	adds	r0, r2, #1
 80080b4:	9011      	str	r0, [sp, #68]	; 0x44
 80080b6:	7852      	ldrb	r2, [r2, #1]
 80080b8:	4608      	mov	r0, r1
 80080ba:	e7cb      	b.n	8008054 <_strtod_l+0x1e4>
 80080bc:	4630      	mov	r0, r6
 80080be:	e7d4      	b.n	800806a <_strtod_l+0x1fa>
 80080c0:	2908      	cmp	r1, #8
 80080c2:	f101 0101 	add.w	r1, r1, #1
 80080c6:	dc03      	bgt.n	80080d0 <_strtod_l+0x260>
 80080c8:	9f07      	ldr	r7, [sp, #28]
 80080ca:	436f      	muls	r7, r5
 80080cc:	9707      	str	r7, [sp, #28]
 80080ce:	e7e1      	b.n	8008094 <_strtod_l+0x224>
 80080d0:	2910      	cmp	r1, #16
 80080d2:	bfde      	ittt	le
 80080d4:	9f05      	ldrle	r7, [sp, #20]
 80080d6:	436f      	mulle	r7, r5
 80080d8:	9705      	strle	r7, [sp, #20]
 80080da:	e7db      	b.n	8008094 <_strtod_l+0x224>
 80080dc:	2b10      	cmp	r3, #16
 80080de:	bfdf      	itttt	le
 80080e0:	9805      	ldrle	r0, [sp, #20]
 80080e2:	210a      	movle	r1, #10
 80080e4:	fb01 2200 	mlale	r2, r1, r0, r2
 80080e8:	9205      	strle	r2, [sp, #20]
 80080ea:	e7e0      	b.n	80080ae <_strtod_l+0x23e>
 80080ec:	f04f 0b00 	mov.w	fp, #0
 80080f0:	2101      	movs	r1, #1
 80080f2:	e77c      	b.n	8007fee <_strtod_l+0x17e>
 80080f4:	f04f 0e00 	mov.w	lr, #0
 80080f8:	f10a 0202 	add.w	r2, sl, #2
 80080fc:	9211      	str	r2, [sp, #68]	; 0x44
 80080fe:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008102:	e785      	b.n	8008010 <_strtod_l+0x1a0>
 8008104:	f04f 0e01 	mov.w	lr, #1
 8008108:	e7f6      	b.n	80080f8 <_strtod_l+0x288>
 800810a:	bf00      	nop
 800810c:	08009f18 	.word	0x08009f18
 8008110:	08009f14 	.word	0x08009f14
 8008114:	7ff00000 	.word	0x7ff00000
 8008118:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800811a:	1c55      	adds	r5, r2, #1
 800811c:	9511      	str	r5, [sp, #68]	; 0x44
 800811e:	7852      	ldrb	r2, [r2, #1]
 8008120:	2a30      	cmp	r2, #48	; 0x30
 8008122:	d0f9      	beq.n	8008118 <_strtod_l+0x2a8>
 8008124:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008128:	2d08      	cmp	r5, #8
 800812a:	f63f af78 	bhi.w	800801e <_strtod_l+0x1ae>
 800812e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008134:	920a      	str	r2, [sp, #40]	; 0x28
 8008136:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008138:	1c55      	adds	r5, r2, #1
 800813a:	9511      	str	r5, [sp, #68]	; 0x44
 800813c:	7852      	ldrb	r2, [r2, #1]
 800813e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8008142:	2f09      	cmp	r7, #9
 8008144:	d937      	bls.n	80081b6 <_strtod_l+0x346>
 8008146:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008148:	1bed      	subs	r5, r5, r7
 800814a:	2d08      	cmp	r5, #8
 800814c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008150:	dc02      	bgt.n	8008158 <_strtod_l+0x2e8>
 8008152:	4565      	cmp	r5, ip
 8008154:	bfa8      	it	ge
 8008156:	4665      	movge	r5, ip
 8008158:	f1be 0f00 	cmp.w	lr, #0
 800815c:	d000      	beq.n	8008160 <_strtod_l+0x2f0>
 800815e:	426d      	negs	r5, r5
 8008160:	2b00      	cmp	r3, #0
 8008162:	d14d      	bne.n	8008200 <_strtod_l+0x390>
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	4303      	orrs	r3, r0
 8008168:	f47f aebd 	bne.w	8007ee6 <_strtod_l+0x76>
 800816c:	2900      	cmp	r1, #0
 800816e:	f47f aed6 	bne.w	8007f1e <_strtod_l+0xae>
 8008172:	2a69      	cmp	r2, #105	; 0x69
 8008174:	d027      	beq.n	80081c6 <_strtod_l+0x356>
 8008176:	dc24      	bgt.n	80081c2 <_strtod_l+0x352>
 8008178:	2a49      	cmp	r2, #73	; 0x49
 800817a:	d024      	beq.n	80081c6 <_strtod_l+0x356>
 800817c:	2a4e      	cmp	r2, #78	; 0x4e
 800817e:	f47f aece 	bne.w	8007f1e <_strtod_l+0xae>
 8008182:	4995      	ldr	r1, [pc, #596]	; (80083d8 <_strtod_l+0x568>)
 8008184:	a811      	add	r0, sp, #68	; 0x44
 8008186:	f001 f9e3 	bl	8009550 <__match>
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f aec7 	beq.w	8007f1e <_strtod_l+0xae>
 8008190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b28      	cmp	r3, #40	; 0x28
 8008196:	d12d      	bne.n	80081f4 <_strtod_l+0x384>
 8008198:	4990      	ldr	r1, [pc, #576]	; (80083dc <_strtod_l+0x56c>)
 800819a:	aa14      	add	r2, sp, #80	; 0x50
 800819c:	a811      	add	r0, sp, #68	; 0x44
 800819e:	f001 f9eb 	bl	8009578 <__hexnan>
 80081a2:	2805      	cmp	r0, #5
 80081a4:	d126      	bne.n	80081f4 <_strtod_l+0x384>
 80081a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80081ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081b4:	e697      	b.n	8007ee6 <_strtod_l+0x76>
 80081b6:	250a      	movs	r5, #10
 80081b8:	fb05 2c0c 	mla	ip, r5, ip, r2
 80081bc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80081c0:	e7b9      	b.n	8008136 <_strtod_l+0x2c6>
 80081c2:	2a6e      	cmp	r2, #110	; 0x6e
 80081c4:	e7db      	b.n	800817e <_strtod_l+0x30e>
 80081c6:	4986      	ldr	r1, [pc, #536]	; (80083e0 <_strtod_l+0x570>)
 80081c8:	a811      	add	r0, sp, #68	; 0x44
 80081ca:	f001 f9c1 	bl	8009550 <__match>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f aea5 	beq.w	8007f1e <_strtod_l+0xae>
 80081d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d6:	4983      	ldr	r1, [pc, #524]	; (80083e4 <_strtod_l+0x574>)
 80081d8:	3b01      	subs	r3, #1
 80081da:	a811      	add	r0, sp, #68	; 0x44
 80081dc:	9311      	str	r3, [sp, #68]	; 0x44
 80081de:	f001 f9b7 	bl	8009550 <__match>
 80081e2:	b910      	cbnz	r0, 80081ea <_strtod_l+0x37a>
 80081e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e6:	3301      	adds	r3, #1
 80081e8:	9311      	str	r3, [sp, #68]	; 0x44
 80081ea:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80083f8 <_strtod_l+0x588>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	e678      	b.n	8007ee6 <_strtod_l+0x76>
 80081f4:	487c      	ldr	r0, [pc, #496]	; (80083e8 <_strtod_l+0x578>)
 80081f6:	f000 fec7 	bl	8008f88 <nan>
 80081fa:	ec59 8b10 	vmov	r8, r9, d0
 80081fe:	e672      	b.n	8007ee6 <_strtod_l+0x76>
 8008200:	eddd 7a07 	vldr	s15, [sp, #28]
 8008204:	eba5 020b 	sub.w	r2, r5, fp
 8008208:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800820c:	2e00      	cmp	r6, #0
 800820e:	bf08      	it	eq
 8008210:	461e      	moveq	r6, r3
 8008212:	2b10      	cmp	r3, #16
 8008214:	9206      	str	r2, [sp, #24]
 8008216:	461a      	mov	r2, r3
 8008218:	bfa8      	it	ge
 800821a:	2210      	movge	r2, #16
 800821c:	2b09      	cmp	r3, #9
 800821e:	ec59 8b17 	vmov	r8, r9, d7
 8008222:	dd0c      	ble.n	800823e <_strtod_l+0x3ce>
 8008224:	4971      	ldr	r1, [pc, #452]	; (80083ec <_strtod_l+0x57c>)
 8008226:	eddd 6a05 	vldr	s13, [sp, #20]
 800822a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800822e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008232:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008236:	eea7 6b05 	vfma.f64	d6, d7, d5
 800823a:	ec59 8b16 	vmov	r8, r9, d6
 800823e:	2b0f      	cmp	r3, #15
 8008240:	dc37      	bgt.n	80082b2 <_strtod_l+0x442>
 8008242:	9906      	ldr	r1, [sp, #24]
 8008244:	2900      	cmp	r1, #0
 8008246:	f43f ae4e 	beq.w	8007ee6 <_strtod_l+0x76>
 800824a:	dd23      	ble.n	8008294 <_strtod_l+0x424>
 800824c:	2916      	cmp	r1, #22
 800824e:	dc0b      	bgt.n	8008268 <_strtod_l+0x3f8>
 8008250:	4b66      	ldr	r3, [pc, #408]	; (80083ec <_strtod_l+0x57c>)
 8008252:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008256:	ed93 7b00 	vldr	d7, [r3]
 800825a:	ec49 8b16 	vmov	d6, r8, r9
 800825e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008262:	ec59 8b17 	vmov	r8, r9, d7
 8008266:	e63e      	b.n	8007ee6 <_strtod_l+0x76>
 8008268:	9806      	ldr	r0, [sp, #24]
 800826a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800826e:	4281      	cmp	r1, r0
 8008270:	db1f      	blt.n	80082b2 <_strtod_l+0x442>
 8008272:	4a5e      	ldr	r2, [pc, #376]	; (80083ec <_strtod_l+0x57c>)
 8008274:	f1c3 030f 	rsb	r3, r3, #15
 8008278:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800827c:	ed91 7b00 	vldr	d7, [r1]
 8008280:	ec49 8b16 	vmov	d6, r8, r9
 8008284:	1ac3      	subs	r3, r0, r3
 8008286:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800828a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800828e:	ed92 6b00 	vldr	d6, [r2]
 8008292:	e7e4      	b.n	800825e <_strtod_l+0x3ee>
 8008294:	9906      	ldr	r1, [sp, #24]
 8008296:	3116      	adds	r1, #22
 8008298:	db0b      	blt.n	80082b2 <_strtod_l+0x442>
 800829a:	4b54      	ldr	r3, [pc, #336]	; (80083ec <_strtod_l+0x57c>)
 800829c:	ebab 0505 	sub.w	r5, fp, r5
 80082a0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80082a4:	ed95 7b00 	vldr	d7, [r5]
 80082a8:	ec49 8b16 	vmov	d6, r8, r9
 80082ac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082b0:	e7d7      	b.n	8008262 <_strtod_l+0x3f2>
 80082b2:	9906      	ldr	r1, [sp, #24]
 80082b4:	1a9a      	subs	r2, r3, r2
 80082b6:	440a      	add	r2, r1
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	dd6e      	ble.n	800839a <_strtod_l+0x52a>
 80082bc:	f012 000f 	ands.w	r0, r2, #15
 80082c0:	d00a      	beq.n	80082d8 <_strtod_l+0x468>
 80082c2:	494a      	ldr	r1, [pc, #296]	; (80083ec <_strtod_l+0x57c>)
 80082c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80082c8:	ed91 7b00 	vldr	d7, [r1]
 80082cc:	ec49 8b16 	vmov	d6, r8, r9
 80082d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082d4:	ec59 8b17 	vmov	r8, r9, d7
 80082d8:	f032 020f 	bics.w	r2, r2, #15
 80082dc:	d04e      	beq.n	800837c <_strtod_l+0x50c>
 80082de:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80082e2:	dd22      	ble.n	800832a <_strtod_l+0x4ba>
 80082e4:	2500      	movs	r5, #0
 80082e6:	462e      	mov	r6, r5
 80082e8:	9507      	str	r5, [sp, #28]
 80082ea:	462f      	mov	r7, r5
 80082ec:	2322      	movs	r3, #34	; 0x22
 80082ee:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80083f8 <_strtod_l+0x588>
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	f04f 0800 	mov.w	r8, #0
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f43f adf3 	beq.w	8007ee6 <_strtod_l+0x76>
 8008300:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008302:	4620      	mov	r0, r4
 8008304:	f7ff f930 	bl	8007568 <_Bfree>
 8008308:	4639      	mov	r1, r7
 800830a:	4620      	mov	r0, r4
 800830c:	f7ff f92c 	bl	8007568 <_Bfree>
 8008310:	4631      	mov	r1, r6
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff f928 	bl	8007568 <_Bfree>
 8008318:	9907      	ldr	r1, [sp, #28]
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff f924 	bl	8007568 <_Bfree>
 8008320:	4629      	mov	r1, r5
 8008322:	4620      	mov	r0, r4
 8008324:	f7ff f920 	bl	8007568 <_Bfree>
 8008328:	e5dd      	b.n	8007ee6 <_strtod_l+0x76>
 800832a:	2000      	movs	r0, #0
 800832c:	ec49 8b17 	vmov	d7, r8, r9
 8008330:	4f2f      	ldr	r7, [pc, #188]	; (80083f0 <_strtod_l+0x580>)
 8008332:	1112      	asrs	r2, r2, #4
 8008334:	4601      	mov	r1, r0
 8008336:	2a01      	cmp	r2, #1
 8008338:	dc23      	bgt.n	8008382 <_strtod_l+0x512>
 800833a:	b108      	cbz	r0, 8008340 <_strtod_l+0x4d0>
 800833c:	ec59 8b17 	vmov	r8, r9, d7
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <_strtod_l+0x580>)
 8008342:	482c      	ldr	r0, [pc, #176]	; (80083f4 <_strtod_l+0x584>)
 8008344:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008348:	ed92 7b00 	vldr	d7, [r2]
 800834c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008350:	ec49 8b16 	vmov	d6, r8, r9
 8008354:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <_strtod_l+0x588>)
 8008356:	ee27 7b06 	vmul.f64	d7, d7, d6
 800835a:	ee17 1a90 	vmov	r1, s15
 800835e:	400a      	ands	r2, r1
 8008360:	4282      	cmp	r2, r0
 8008362:	ec59 8b17 	vmov	r8, r9, d7
 8008366:	d8bd      	bhi.n	80082e4 <_strtod_l+0x474>
 8008368:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800836c:	4282      	cmp	r2, r0
 800836e:	bf86      	itte	hi
 8008370:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80083fc <_strtod_l+0x58c>
 8008374:	f04f 38ff 	movhi.w	r8, #4294967295
 8008378:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800837c:	2200      	movs	r2, #0
 800837e:	9205      	str	r2, [sp, #20]
 8008380:	e076      	b.n	8008470 <_strtod_l+0x600>
 8008382:	f012 0f01 	tst.w	r2, #1
 8008386:	d004      	beq.n	8008392 <_strtod_l+0x522>
 8008388:	ed97 6b00 	vldr	d6, [r7]
 800838c:	2001      	movs	r0, #1
 800838e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008392:	3101      	adds	r1, #1
 8008394:	1052      	asrs	r2, r2, #1
 8008396:	3708      	adds	r7, #8
 8008398:	e7cd      	b.n	8008336 <_strtod_l+0x4c6>
 800839a:	d0ef      	beq.n	800837c <_strtod_l+0x50c>
 800839c:	4252      	negs	r2, r2
 800839e:	f012 000f 	ands.w	r0, r2, #15
 80083a2:	d00a      	beq.n	80083ba <_strtod_l+0x54a>
 80083a4:	4911      	ldr	r1, [pc, #68]	; (80083ec <_strtod_l+0x57c>)
 80083a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80083aa:	ed91 7b00 	vldr	d7, [r1]
 80083ae:	ec49 8b16 	vmov	d6, r8, r9
 80083b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80083b6:	ec59 8b17 	vmov	r8, r9, d7
 80083ba:	1112      	asrs	r2, r2, #4
 80083bc:	d0de      	beq.n	800837c <_strtod_l+0x50c>
 80083be:	2a1f      	cmp	r2, #31
 80083c0:	dd1e      	ble.n	8008400 <_strtod_l+0x590>
 80083c2:	2500      	movs	r5, #0
 80083c4:	462e      	mov	r6, r5
 80083c6:	9507      	str	r5, [sp, #28]
 80083c8:	462f      	mov	r7, r5
 80083ca:	2322      	movs	r3, #34	; 0x22
 80083cc:	f04f 0800 	mov.w	r8, #0
 80083d0:	f04f 0900 	mov.w	r9, #0
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	e78f      	b.n	80082f8 <_strtod_l+0x488>
 80083d8:	08009d05 	.word	0x08009d05
 80083dc:	08009f2c 	.word	0x08009f2c
 80083e0:	08009cfd 	.word	0x08009cfd
 80083e4:	08009d34 	.word	0x08009d34
 80083e8:	0800a0bd 	.word	0x0800a0bd
 80083ec:	08009e40 	.word	0x08009e40
 80083f0:	08009e18 	.word	0x08009e18
 80083f4:	7ca00000 	.word	0x7ca00000
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	7fefffff 	.word	0x7fefffff
 8008400:	f012 0110 	ands.w	r1, r2, #16
 8008404:	bf18      	it	ne
 8008406:	216a      	movne	r1, #106	; 0x6a
 8008408:	9105      	str	r1, [sp, #20]
 800840a:	ec49 8b17 	vmov	d7, r8, r9
 800840e:	49be      	ldr	r1, [pc, #760]	; (8008708 <_strtod_l+0x898>)
 8008410:	2000      	movs	r0, #0
 8008412:	07d7      	lsls	r7, r2, #31
 8008414:	d504      	bpl.n	8008420 <_strtod_l+0x5b0>
 8008416:	ed91 6b00 	vldr	d6, [r1]
 800841a:	2001      	movs	r0, #1
 800841c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008420:	1052      	asrs	r2, r2, #1
 8008422:	f101 0108 	add.w	r1, r1, #8
 8008426:	d1f4      	bne.n	8008412 <_strtod_l+0x5a2>
 8008428:	b108      	cbz	r0, 800842e <_strtod_l+0x5be>
 800842a:	ec59 8b17 	vmov	r8, r9, d7
 800842e:	9a05      	ldr	r2, [sp, #20]
 8008430:	b1ba      	cbz	r2, 8008462 <_strtod_l+0x5f2>
 8008432:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008436:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800843a:	2a00      	cmp	r2, #0
 800843c:	4648      	mov	r0, r9
 800843e:	dd10      	ble.n	8008462 <_strtod_l+0x5f2>
 8008440:	2a1f      	cmp	r2, #31
 8008442:	f340 812c 	ble.w	800869e <_strtod_l+0x82e>
 8008446:	2a34      	cmp	r2, #52	; 0x34
 8008448:	bfde      	ittt	le
 800844a:	f04f 32ff 	movle.w	r2, #4294967295
 800844e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008452:	408a      	lslle	r2, r1
 8008454:	f04f 0800 	mov.w	r8, #0
 8008458:	bfcc      	ite	gt
 800845a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800845e:	ea02 0900 	andle.w	r9, r2, r0
 8008462:	ec49 8b17 	vmov	d7, r8, r9
 8008466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846e:	d0a8      	beq.n	80083c2 <_strtod_l+0x552>
 8008470:	9a07      	ldr	r2, [sp, #28]
 8008472:	9200      	str	r2, [sp, #0]
 8008474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008476:	4632      	mov	r2, r6
 8008478:	4620      	mov	r0, r4
 800847a:	f7ff f8dd 	bl	8007638 <__s2b>
 800847e:	9007      	str	r0, [sp, #28]
 8008480:	2800      	cmp	r0, #0
 8008482:	f43f af2f 	beq.w	80082e4 <_strtod_l+0x474>
 8008486:	9a06      	ldr	r2, [sp, #24]
 8008488:	2a00      	cmp	r2, #0
 800848a:	ebab 0305 	sub.w	r3, fp, r5
 800848e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80086e8 <_strtod_l+0x878>
 8008492:	bfa8      	it	ge
 8008494:	2300      	movge	r3, #0
 8008496:	ed9f ab96 	vldr	d10, [pc, #600]	; 80086f0 <_strtod_l+0x880>
 800849a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80086f8 <_strtod_l+0x888>
 800849e:	9309      	str	r3, [sp, #36]	; 0x24
 80084a0:	2500      	movs	r5, #0
 80084a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084a6:	930c      	str	r3, [sp, #48]	; 0x30
 80084a8:	462e      	mov	r6, r5
 80084aa:	9b07      	ldr	r3, [sp, #28]
 80084ac:	4620      	mov	r0, r4
 80084ae:	6859      	ldr	r1, [r3, #4]
 80084b0:	f7ff f81a 	bl	80074e8 <_Balloc>
 80084b4:	4607      	mov	r7, r0
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f af18 	beq.w	80082ec <_strtod_l+0x47c>
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	3202      	adds	r2, #2
 80084c2:	f103 010c 	add.w	r1, r3, #12
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	300c      	adds	r0, #12
 80084ca:	f000 fd4f 	bl	8008f6c <memcpy>
 80084ce:	ec49 8b10 	vmov	d0, r8, r9
 80084d2:	aa14      	add	r2, sp, #80	; 0x50
 80084d4:	a913      	add	r1, sp, #76	; 0x4c
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff fbe2 	bl	8007ca0 <__d2b>
 80084dc:	ec49 8b18 	vmov	d8, r8, r9
 80084e0:	9012      	str	r0, [sp, #72]	; 0x48
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f43f af02 	beq.w	80082ec <_strtod_l+0x47c>
 80084e8:	2101      	movs	r1, #1
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff f93c 	bl	8007768 <__i2b>
 80084f0:	4606      	mov	r6, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f43f aefa 	beq.w	80082ec <_strtod_l+0x47c>
 80084f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfab      	itete	ge
 8008500:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008502:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008504:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008508:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800850c:	bfac      	ite	ge
 800850e:	eb03 0b02 	addge.w	fp, r3, r2
 8008512:	eba2 0a03 	sublt.w	sl, r2, r3
 8008516:	9a05      	ldr	r2, [sp, #20]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	440b      	add	r3, r1
 800851c:	4a7b      	ldr	r2, [pc, #492]	; (800870c <_strtod_l+0x89c>)
 800851e:	3b01      	subs	r3, #1
 8008520:	4293      	cmp	r3, r2
 8008522:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008526:	f280 80cd 	bge.w	80086c4 <_strtod_l+0x854>
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	2a1f      	cmp	r2, #31
 800852e:	eba1 0102 	sub.w	r1, r1, r2
 8008532:	f04f 0001 	mov.w	r0, #1
 8008536:	f300 80b9 	bgt.w	80086ac <_strtod_l+0x83c>
 800853a:	fa00 f302 	lsl.w	r3, r0, r2
 800853e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008540:	2300      	movs	r3, #0
 8008542:	930a      	str	r3, [sp, #40]	; 0x28
 8008544:	eb0b 0301 	add.w	r3, fp, r1
 8008548:	9a05      	ldr	r2, [sp, #20]
 800854a:	459b      	cmp	fp, r3
 800854c:	448a      	add	sl, r1
 800854e:	4492      	add	sl, r2
 8008550:	465a      	mov	r2, fp
 8008552:	bfa8      	it	ge
 8008554:	461a      	movge	r2, r3
 8008556:	4552      	cmp	r2, sl
 8008558:	bfa8      	it	ge
 800855a:	4652      	movge	r2, sl
 800855c:	2a00      	cmp	r2, #0
 800855e:	bfc2      	ittt	gt
 8008560:	1a9b      	subgt	r3, r3, r2
 8008562:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008566:	ebab 0b02 	subgt.w	fp, fp, r2
 800856a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856c:	2a00      	cmp	r2, #0
 800856e:	dd18      	ble.n	80085a2 <_strtod_l+0x732>
 8008570:	4631      	mov	r1, r6
 8008572:	4620      	mov	r0, r4
 8008574:	930f      	str	r3, [sp, #60]	; 0x3c
 8008576:	f7ff f9b7 	bl	80078e8 <__pow5mult>
 800857a:	4606      	mov	r6, r0
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f aeb5 	beq.w	80082ec <_strtod_l+0x47c>
 8008582:	4601      	mov	r1, r0
 8008584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff f904 	bl	8007794 <__multiply>
 800858c:	900e      	str	r0, [sp, #56]	; 0x38
 800858e:	2800      	cmp	r0, #0
 8008590:	f43f aeac 	beq.w	80082ec <_strtod_l+0x47c>
 8008594:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008596:	4620      	mov	r0, r4
 8008598:	f7fe ffe6 	bl	8007568 <_Bfree>
 800859c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800859e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a0:	9212      	str	r2, [sp, #72]	; 0x48
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f300 8093 	bgt.w	80086ce <_strtod_l+0x85e>
 80085a8:	9b06      	ldr	r3, [sp, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd08      	ble.n	80085c0 <_strtod_l+0x750>
 80085ae:	4639      	mov	r1, r7
 80085b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7ff f998 	bl	80078e8 <__pow5mult>
 80085b8:	4607      	mov	r7, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f43f ae96 	beq.w	80082ec <_strtod_l+0x47c>
 80085c0:	f1ba 0f00 	cmp.w	sl, #0
 80085c4:	dd08      	ble.n	80085d8 <_strtod_l+0x768>
 80085c6:	4639      	mov	r1, r7
 80085c8:	4652      	mov	r2, sl
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff f9e6 	bl	800799c <__lshift>
 80085d0:	4607      	mov	r7, r0
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f43f ae8a 	beq.w	80082ec <_strtod_l+0x47c>
 80085d8:	f1bb 0f00 	cmp.w	fp, #0
 80085dc:	dd08      	ble.n	80085f0 <_strtod_l+0x780>
 80085de:	4631      	mov	r1, r6
 80085e0:	465a      	mov	r2, fp
 80085e2:	4620      	mov	r0, r4
 80085e4:	f7ff f9da 	bl	800799c <__lshift>
 80085e8:	4606      	mov	r6, r0
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f43f ae7e 	beq.w	80082ec <_strtod_l+0x47c>
 80085f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80085f2:	463a      	mov	r2, r7
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7ff fa59 	bl	8007aac <__mdiff>
 80085fa:	4605      	mov	r5, r0
 80085fc:	2800      	cmp	r0, #0
 80085fe:	f43f ae75 	beq.w	80082ec <_strtod_l+0x47c>
 8008602:	2300      	movs	r3, #0
 8008604:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008608:	60c3      	str	r3, [r0, #12]
 800860a:	4631      	mov	r1, r6
 800860c:	f7ff fa32 	bl	8007a74 <__mcmp>
 8008610:	2800      	cmp	r0, #0
 8008612:	da7f      	bge.n	8008714 <_strtod_l+0x8a4>
 8008614:	ea5a 0a08 	orrs.w	sl, sl, r8
 8008618:	f040 80a5 	bne.w	8008766 <_strtod_l+0x8f6>
 800861c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 80a0 	bne.w	8008766 <_strtod_l+0x8f6>
 8008626:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800862a:	0d1b      	lsrs	r3, r3, #20
 800862c:	051b      	lsls	r3, r3, #20
 800862e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008632:	f240 8098 	bls.w	8008766 <_strtod_l+0x8f6>
 8008636:	696b      	ldr	r3, [r5, #20]
 8008638:	b91b      	cbnz	r3, 8008642 <_strtod_l+0x7d2>
 800863a:	692b      	ldr	r3, [r5, #16]
 800863c:	2b01      	cmp	r3, #1
 800863e:	f340 8092 	ble.w	8008766 <_strtod_l+0x8f6>
 8008642:	4629      	mov	r1, r5
 8008644:	2201      	movs	r2, #1
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff f9a8 	bl	800799c <__lshift>
 800864c:	4631      	mov	r1, r6
 800864e:	4605      	mov	r5, r0
 8008650:	f7ff fa10 	bl	8007a74 <__mcmp>
 8008654:	2800      	cmp	r0, #0
 8008656:	f340 8086 	ble.w	8008766 <_strtod_l+0x8f6>
 800865a:	9905      	ldr	r1, [sp, #20]
 800865c:	4a2c      	ldr	r2, [pc, #176]	; (8008710 <_strtod_l+0x8a0>)
 800865e:	464b      	mov	r3, r9
 8008660:	2900      	cmp	r1, #0
 8008662:	f000 809f 	beq.w	80087a4 <_strtod_l+0x934>
 8008666:	ea02 0109 	and.w	r1, r2, r9
 800866a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800866e:	f300 8099 	bgt.w	80087a4 <_strtod_l+0x934>
 8008672:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008676:	f77f aea8 	ble.w	80083ca <_strtod_l+0x55a>
 800867a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008700 <_strtod_l+0x890>
 800867e:	ec49 8b16 	vmov	d6, r8, r9
 8008682:	4b23      	ldr	r3, [pc, #140]	; (8008710 <_strtod_l+0x8a0>)
 8008684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008688:	ee17 2a90 	vmov	r2, s15
 800868c:	4013      	ands	r3, r2
 800868e:	ec59 8b17 	vmov	r8, r9, d7
 8008692:	2b00      	cmp	r3, #0
 8008694:	f47f ae34 	bne.w	8008300 <_strtod_l+0x490>
 8008698:	2322      	movs	r3, #34	; 0x22
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e630      	b.n	8008300 <_strtod_l+0x490>
 800869e:	f04f 31ff 	mov.w	r1, #4294967295
 80086a2:	fa01 f202 	lsl.w	r2, r1, r2
 80086a6:	ea02 0808 	and.w	r8, r2, r8
 80086aa:	e6da      	b.n	8008462 <_strtod_l+0x5f2>
 80086ac:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80086b0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80086b4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80086b8:	33e2      	adds	r3, #226	; 0xe2
 80086ba:	fa00 f303 	lsl.w	r3, r0, r3
 80086be:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80086c2:	e73f      	b.n	8008544 <_strtod_l+0x6d4>
 80086c4:	2200      	movs	r2, #0
 80086c6:	2301      	movs	r3, #1
 80086c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086cc:	e73a      	b.n	8008544 <_strtod_l+0x6d4>
 80086ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80086d0:	461a      	mov	r2, r3
 80086d2:	4620      	mov	r0, r4
 80086d4:	f7ff f962 	bl	800799c <__lshift>
 80086d8:	9012      	str	r0, [sp, #72]	; 0x48
 80086da:	2800      	cmp	r0, #0
 80086dc:	f47f af64 	bne.w	80085a8 <_strtod_l+0x738>
 80086e0:	e604      	b.n	80082ec <_strtod_l+0x47c>
 80086e2:	bf00      	nop
 80086e4:	f3af 8000 	nop.w
 80086e8:	94a03595 	.word	0x94a03595
 80086ec:	3fcfffff 	.word	0x3fcfffff
 80086f0:	94a03595 	.word	0x94a03595
 80086f4:	3fdfffff 	.word	0x3fdfffff
 80086f8:	35afe535 	.word	0x35afe535
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	00000000 	.word	0x00000000
 8008704:	39500000 	.word	0x39500000
 8008708:	08009f40 	.word	0x08009f40
 800870c:	fffffc02 	.word	0xfffffc02
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	46cb      	mov	fp, r9
 8008716:	d15f      	bne.n	80087d8 <_strtod_l+0x968>
 8008718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800871c:	f1ba 0f00 	cmp.w	sl, #0
 8008720:	d02a      	beq.n	8008778 <_strtod_l+0x908>
 8008722:	4aa7      	ldr	r2, [pc, #668]	; (80089c0 <_strtod_l+0xb50>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d12b      	bne.n	8008780 <_strtod_l+0x910>
 8008728:	9b05      	ldr	r3, [sp, #20]
 800872a:	4642      	mov	r2, r8
 800872c:	b1fb      	cbz	r3, 800876e <_strtod_l+0x8fe>
 800872e:	4ba5      	ldr	r3, [pc, #660]	; (80089c4 <_strtod_l+0xb54>)
 8008730:	ea09 0303 	and.w	r3, r9, r3
 8008734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008738:	f04f 31ff 	mov.w	r1, #4294967295
 800873c:	d81a      	bhi.n	8008774 <_strtod_l+0x904>
 800873e:	0d1b      	lsrs	r3, r3, #20
 8008740:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008744:	fa01 f303 	lsl.w	r3, r1, r3
 8008748:	429a      	cmp	r2, r3
 800874a:	d119      	bne.n	8008780 <_strtod_l+0x910>
 800874c:	4b9e      	ldr	r3, [pc, #632]	; (80089c8 <_strtod_l+0xb58>)
 800874e:	459b      	cmp	fp, r3
 8008750:	d102      	bne.n	8008758 <_strtod_l+0x8e8>
 8008752:	3201      	adds	r2, #1
 8008754:	f43f adca 	beq.w	80082ec <_strtod_l+0x47c>
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <_strtod_l+0xb54>)
 800875a:	ea0b 0303 	and.w	r3, fp, r3
 800875e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d186      	bne.n	800867a <_strtod_l+0x80a>
 800876c:	e5c8      	b.n	8008300 <_strtod_l+0x490>
 800876e:	f04f 33ff 	mov.w	r3, #4294967295
 8008772:	e7e9      	b.n	8008748 <_strtod_l+0x8d8>
 8008774:	460b      	mov	r3, r1
 8008776:	e7e7      	b.n	8008748 <_strtod_l+0x8d8>
 8008778:	ea53 0308 	orrs.w	r3, r3, r8
 800877c:	f43f af6d 	beq.w	800865a <_strtod_l+0x7ea>
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	b1cb      	cbz	r3, 80087b8 <_strtod_l+0x948>
 8008784:	ea13 0f0b 	tst.w	r3, fp
 8008788:	d0ed      	beq.n	8008766 <_strtod_l+0x8f6>
 800878a:	9a05      	ldr	r2, [sp, #20]
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f1ba 0f00 	cmp.w	sl, #0
 8008794:	d014      	beq.n	80087c0 <_strtod_l+0x950>
 8008796:	f7ff fb51 	bl	8007e3c <sulp>
 800879a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800879e:	ec59 8b17 	vmov	r8, r9, d7
 80087a2:	e7e0      	b.n	8008766 <_strtod_l+0x8f6>
 80087a4:	4013      	ands	r3, r2
 80087a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087b2:	f04f 38ff 	mov.w	r8, #4294967295
 80087b6:	e7d6      	b.n	8008766 <_strtod_l+0x8f6>
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ba:	ea13 0f08 	tst.w	r3, r8
 80087be:	e7e3      	b.n	8008788 <_strtod_l+0x918>
 80087c0:	f7ff fb3c 	bl	8007e3c <sulp>
 80087c4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80087c8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80087cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d0:	ec59 8b10 	vmov	r8, r9, d0
 80087d4:	d1c7      	bne.n	8008766 <_strtod_l+0x8f6>
 80087d6:	e5f8      	b.n	80083ca <_strtod_l+0x55a>
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f7ff faba 	bl	8007d54 <__ratio>
 80087e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80087e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d85f      	bhi.n	80088ae <_strtod_l+0xa3e>
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d166      	bne.n	80088c2 <_strtod_l+0xa52>
 80087f4:	f1b8 0f00 	cmp.w	r8, #0
 80087f8:	d14d      	bne.n	8008896 <_strtod_l+0xa26>
 80087fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087fe:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d162      	bne.n	80088cc <_strtod_l+0xa5c>
 8008806:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800880a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	d401      	bmi.n	8008818 <_strtod_l+0x9a8>
 8008814:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008818:	eeb1 cb4d 	vneg.f64	d12, d13
 800881c:	4869      	ldr	r0, [pc, #420]	; (80089c4 <_strtod_l+0xb54>)
 800881e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80089d0 <_strtod_l+0xb60>
 8008822:	ea0b 0100 	and.w	r1, fp, r0
 8008826:	4561      	cmp	r1, ip
 8008828:	ec53 2b1c 	vmov	r2, r3, d12
 800882c:	d17a      	bne.n	8008924 <_strtod_l+0xab4>
 800882e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008832:	ec49 8b10 	vmov	d0, r8, r9
 8008836:	910a      	str	r1, [sp, #40]	; 0x28
 8008838:	f7ff f9c2 	bl	8007bc0 <__ulp>
 800883c:	ec49 8b1e 	vmov	d14, r8, r9
 8008840:	4860      	ldr	r0, [pc, #384]	; (80089c4 <_strtod_l+0xb54>)
 8008842:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8008846:	ee1e 3a90 	vmov	r3, s29
 800884a:	4a60      	ldr	r2, [pc, #384]	; (80089cc <_strtod_l+0xb5c>)
 800884c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800884e:	4018      	ands	r0, r3
 8008850:	4290      	cmp	r0, r2
 8008852:	ec59 8b1e 	vmov	r8, r9, d14
 8008856:	d93c      	bls.n	80088d2 <_strtod_l+0xa62>
 8008858:	ee18 2a90 	vmov	r2, s17
 800885c:	4b5a      	ldr	r3, [pc, #360]	; (80089c8 <_strtod_l+0xb58>)
 800885e:	429a      	cmp	r2, r3
 8008860:	d104      	bne.n	800886c <_strtod_l+0x9fc>
 8008862:	ee18 3a10 	vmov	r3, s16
 8008866:	3301      	adds	r3, #1
 8008868:	f43f ad40 	beq.w	80082ec <_strtod_l+0x47c>
 800886c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80089c8 <_strtod_l+0xb58>
 8008870:	f04f 38ff 	mov.w	r8, #4294967295
 8008874:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008876:	4620      	mov	r0, r4
 8008878:	f7fe fe76 	bl	8007568 <_Bfree>
 800887c:	4639      	mov	r1, r7
 800887e:	4620      	mov	r0, r4
 8008880:	f7fe fe72 	bl	8007568 <_Bfree>
 8008884:	4631      	mov	r1, r6
 8008886:	4620      	mov	r0, r4
 8008888:	f7fe fe6e 	bl	8007568 <_Bfree>
 800888c:	4629      	mov	r1, r5
 800888e:	4620      	mov	r0, r4
 8008890:	f7fe fe6a 	bl	8007568 <_Bfree>
 8008894:	e609      	b.n	80084aa <_strtod_l+0x63a>
 8008896:	f1b8 0f01 	cmp.w	r8, #1
 800889a:	d103      	bne.n	80088a4 <_strtod_l+0xa34>
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	f43f ad93 	beq.w	80083ca <_strtod_l+0x55a>
 80088a4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80088a8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80088ac:	e7b6      	b.n	800881c <_strtod_l+0x9ac>
 80088ae:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80088b2:	ee20 db0d 	vmul.f64	d13, d0, d13
 80088b6:	f1ba 0f00 	cmp.w	sl, #0
 80088ba:	d0ad      	beq.n	8008818 <_strtod_l+0x9a8>
 80088bc:	eeb0 cb4d 	vmov.f64	d12, d13
 80088c0:	e7ac      	b.n	800881c <_strtod_l+0x9ac>
 80088c2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80088c6:	eeb0 db4c 	vmov.f64	d13, d12
 80088ca:	e7a7      	b.n	800881c <_strtod_l+0x9ac>
 80088cc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80088d0:	e7a4      	b.n	800881c <_strtod_l+0x9ac>
 80088d2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	46cb      	mov	fp, r9
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ca      	bne.n	8008874 <_strtod_l+0xa04>
 80088de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088e2:	0d1b      	lsrs	r3, r3, #20
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	4299      	cmp	r1, r3
 80088e8:	d1c4      	bne.n	8008874 <_strtod_l+0xa04>
 80088ea:	ec51 0b1d 	vmov	r0, r1, d13
 80088ee:	f7f7 ff0b 	bl	8000708 <__aeabi_d2lz>
 80088f2:	f7f7 fedb 	bl	80006ac <__aeabi_l2d>
 80088f6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80088fa:	ec41 0b17 	vmov	d7, r0, r1
 80088fe:	ea4b 0b08 	orr.w	fp, fp, r8
 8008902:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8008906:	ee3d db47 	vsub.f64	d13, d13, d7
 800890a:	d03c      	beq.n	8008986 <_strtod_l+0xb16>
 800890c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008914:	f53f acf4 	bmi.w	8008300 <_strtod_l+0x490>
 8008918:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800891c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008920:	dda8      	ble.n	8008874 <_strtod_l+0xa04>
 8008922:	e4ed      	b.n	8008300 <_strtod_l+0x490>
 8008924:	9805      	ldr	r0, [sp, #20]
 8008926:	b1f0      	cbz	r0, 8008966 <_strtod_l+0xaf6>
 8008928:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800892c:	d81b      	bhi.n	8008966 <_strtod_l+0xaf6>
 800892e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80089b8 <_strtod_l+0xb48>
 8008932:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893a:	d811      	bhi.n	8008960 <_strtod_l+0xaf0>
 800893c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008940:	ee1d 3a10 	vmov	r3, s26
 8008944:	2b01      	cmp	r3, #1
 8008946:	bf38      	it	cc
 8008948:	2301      	movcc	r3, #1
 800894a:	ee0d 3a10 	vmov	s26, r3
 800894e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008952:	f1ba 0f00 	cmp.w	sl, #0
 8008956:	d113      	bne.n	8008980 <_strtod_l+0xb10>
 8008958:	eeb1 7b4d 	vneg.f64	d7, d13
 800895c:	ec53 2b17 	vmov	r2, r3, d7
 8008960:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008964:	1a43      	subs	r3, r0, r1
 8008966:	eeb0 0b48 	vmov.f64	d0, d8
 800896a:	ec43 2b1c 	vmov	d12, r2, r3
 800896e:	910a      	str	r1, [sp, #40]	; 0x28
 8008970:	f7ff f926 	bl	8007bc0 <__ulp>
 8008974:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008976:	eeac 8b00 	vfma.f64	d8, d12, d0
 800897a:	ec59 8b18 	vmov	r8, r9, d8
 800897e:	e7aa      	b.n	80088d6 <_strtod_l+0xa66>
 8008980:	eeb0 7b4d 	vmov.f64	d7, d13
 8008984:	e7ea      	b.n	800895c <_strtod_l+0xaec>
 8008986:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	f57f af71 	bpl.w	8008874 <_strtod_l+0xa04>
 8008992:	e4b5      	b.n	8008300 <_strtod_l+0x490>
 8008994:	2300      	movs	r3, #0
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	f7ff baa6 	b.w	8007eee <_strtod_l+0x7e>
 80089a2:	2a65      	cmp	r2, #101	; 0x65
 80089a4:	f43f aba2 	beq.w	80080ec <_strtod_l+0x27c>
 80089a8:	2a45      	cmp	r2, #69	; 0x45
 80089aa:	f43f ab9f 	beq.w	80080ec <_strtod_l+0x27c>
 80089ae:	2101      	movs	r1, #1
 80089b0:	f7ff bbd8 	b.w	8008164 <_strtod_l+0x2f4>
 80089b4:	f3af 8000 	nop.w
 80089b8:	ffc00000 	.word	0xffc00000
 80089bc:	41dfffff 	.word	0x41dfffff
 80089c0:	000fffff 	.word	0x000fffff
 80089c4:	7ff00000 	.word	0x7ff00000
 80089c8:	7fefffff 	.word	0x7fefffff
 80089cc:	7c9fffff 	.word	0x7c9fffff
 80089d0:	7fe00000 	.word	0x7fe00000

080089d4 <_strtod_r>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <_strtod_r+0x8>)
 80089d6:	f7ff ba4b 	b.w	8007e70 <_strtod_l>
 80089da:	bf00      	nop
 80089dc:	2400006c 	.word	0x2400006c

080089e0 <_strtol_l.constprop.0>:
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e6:	d001      	beq.n	80089ec <_strtol_l.constprop.0+0xc>
 80089e8:	2b24      	cmp	r3, #36	; 0x24
 80089ea:	d906      	bls.n	80089fa <_strtol_l.constprop.0+0x1a>
 80089ec:	f7fd fe52 	bl	8006694 <__errno>
 80089f0:	2316      	movs	r3, #22
 80089f2:	6003      	str	r3, [r0, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ae0 <_strtol_l.constprop.0+0x100>
 80089fe:	460d      	mov	r5, r1
 8008a00:	462e      	mov	r6, r5
 8008a02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a06:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008a0a:	f017 0708 	ands.w	r7, r7, #8
 8008a0e:	d1f7      	bne.n	8008a00 <_strtol_l.constprop.0+0x20>
 8008a10:	2c2d      	cmp	r4, #45	; 0x2d
 8008a12:	d132      	bne.n	8008a7a <_strtol_l.constprop.0+0x9a>
 8008a14:	782c      	ldrb	r4, [r5, #0]
 8008a16:	2701      	movs	r7, #1
 8008a18:	1cb5      	adds	r5, r6, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d05b      	beq.n	8008ad6 <_strtol_l.constprop.0+0xf6>
 8008a1e:	2b10      	cmp	r3, #16
 8008a20:	d109      	bne.n	8008a36 <_strtol_l.constprop.0+0x56>
 8008a22:	2c30      	cmp	r4, #48	; 0x30
 8008a24:	d107      	bne.n	8008a36 <_strtol_l.constprop.0+0x56>
 8008a26:	782c      	ldrb	r4, [r5, #0]
 8008a28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a2c:	2c58      	cmp	r4, #88	; 0x58
 8008a2e:	d14d      	bne.n	8008acc <_strtol_l.constprop.0+0xec>
 8008a30:	786c      	ldrb	r4, [r5, #1]
 8008a32:	2310      	movs	r3, #16
 8008a34:	3502      	adds	r5, #2
 8008a36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a3e:	f04f 0e00 	mov.w	lr, #0
 8008a42:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a46:	4676      	mov	r6, lr
 8008a48:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a50:	f1bc 0f09 	cmp.w	ip, #9
 8008a54:	d816      	bhi.n	8008a84 <_strtol_l.constprop.0+0xa4>
 8008a56:	4664      	mov	r4, ip
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	dd24      	ble.n	8008aa6 <_strtol_l.constprop.0+0xc6>
 8008a5c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a60:	d008      	beq.n	8008a74 <_strtol_l.constprop.0+0x94>
 8008a62:	45b1      	cmp	r9, r6
 8008a64:	d31c      	bcc.n	8008aa0 <_strtol_l.constprop.0+0xc0>
 8008a66:	d101      	bne.n	8008a6c <_strtol_l.constprop.0+0x8c>
 8008a68:	45a2      	cmp	sl, r4
 8008a6a:	db19      	blt.n	8008aa0 <_strtol_l.constprop.0+0xc0>
 8008a6c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a70:	f04f 0e01 	mov.w	lr, #1
 8008a74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a78:	e7e8      	b.n	8008a4c <_strtol_l.constprop.0+0x6c>
 8008a7a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a7c:	bf04      	itt	eq
 8008a7e:	782c      	ldrbeq	r4, [r5, #0]
 8008a80:	1cb5      	addeq	r5, r6, #2
 8008a82:	e7ca      	b.n	8008a1a <_strtol_l.constprop.0+0x3a>
 8008a84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a88:	f1bc 0f19 	cmp.w	ip, #25
 8008a8c:	d801      	bhi.n	8008a92 <_strtol_l.constprop.0+0xb2>
 8008a8e:	3c37      	subs	r4, #55	; 0x37
 8008a90:	e7e2      	b.n	8008a58 <_strtol_l.constprop.0+0x78>
 8008a92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a96:	f1bc 0f19 	cmp.w	ip, #25
 8008a9a:	d804      	bhi.n	8008aa6 <_strtol_l.constprop.0+0xc6>
 8008a9c:	3c57      	subs	r4, #87	; 0x57
 8008a9e:	e7db      	b.n	8008a58 <_strtol_l.constprop.0+0x78>
 8008aa0:	f04f 3eff 	mov.w	lr, #4294967295
 8008aa4:	e7e6      	b.n	8008a74 <_strtol_l.constprop.0+0x94>
 8008aa6:	f1be 3fff 	cmp.w	lr, #4294967295
 8008aaa:	d105      	bne.n	8008ab8 <_strtol_l.constprop.0+0xd8>
 8008aac:	2322      	movs	r3, #34	; 0x22
 8008aae:	6003      	str	r3, [r0, #0]
 8008ab0:	4646      	mov	r6, r8
 8008ab2:	b942      	cbnz	r2, 8008ac6 <_strtol_l.constprop.0+0xe6>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	e79e      	b.n	80089f6 <_strtol_l.constprop.0+0x16>
 8008ab8:	b107      	cbz	r7, 8008abc <_strtol_l.constprop.0+0xdc>
 8008aba:	4276      	negs	r6, r6
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d0f9      	beq.n	8008ab4 <_strtol_l.constprop.0+0xd4>
 8008ac0:	f1be 0f00 	cmp.w	lr, #0
 8008ac4:	d000      	beq.n	8008ac8 <_strtol_l.constprop.0+0xe8>
 8008ac6:	1e69      	subs	r1, r5, #1
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	e7f3      	b.n	8008ab4 <_strtol_l.constprop.0+0xd4>
 8008acc:	2430      	movs	r4, #48	; 0x30
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1b1      	bne.n	8008a36 <_strtol_l.constprop.0+0x56>
 8008ad2:	2308      	movs	r3, #8
 8008ad4:	e7af      	b.n	8008a36 <_strtol_l.constprop.0+0x56>
 8008ad6:	2c30      	cmp	r4, #48	; 0x30
 8008ad8:	d0a5      	beq.n	8008a26 <_strtol_l.constprop.0+0x46>
 8008ada:	230a      	movs	r3, #10
 8008adc:	e7ab      	b.n	8008a36 <_strtol_l.constprop.0+0x56>
 8008ade:	bf00      	nop
 8008ae0:	08009f69 	.word	0x08009f69

08008ae4 <_strtol_r>:
 8008ae4:	f7ff bf7c 	b.w	80089e0 <_strtol_l.constprop.0>

08008ae8 <__ssputs_r>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	688e      	ldr	r6, [r1, #8]
 8008aee:	461f      	mov	r7, r3
 8008af0:	42be      	cmp	r6, r7
 8008af2:	680b      	ldr	r3, [r1, #0]
 8008af4:	4682      	mov	sl, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	4690      	mov	r8, r2
 8008afa:	d82c      	bhi.n	8008b56 <__ssputs_r+0x6e>
 8008afc:	898a      	ldrh	r2, [r1, #12]
 8008afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b02:	d026      	beq.n	8008b52 <__ssputs_r+0x6a>
 8008b04:	6965      	ldr	r5, [r4, #20]
 8008b06:	6909      	ldr	r1, [r1, #16]
 8008b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b0c:	eba3 0901 	sub.w	r9, r3, r1
 8008b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b14:	1c7b      	adds	r3, r7, #1
 8008b16:	444b      	add	r3, r9
 8008b18:	106d      	asrs	r5, r5, #1
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf38      	it	cc
 8008b1e:	461d      	movcc	r5, r3
 8008b20:	0553      	lsls	r3, r2, #21
 8008b22:	d527      	bpl.n	8008b74 <__ssputs_r+0x8c>
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7fe fc53 	bl	80073d0 <_malloc_r>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b360      	cbz	r0, 8008b88 <__ssputs_r+0xa0>
 8008b2e:	6921      	ldr	r1, [r4, #16]
 8008b30:	464a      	mov	r2, r9
 8008b32:	f000 fa1b 	bl	8008f6c <memcpy>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	6126      	str	r6, [r4, #16]
 8008b44:	6165      	str	r5, [r4, #20]
 8008b46:	444e      	add	r6, r9
 8008b48:	eba5 0509 	sub.w	r5, r5, r9
 8008b4c:	6026      	str	r6, [r4, #0]
 8008b4e:	60a5      	str	r5, [r4, #8]
 8008b50:	463e      	mov	r6, r7
 8008b52:	42be      	cmp	r6, r7
 8008b54:	d900      	bls.n	8008b58 <__ssputs_r+0x70>
 8008b56:	463e      	mov	r6, r7
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	f000 f9c9 	bl	8008ef4 <memmove>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	4433      	add	r3, r6
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	462a      	mov	r2, r5
 8008b76:	f000 fdac 	bl	80096d2 <_realloc_r>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1e0      	bne.n	8008b42 <__ssputs_r+0x5a>
 8008b80:	6921      	ldr	r1, [r4, #16]
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7fe fbb0 	bl	80072e8 <_free_r>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	f8ca 3000 	str.w	r3, [sl]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	e7e9      	b.n	8008b70 <__ssputs_r+0x88>

08008b9c <_svfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4698      	mov	r8, r3
 8008ba2:	898b      	ldrh	r3, [r1, #12]
 8008ba4:	061b      	lsls	r3, r3, #24
 8008ba6:	b09d      	sub	sp, #116	; 0x74
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460d      	mov	r5, r1
 8008bac:	4614      	mov	r4, r2
 8008bae:	d50e      	bpl.n	8008bce <_svfiprintf_r+0x32>
 8008bb0:	690b      	ldr	r3, [r1, #16]
 8008bb2:	b963      	cbnz	r3, 8008bce <_svfiprintf_r+0x32>
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	f7fe fc0b 	bl	80073d0 <_malloc_r>
 8008bba:	6028      	str	r0, [r5, #0]
 8008bbc:	6128      	str	r0, [r5, #16]
 8008bbe:	b920      	cbnz	r0, 8008bca <_svfiprintf_r+0x2e>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	e0d0      	b.n	8008d6c <_svfiprintf_r+0x1d0>
 8008bca:	2340      	movs	r3, #64	; 0x40
 8008bcc:	616b      	str	r3, [r5, #20]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd2:	2320      	movs	r3, #32
 8008bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bdc:	2330      	movs	r3, #48	; 0x30
 8008bde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d84 <_svfiprintf_r+0x1e8>
 8008be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be6:	f04f 0901 	mov.w	r9, #1
 8008bea:	4623      	mov	r3, r4
 8008bec:	469a      	mov	sl, r3
 8008bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf2:	b10a      	cbz	r2, 8008bf8 <_svfiprintf_r+0x5c>
 8008bf4:	2a25      	cmp	r2, #37	; 0x25
 8008bf6:	d1f9      	bne.n	8008bec <_svfiprintf_r+0x50>
 8008bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bfc:	d00b      	beq.n	8008c16 <_svfiprintf_r+0x7a>
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4622      	mov	r2, r4
 8008c02:	4629      	mov	r1, r5
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ff6f 	bl	8008ae8 <__ssputs_r>
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f000 80a9 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c12:	445a      	add	r2, fp
 8008c14:	9209      	str	r2, [sp, #36]	; 0x24
 8008c16:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80a1 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c20:	2300      	movs	r3, #0
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c2a:	f10a 0a01 	add.w	sl, sl, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c36:	931a      	str	r3, [sp, #104]	; 0x68
 8008c38:	4654      	mov	r4, sl
 8008c3a:	2205      	movs	r2, #5
 8008c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c40:	4850      	ldr	r0, [pc, #320]	; (8008d84 <_svfiprintf_r+0x1e8>)
 8008c42:	f7f7 fb4d 	bl	80002e0 <memchr>
 8008c46:	9a04      	ldr	r2, [sp, #16]
 8008c48:	b9d8      	cbnz	r0, 8008c82 <_svfiprintf_r+0xe6>
 8008c4a:	06d0      	lsls	r0, r2, #27
 8008c4c:	bf44      	itt	mi
 8008c4e:	2320      	movmi	r3, #32
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c54:	0711      	lsls	r1, r2, #28
 8008c56:	bf44      	itt	mi
 8008c58:	232b      	movmi	r3, #43	; 0x2b
 8008c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c62:	2b2a      	cmp	r3, #42	; 0x2a
 8008c64:	d015      	beq.n	8008c92 <_svfiprintf_r+0xf6>
 8008c66:	9a07      	ldr	r2, [sp, #28]
 8008c68:	4654      	mov	r4, sl
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f04f 0c0a 	mov.w	ip, #10
 8008c70:	4621      	mov	r1, r4
 8008c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c76:	3b30      	subs	r3, #48	; 0x30
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d94d      	bls.n	8008d18 <_svfiprintf_r+0x17c>
 8008c7c:	b1b0      	cbz	r0, 8008cac <_svfiprintf_r+0x110>
 8008c7e:	9207      	str	r2, [sp, #28]
 8008c80:	e014      	b.n	8008cac <_svfiprintf_r+0x110>
 8008c82:	eba0 0308 	sub.w	r3, r0, r8
 8008c86:	fa09 f303 	lsl.w	r3, r9, r3
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	46a2      	mov	sl, r4
 8008c90:	e7d2      	b.n	8008c38 <_svfiprintf_r+0x9c>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	9103      	str	r1, [sp, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfbb      	ittet	lt
 8008c9e:	425b      	neglt	r3, r3
 8008ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca4:	9307      	strge	r3, [sp, #28]
 8008ca6:	9307      	strlt	r3, [sp, #28]
 8008ca8:	bfb8      	it	lt
 8008caa:	9204      	strlt	r2, [sp, #16]
 8008cac:	7823      	ldrb	r3, [r4, #0]
 8008cae:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb0:	d10c      	bne.n	8008ccc <_svfiprintf_r+0x130>
 8008cb2:	7863      	ldrb	r3, [r4, #1]
 8008cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb6:	d134      	bne.n	8008d22 <_svfiprintf_r+0x186>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	1d1a      	adds	r2, r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	9203      	str	r2, [sp, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bfb8      	it	lt
 8008cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc8:	3402      	adds	r4, #2
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d94 <_svfiprintf_r+0x1f8>
 8008cd0:	7821      	ldrb	r1, [r4, #0]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f7f7 fb03 	bl	80002e0 <memchr>
 8008cda:	b138      	cbz	r0, 8008cec <_svfiprintf_r+0x150>
 8008cdc:	9b04      	ldr	r3, [sp, #16]
 8008cde:	eba0 000a 	sub.w	r0, r0, sl
 8008ce2:	2240      	movs	r2, #64	; 0x40
 8008ce4:	4082      	lsls	r2, r0
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	3401      	adds	r4, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf0:	4825      	ldr	r0, [pc, #148]	; (8008d88 <_svfiprintf_r+0x1ec>)
 8008cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf6:	2206      	movs	r2, #6
 8008cf8:	f7f7 faf2 	bl	80002e0 <memchr>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d038      	beq.n	8008d72 <_svfiprintf_r+0x1d6>
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <_svfiprintf_r+0x1f0>)
 8008d02:	bb1b      	cbnz	r3, 8008d4c <_svfiprintf_r+0x1b0>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	3307      	adds	r3, #7
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	4433      	add	r3, r6
 8008d14:	9309      	str	r3, [sp, #36]	; 0x24
 8008d16:	e768      	b.n	8008bea <_svfiprintf_r+0x4e>
 8008d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	2001      	movs	r0, #1
 8008d20:	e7a6      	b.n	8008c70 <_svfiprintf_r+0xd4>
 8008d22:	2300      	movs	r3, #0
 8008d24:	3401      	adds	r4, #1
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f04f 0c0a 	mov.w	ip, #10
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d34:	3a30      	subs	r2, #48	; 0x30
 8008d36:	2a09      	cmp	r2, #9
 8008d38:	d903      	bls.n	8008d42 <_svfiprintf_r+0x1a6>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0c6      	beq.n	8008ccc <_svfiprintf_r+0x130>
 8008d3e:	9105      	str	r1, [sp, #20]
 8008d40:	e7c4      	b.n	8008ccc <_svfiprintf_r+0x130>
 8008d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d46:	4604      	mov	r4, r0
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7f0      	b.n	8008d2e <_svfiprintf_r+0x192>
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <_svfiprintf_r+0x1f4>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7fc fd76 	bl	8005848 <_printf_float>
 8008d5c:	1c42      	adds	r2, r0, #1
 8008d5e:	4606      	mov	r6, r0
 8008d60:	d1d6      	bne.n	8008d10 <_svfiprintf_r+0x174>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af2d 	bmi.w	8008bc4 <_svfiprintf_r+0x28>
 8008d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6c:	b01d      	add	sp, #116	; 0x74
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	ab03      	add	r3, sp, #12
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	462a      	mov	r2, r5
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <_svfiprintf_r+0x1f4>)
 8008d7a:	a904      	add	r1, sp, #16
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7fc ffeb 	bl	8005d58 <_printf_i>
 8008d82:	e7eb      	b.n	8008d5c <_svfiprintf_r+0x1c0>
 8008d84:	0800a069 	.word	0x0800a069
 8008d88:	0800a073 	.word	0x0800a073
 8008d8c:	08005849 	.word	0x08005849
 8008d90:	08008ae9 	.word	0x08008ae9
 8008d94:	0800a06f 	.word	0x0800a06f

08008d98 <__sflush_r>:
 8008d98:	898a      	ldrh	r2, [r1, #12]
 8008d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	4605      	mov	r5, r0
 8008da0:	0710      	lsls	r0, r2, #28
 8008da2:	460c      	mov	r4, r1
 8008da4:	d458      	bmi.n	8008e58 <__sflush_r+0xc0>
 8008da6:	684b      	ldr	r3, [r1, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc05      	bgt.n	8008db8 <__sflush_r+0x20>
 8008dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dc02      	bgt.n	8008db8 <__sflush_r+0x20>
 8008db2:	2000      	movs	r0, #0
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dba:	2e00      	cmp	r6, #0
 8008dbc:	d0f9      	beq.n	8008db2 <__sflush_r+0x1a>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc4:	682f      	ldr	r7, [r5, #0]
 8008dc6:	6a21      	ldr	r1, [r4, #32]
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	d032      	beq.n	8008e32 <__sflush_r+0x9a>
 8008dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	075a      	lsls	r2, r3, #29
 8008dd2:	d505      	bpl.n	8008de0 <__sflush_r+0x48>
 8008dd4:	6863      	ldr	r3, [r4, #4]
 8008dd6:	1ac0      	subs	r0, r0, r3
 8008dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dda:	b10b      	cbz	r3, 8008de0 <__sflush_r+0x48>
 8008ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dde:	1ac0      	subs	r0, r0, r3
 8008de0:	2300      	movs	r3, #0
 8008de2:	4602      	mov	r2, r0
 8008de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de6:	6a21      	ldr	r1, [r4, #32]
 8008de8:	4628      	mov	r0, r5
 8008dea:	47b0      	blx	r6
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	d106      	bne.n	8008e00 <__sflush_r+0x68>
 8008df2:	6829      	ldr	r1, [r5, #0]
 8008df4:	291d      	cmp	r1, #29
 8008df6:	d82b      	bhi.n	8008e50 <__sflush_r+0xb8>
 8008df8:	4a29      	ldr	r2, [pc, #164]	; (8008ea0 <__sflush_r+0x108>)
 8008dfa:	410a      	asrs	r2, r1
 8008dfc:	07d6      	lsls	r6, r2, #31
 8008dfe:	d427      	bmi.n	8008e50 <__sflush_r+0xb8>
 8008e00:	2200      	movs	r2, #0
 8008e02:	6062      	str	r2, [r4, #4]
 8008e04:	04d9      	lsls	r1, r3, #19
 8008e06:	6922      	ldr	r2, [r4, #16]
 8008e08:	6022      	str	r2, [r4, #0]
 8008e0a:	d504      	bpl.n	8008e16 <__sflush_r+0x7e>
 8008e0c:	1c42      	adds	r2, r0, #1
 8008e0e:	d101      	bne.n	8008e14 <__sflush_r+0x7c>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b903      	cbnz	r3, 8008e16 <__sflush_r+0x7e>
 8008e14:	6560      	str	r0, [r4, #84]	; 0x54
 8008e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e18:	602f      	str	r7, [r5, #0]
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	d0c9      	beq.n	8008db2 <__sflush_r+0x1a>
 8008e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d002      	beq.n	8008e2c <__sflush_r+0x94>
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7fe fa5e 	bl	80072e8 <_free_r>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8008e30:	e7c0      	b.n	8008db4 <__sflush_r+0x1c>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b0      	blx	r6
 8008e38:	1c41      	adds	r1, r0, #1
 8008e3a:	d1c8      	bne.n	8008dce <__sflush_r+0x36>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0c5      	beq.n	8008dce <__sflush_r+0x36>
 8008e42:	2b1d      	cmp	r3, #29
 8008e44:	d001      	beq.n	8008e4a <__sflush_r+0xb2>
 8008e46:	2b16      	cmp	r3, #22
 8008e48:	d101      	bne.n	8008e4e <__sflush_r+0xb6>
 8008e4a:	602f      	str	r7, [r5, #0]
 8008e4c:	e7b1      	b.n	8008db2 <__sflush_r+0x1a>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	e7ad      	b.n	8008db4 <__sflush_r+0x1c>
 8008e58:	690f      	ldr	r7, [r1, #16]
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d0a9      	beq.n	8008db2 <__sflush_r+0x1a>
 8008e5e:	0793      	lsls	r3, r2, #30
 8008e60:	680e      	ldr	r6, [r1, #0]
 8008e62:	bf08      	it	eq
 8008e64:	694b      	ldreq	r3, [r1, #20]
 8008e66:	600f      	str	r7, [r1, #0]
 8008e68:	bf18      	it	ne
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	eba6 0807 	sub.w	r8, r6, r7
 8008e70:	608b      	str	r3, [r1, #8]
 8008e72:	f1b8 0f00 	cmp.w	r8, #0
 8008e76:	dd9c      	ble.n	8008db2 <__sflush_r+0x1a>
 8008e78:	6a21      	ldr	r1, [r4, #32]
 8008e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e7c:	4643      	mov	r3, r8
 8008e7e:	463a      	mov	r2, r7
 8008e80:	4628      	mov	r0, r5
 8008e82:	47b0      	blx	r6
 8008e84:	2800      	cmp	r0, #0
 8008e86:	dc06      	bgt.n	8008e96 <__sflush_r+0xfe>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e78e      	b.n	8008db4 <__sflush_r+0x1c>
 8008e96:	4407      	add	r7, r0
 8008e98:	eba8 0800 	sub.w	r8, r8, r0
 8008e9c:	e7e9      	b.n	8008e72 <__sflush_r+0xda>
 8008e9e:	bf00      	nop
 8008ea0:	dfbffffe 	.word	0xdfbffffe

08008ea4 <_fflush_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	690b      	ldr	r3, [r1, #16]
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	b913      	cbnz	r3, 8008eb4 <_fflush_r+0x10>
 8008eae:	2500      	movs	r5, #0
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	b118      	cbz	r0, 8008ebe <_fflush_r+0x1a>
 8008eb6:	6a03      	ldr	r3, [r0, #32]
 8008eb8:	b90b      	cbnz	r3, 8008ebe <_fflush_r+0x1a>
 8008eba:	f7fd faff 	bl	80064bc <__sinit>
 8008ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0f3      	beq.n	8008eae <_fflush_r+0xa>
 8008ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ec8:	07d0      	lsls	r0, r2, #31
 8008eca:	d404      	bmi.n	8008ed6 <_fflush_r+0x32>
 8008ecc:	0599      	lsls	r1, r3, #22
 8008ece:	d402      	bmi.n	8008ed6 <_fflush_r+0x32>
 8008ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed2:	f7fd fc0a 	bl	80066ea <__retarget_lock_acquire_recursive>
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	4621      	mov	r1, r4
 8008eda:	f7ff ff5d 	bl	8008d98 <__sflush_r>
 8008ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ee0:	07da      	lsls	r2, r3, #31
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	d4e4      	bmi.n	8008eb0 <_fflush_r+0xc>
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	059b      	lsls	r3, r3, #22
 8008eea:	d4e1      	bmi.n	8008eb0 <_fflush_r+0xc>
 8008eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eee:	f7fd fbfd 	bl	80066ec <__retarget_lock_release_recursive>
 8008ef2:	e7dd      	b.n	8008eb0 <_fflush_r+0xc>

08008ef4 <memmove>:
 8008ef4:	4288      	cmp	r0, r1
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	eb01 0402 	add.w	r4, r1, r2
 8008efc:	d902      	bls.n	8008f04 <memmove+0x10>
 8008efe:	4284      	cmp	r4, r0
 8008f00:	4623      	mov	r3, r4
 8008f02:	d807      	bhi.n	8008f14 <memmove+0x20>
 8008f04:	1e43      	subs	r3, r0, #1
 8008f06:	42a1      	cmp	r1, r4
 8008f08:	d008      	beq.n	8008f1c <memmove+0x28>
 8008f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f12:	e7f8      	b.n	8008f06 <memmove+0x12>
 8008f14:	4402      	add	r2, r0
 8008f16:	4601      	mov	r1, r0
 8008f18:	428a      	cmp	r2, r1
 8008f1a:	d100      	bne.n	8008f1e <memmove+0x2a>
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f26:	e7f7      	b.n	8008f18 <memmove+0x24>

08008f28 <strncmp>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	b16a      	cbz	r2, 8008f48 <strncmp+0x20>
 8008f2c:	3901      	subs	r1, #1
 8008f2e:	1884      	adds	r4, r0, r2
 8008f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d103      	bne.n	8008f44 <strncmp+0x1c>
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d001      	beq.n	8008f44 <strncmp+0x1c>
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d1f5      	bne.n	8008f30 <strncmp+0x8>
 8008f44:	1ad0      	subs	r0, r2, r3
 8008f46:	bd10      	pop	{r4, pc}
 8008f48:	4610      	mov	r0, r2
 8008f4a:	e7fc      	b.n	8008f46 <strncmp+0x1e>

08008f4c <_sbrk_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	; (8008f68 <_sbrk_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7f8 f8f0 	bl	800113c <_sbrk>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_sbrk_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_sbrk_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	240003d8 	.word	0x240003d8

08008f6c <memcpy>:
 8008f6c:	440a      	add	r2, r1
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f74:	d100      	bne.n	8008f78 <memcpy+0xc>
 8008f76:	4770      	bx	lr
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d1f9      	bne.n	8008f7a <memcpy+0xe>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <nan>:
 8008f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f90 <nan+0x8>
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	00000000 	.word	0x00000000
 8008f94:	7ff80000 	.word	0x7ff80000

08008f98 <__assert_func>:
 8008f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__assert_func+0x2c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	68d8      	ldr	r0, [r3, #12]
 8008fa6:	b14c      	cbz	r4, 8008fbc <__assert_func+0x24>
 8008fa8:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <__assert_func+0x30>)
 8008faa:	9100      	str	r1, [sp, #0]
 8008fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fb0:	4906      	ldr	r1, [pc, #24]	; (8008fcc <__assert_func+0x34>)
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f000 fbca 	bl	800974c <fiprintf>
 8008fb8:	f000 fbda 	bl	8009770 <abort>
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <__assert_func+0x38>)
 8008fbe:	461c      	mov	r4, r3
 8008fc0:	e7f3      	b.n	8008faa <__assert_func+0x12>
 8008fc2:	bf00      	nop
 8008fc4:	24000068 	.word	0x24000068
 8008fc8:	0800a082 	.word	0x0800a082
 8008fcc:	0800a08f 	.word	0x0800a08f
 8008fd0:	0800a0bd 	.word	0x0800a0bd

08008fd4 <_calloc_r>:
 8008fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fd6:	fba1 2402 	umull	r2, r4, r1, r2
 8008fda:	b94c      	cbnz	r4, 8008ff0 <_calloc_r+0x1c>
 8008fdc:	4611      	mov	r1, r2
 8008fde:	9201      	str	r2, [sp, #4]
 8008fe0:	f7fe f9f6 	bl	80073d0 <_malloc_r>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b930      	cbnz	r0, 8008ff8 <_calloc_r+0x24>
 8008fea:	4628      	mov	r0, r5
 8008fec:	b003      	add	sp, #12
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	220c      	movs	r2, #12
 8008ff2:	6002      	str	r2, [r0, #0]
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	e7f8      	b.n	8008fea <_calloc_r+0x16>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f7fd faf8 	bl	80065ee <memset>
 8008ffe:	e7f4      	b.n	8008fea <_calloc_r+0x16>

08009000 <rshift>:
 8009000:	6903      	ldr	r3, [r0, #16]
 8009002:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800900a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800900e:	f100 0414 	add.w	r4, r0, #20
 8009012:	dd45      	ble.n	80090a0 <rshift+0xa0>
 8009014:	f011 011f 	ands.w	r1, r1, #31
 8009018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800901c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009020:	d10c      	bne.n	800903c <rshift+0x3c>
 8009022:	f100 0710 	add.w	r7, r0, #16
 8009026:	4629      	mov	r1, r5
 8009028:	42b1      	cmp	r1, r6
 800902a:	d334      	bcc.n	8009096 <rshift+0x96>
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	1eea      	subs	r2, r5, #3
 8009032:	4296      	cmp	r6, r2
 8009034:	bf38      	it	cc
 8009036:	2300      	movcc	r3, #0
 8009038:	4423      	add	r3, r4
 800903a:	e015      	b.n	8009068 <rshift+0x68>
 800903c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009040:	f1c1 0820 	rsb	r8, r1, #32
 8009044:	40cf      	lsrs	r7, r1
 8009046:	f105 0e04 	add.w	lr, r5, #4
 800904a:	46a1      	mov	r9, r4
 800904c:	4576      	cmp	r6, lr
 800904e:	46f4      	mov	ip, lr
 8009050:	d815      	bhi.n	800907e <rshift+0x7e>
 8009052:	1a9a      	subs	r2, r3, r2
 8009054:	0092      	lsls	r2, r2, #2
 8009056:	3a04      	subs	r2, #4
 8009058:	3501      	adds	r5, #1
 800905a:	42ae      	cmp	r6, r5
 800905c:	bf38      	it	cc
 800905e:	2200      	movcc	r2, #0
 8009060:	18a3      	adds	r3, r4, r2
 8009062:	50a7      	str	r7, [r4, r2]
 8009064:	b107      	cbz	r7, 8009068 <rshift+0x68>
 8009066:	3304      	adds	r3, #4
 8009068:	1b1a      	subs	r2, r3, r4
 800906a:	42a3      	cmp	r3, r4
 800906c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009070:	bf08      	it	eq
 8009072:	2300      	moveq	r3, #0
 8009074:	6102      	str	r2, [r0, #16]
 8009076:	bf08      	it	eq
 8009078:	6143      	streq	r3, [r0, #20]
 800907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800907e:	f8dc c000 	ldr.w	ip, [ip]
 8009082:	fa0c fc08 	lsl.w	ip, ip, r8
 8009086:	ea4c 0707 	orr.w	r7, ip, r7
 800908a:	f849 7b04 	str.w	r7, [r9], #4
 800908e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009092:	40cf      	lsrs	r7, r1
 8009094:	e7da      	b.n	800904c <rshift+0x4c>
 8009096:	f851 cb04 	ldr.w	ip, [r1], #4
 800909a:	f847 cf04 	str.w	ip, [r7, #4]!
 800909e:	e7c3      	b.n	8009028 <rshift+0x28>
 80090a0:	4623      	mov	r3, r4
 80090a2:	e7e1      	b.n	8009068 <rshift+0x68>

080090a4 <__hexdig_fun>:
 80090a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d802      	bhi.n	80090b2 <__hexdig_fun+0xe>
 80090ac:	3820      	subs	r0, #32
 80090ae:	b2c0      	uxtb	r0, r0
 80090b0:	4770      	bx	lr
 80090b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	d801      	bhi.n	80090be <__hexdig_fun+0x1a>
 80090ba:	3847      	subs	r0, #71	; 0x47
 80090bc:	e7f7      	b.n	80090ae <__hexdig_fun+0xa>
 80090be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	d801      	bhi.n	80090ca <__hexdig_fun+0x26>
 80090c6:	3827      	subs	r0, #39	; 0x27
 80090c8:	e7f1      	b.n	80090ae <__hexdig_fun+0xa>
 80090ca:	2000      	movs	r0, #0
 80090cc:	4770      	bx	lr
	...

080090d0 <__gethex>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	4617      	mov	r7, r2
 80090d6:	680a      	ldr	r2, [r1, #0]
 80090d8:	b085      	sub	sp, #20
 80090da:	f102 0b02 	add.w	fp, r2, #2
 80090de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80090e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80090e6:	4681      	mov	r9, r0
 80090e8:	468a      	mov	sl, r1
 80090ea:	9302      	str	r3, [sp, #8]
 80090ec:	32fe      	adds	r2, #254	; 0xfe
 80090ee:	eb02 030b 	add.w	r3, r2, fp
 80090f2:	46d8      	mov	r8, fp
 80090f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	2830      	cmp	r0, #48	; 0x30
 80090fc:	d0f7      	beq.n	80090ee <__gethex+0x1e>
 80090fe:	f7ff ffd1 	bl	80090a4 <__hexdig_fun>
 8009102:	4604      	mov	r4, r0
 8009104:	2800      	cmp	r0, #0
 8009106:	d138      	bne.n	800917a <__gethex+0xaa>
 8009108:	49a7      	ldr	r1, [pc, #668]	; (80093a8 <__gethex+0x2d8>)
 800910a:	2201      	movs	r2, #1
 800910c:	4640      	mov	r0, r8
 800910e:	f7ff ff0b 	bl	8008f28 <strncmp>
 8009112:	4606      	mov	r6, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	d169      	bne.n	80091ec <__gethex+0x11c>
 8009118:	f898 0001 	ldrb.w	r0, [r8, #1]
 800911c:	465d      	mov	r5, fp
 800911e:	f7ff ffc1 	bl	80090a4 <__hexdig_fun>
 8009122:	2800      	cmp	r0, #0
 8009124:	d064      	beq.n	80091f0 <__gethex+0x120>
 8009126:	465a      	mov	r2, fp
 8009128:	7810      	ldrb	r0, [r2, #0]
 800912a:	2830      	cmp	r0, #48	; 0x30
 800912c:	4690      	mov	r8, r2
 800912e:	f102 0201 	add.w	r2, r2, #1
 8009132:	d0f9      	beq.n	8009128 <__gethex+0x58>
 8009134:	f7ff ffb6 	bl	80090a4 <__hexdig_fun>
 8009138:	2301      	movs	r3, #1
 800913a:	fab0 f480 	clz	r4, r0
 800913e:	0964      	lsrs	r4, r4, #5
 8009140:	465e      	mov	r6, fp
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	4642      	mov	r2, r8
 8009146:	4615      	mov	r5, r2
 8009148:	3201      	adds	r2, #1
 800914a:	7828      	ldrb	r0, [r5, #0]
 800914c:	f7ff ffaa 	bl	80090a4 <__hexdig_fun>
 8009150:	2800      	cmp	r0, #0
 8009152:	d1f8      	bne.n	8009146 <__gethex+0x76>
 8009154:	4994      	ldr	r1, [pc, #592]	; (80093a8 <__gethex+0x2d8>)
 8009156:	2201      	movs	r2, #1
 8009158:	4628      	mov	r0, r5
 800915a:	f7ff fee5 	bl	8008f28 <strncmp>
 800915e:	b978      	cbnz	r0, 8009180 <__gethex+0xb0>
 8009160:	b946      	cbnz	r6, 8009174 <__gethex+0xa4>
 8009162:	1c6e      	adds	r6, r5, #1
 8009164:	4632      	mov	r2, r6
 8009166:	4615      	mov	r5, r2
 8009168:	3201      	adds	r2, #1
 800916a:	7828      	ldrb	r0, [r5, #0]
 800916c:	f7ff ff9a 	bl	80090a4 <__hexdig_fun>
 8009170:	2800      	cmp	r0, #0
 8009172:	d1f8      	bne.n	8009166 <__gethex+0x96>
 8009174:	1b73      	subs	r3, r6, r5
 8009176:	009e      	lsls	r6, r3, #2
 8009178:	e004      	b.n	8009184 <__gethex+0xb4>
 800917a:	2400      	movs	r4, #0
 800917c:	4626      	mov	r6, r4
 800917e:	e7e1      	b.n	8009144 <__gethex+0x74>
 8009180:	2e00      	cmp	r6, #0
 8009182:	d1f7      	bne.n	8009174 <__gethex+0xa4>
 8009184:	782b      	ldrb	r3, [r5, #0]
 8009186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800918a:	2b50      	cmp	r3, #80	; 0x50
 800918c:	d13d      	bne.n	800920a <__gethex+0x13a>
 800918e:	786b      	ldrb	r3, [r5, #1]
 8009190:	2b2b      	cmp	r3, #43	; 0x2b
 8009192:	d02f      	beq.n	80091f4 <__gethex+0x124>
 8009194:	2b2d      	cmp	r3, #45	; 0x2d
 8009196:	d031      	beq.n	80091fc <__gethex+0x12c>
 8009198:	1c69      	adds	r1, r5, #1
 800919a:	f04f 0b00 	mov.w	fp, #0
 800919e:	7808      	ldrb	r0, [r1, #0]
 80091a0:	f7ff ff80 	bl	80090a4 <__hexdig_fun>
 80091a4:	1e42      	subs	r2, r0, #1
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	2a18      	cmp	r2, #24
 80091aa:	d82e      	bhi.n	800920a <__gethex+0x13a>
 80091ac:	f1a0 0210 	sub.w	r2, r0, #16
 80091b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091b4:	f7ff ff76 	bl	80090a4 <__hexdig_fun>
 80091b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80091bc:	fa5f fc8c 	uxtb.w	ip, ip
 80091c0:	f1bc 0f18 	cmp.w	ip, #24
 80091c4:	d91d      	bls.n	8009202 <__gethex+0x132>
 80091c6:	f1bb 0f00 	cmp.w	fp, #0
 80091ca:	d000      	beq.n	80091ce <__gethex+0xfe>
 80091cc:	4252      	negs	r2, r2
 80091ce:	4416      	add	r6, r2
 80091d0:	f8ca 1000 	str.w	r1, [sl]
 80091d4:	b1dc      	cbz	r4, 800920e <__gethex+0x13e>
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	f04f 0800 	movne.w	r8, #0
 80091e0:	f04f 0806 	moveq.w	r8, #6
 80091e4:	4640      	mov	r0, r8
 80091e6:	b005      	add	sp, #20
 80091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ec:	4645      	mov	r5, r8
 80091ee:	4626      	mov	r6, r4
 80091f0:	2401      	movs	r4, #1
 80091f2:	e7c7      	b.n	8009184 <__gethex+0xb4>
 80091f4:	f04f 0b00 	mov.w	fp, #0
 80091f8:	1ca9      	adds	r1, r5, #2
 80091fa:	e7d0      	b.n	800919e <__gethex+0xce>
 80091fc:	f04f 0b01 	mov.w	fp, #1
 8009200:	e7fa      	b.n	80091f8 <__gethex+0x128>
 8009202:	230a      	movs	r3, #10
 8009204:	fb03 0002 	mla	r0, r3, r2, r0
 8009208:	e7d0      	b.n	80091ac <__gethex+0xdc>
 800920a:	4629      	mov	r1, r5
 800920c:	e7e0      	b.n	80091d0 <__gethex+0x100>
 800920e:	eba5 0308 	sub.w	r3, r5, r8
 8009212:	3b01      	subs	r3, #1
 8009214:	4621      	mov	r1, r4
 8009216:	2b07      	cmp	r3, #7
 8009218:	dc0a      	bgt.n	8009230 <__gethex+0x160>
 800921a:	4648      	mov	r0, r9
 800921c:	f7fe f964 	bl	80074e8 <_Balloc>
 8009220:	4604      	mov	r4, r0
 8009222:	b940      	cbnz	r0, 8009236 <__gethex+0x166>
 8009224:	4b61      	ldr	r3, [pc, #388]	; (80093ac <__gethex+0x2dc>)
 8009226:	4602      	mov	r2, r0
 8009228:	21e4      	movs	r1, #228	; 0xe4
 800922a:	4861      	ldr	r0, [pc, #388]	; (80093b0 <__gethex+0x2e0>)
 800922c:	f7ff feb4 	bl	8008f98 <__assert_func>
 8009230:	3101      	adds	r1, #1
 8009232:	105b      	asrs	r3, r3, #1
 8009234:	e7ef      	b.n	8009216 <__gethex+0x146>
 8009236:	f100 0a14 	add.w	sl, r0, #20
 800923a:	2300      	movs	r3, #0
 800923c:	495a      	ldr	r1, [pc, #360]	; (80093a8 <__gethex+0x2d8>)
 800923e:	f8cd a004 	str.w	sl, [sp, #4]
 8009242:	469b      	mov	fp, r3
 8009244:	45a8      	cmp	r8, r5
 8009246:	d342      	bcc.n	80092ce <__gethex+0x1fe>
 8009248:	9801      	ldr	r0, [sp, #4]
 800924a:	f840 bb04 	str.w	fp, [r0], #4
 800924e:	eba0 000a 	sub.w	r0, r0, sl
 8009252:	1080      	asrs	r0, r0, #2
 8009254:	6120      	str	r0, [r4, #16]
 8009256:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800925a:	4658      	mov	r0, fp
 800925c:	f7fe fa36 	bl	80076cc <__hi0bits>
 8009260:	683d      	ldr	r5, [r7, #0]
 8009262:	eba8 0000 	sub.w	r0, r8, r0
 8009266:	42a8      	cmp	r0, r5
 8009268:	dd59      	ble.n	800931e <__gethex+0x24e>
 800926a:	eba0 0805 	sub.w	r8, r0, r5
 800926e:	4641      	mov	r1, r8
 8009270:	4620      	mov	r0, r4
 8009272:	f7fe fdc2 	bl	8007dfa <__any_on>
 8009276:	4683      	mov	fp, r0
 8009278:	b1b8      	cbz	r0, 80092aa <__gethex+0x1da>
 800927a:	f108 33ff 	add.w	r3, r8, #4294967295
 800927e:	1159      	asrs	r1, r3, #5
 8009280:	f003 021f 	and.w	r2, r3, #31
 8009284:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009288:	f04f 0b01 	mov.w	fp, #1
 800928c:	fa0b f202 	lsl.w	r2, fp, r2
 8009290:	420a      	tst	r2, r1
 8009292:	d00a      	beq.n	80092aa <__gethex+0x1da>
 8009294:	455b      	cmp	r3, fp
 8009296:	dd06      	ble.n	80092a6 <__gethex+0x1d6>
 8009298:	f1a8 0102 	sub.w	r1, r8, #2
 800929c:	4620      	mov	r0, r4
 800929e:	f7fe fdac 	bl	8007dfa <__any_on>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d138      	bne.n	8009318 <__gethex+0x248>
 80092a6:	f04f 0b02 	mov.w	fp, #2
 80092aa:	4641      	mov	r1, r8
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7ff fea7 	bl	8009000 <rshift>
 80092b2:	4446      	add	r6, r8
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	42b3      	cmp	r3, r6
 80092b8:	da41      	bge.n	800933e <__gethex+0x26e>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4648      	mov	r0, r9
 80092be:	f7fe f953 	bl	8007568 <_Bfree>
 80092c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092c4:	2300      	movs	r3, #0
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80092cc:	e78a      	b.n	80091e4 <__gethex+0x114>
 80092ce:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80092d2:	2a2e      	cmp	r2, #46	; 0x2e
 80092d4:	d014      	beq.n	8009300 <__gethex+0x230>
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	d106      	bne.n	80092e8 <__gethex+0x218>
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	f843 bb04 	str.w	fp, [r3], #4
 80092e0:	f04f 0b00 	mov.w	fp, #0
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	465b      	mov	r3, fp
 80092e8:	7828      	ldrb	r0, [r5, #0]
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	f7ff feda 	bl	80090a4 <__hexdig_fun>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	f000 000f 	and.w	r0, r0, #15
 80092f6:	4098      	lsls	r0, r3
 80092f8:	ea4b 0b00 	orr.w	fp, fp, r0
 80092fc:	3304      	adds	r3, #4
 80092fe:	e7a1      	b.n	8009244 <__gethex+0x174>
 8009300:	45a8      	cmp	r8, r5
 8009302:	d8e8      	bhi.n	80092d6 <__gethex+0x206>
 8009304:	2201      	movs	r2, #1
 8009306:	4628      	mov	r0, r5
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	f7ff fe0d 	bl	8008f28 <strncmp>
 800930e:	4926      	ldr	r1, [pc, #152]	; (80093a8 <__gethex+0x2d8>)
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	2800      	cmp	r0, #0
 8009314:	d1df      	bne.n	80092d6 <__gethex+0x206>
 8009316:	e795      	b.n	8009244 <__gethex+0x174>
 8009318:	f04f 0b03 	mov.w	fp, #3
 800931c:	e7c5      	b.n	80092aa <__gethex+0x1da>
 800931e:	da0b      	bge.n	8009338 <__gethex+0x268>
 8009320:	eba5 0800 	sub.w	r8, r5, r0
 8009324:	4621      	mov	r1, r4
 8009326:	4642      	mov	r2, r8
 8009328:	4648      	mov	r0, r9
 800932a:	f7fe fb37 	bl	800799c <__lshift>
 800932e:	eba6 0608 	sub.w	r6, r6, r8
 8009332:	4604      	mov	r4, r0
 8009334:	f100 0a14 	add.w	sl, r0, #20
 8009338:	f04f 0b00 	mov.w	fp, #0
 800933c:	e7ba      	b.n	80092b4 <__gethex+0x1e4>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	42b3      	cmp	r3, r6
 8009342:	dd73      	ble.n	800942c <__gethex+0x35c>
 8009344:	1b9e      	subs	r6, r3, r6
 8009346:	42b5      	cmp	r5, r6
 8009348:	dc34      	bgt.n	80093b4 <__gethex+0x2e4>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d023      	beq.n	8009398 <__gethex+0x2c8>
 8009350:	2b03      	cmp	r3, #3
 8009352:	d025      	beq.n	80093a0 <__gethex+0x2d0>
 8009354:	2b01      	cmp	r3, #1
 8009356:	d115      	bne.n	8009384 <__gethex+0x2b4>
 8009358:	42b5      	cmp	r5, r6
 800935a:	d113      	bne.n	8009384 <__gethex+0x2b4>
 800935c:	2d01      	cmp	r5, #1
 800935e:	d10b      	bne.n	8009378 <__gethex+0x2a8>
 8009360:	9a02      	ldr	r2, [sp, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	2301      	movs	r3, #1
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	f8ca 3000 	str.w	r3, [sl]
 800936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009370:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009374:	601c      	str	r4, [r3, #0]
 8009376:	e735      	b.n	80091e4 <__gethex+0x114>
 8009378:	1e69      	subs	r1, r5, #1
 800937a:	4620      	mov	r0, r4
 800937c:	f7fe fd3d 	bl	8007dfa <__any_on>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1ed      	bne.n	8009360 <__gethex+0x290>
 8009384:	4621      	mov	r1, r4
 8009386:	4648      	mov	r0, r9
 8009388:	f7fe f8ee 	bl	8007568 <_Bfree>
 800938c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800938e:	2300      	movs	r3, #0
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009396:	e725      	b.n	80091e4 <__gethex+0x114>
 8009398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f2      	bne.n	8009384 <__gethex+0x2b4>
 800939e:	e7df      	b.n	8009360 <__gethex+0x290>
 80093a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1dc      	bne.n	8009360 <__gethex+0x290>
 80093a6:	e7ed      	b.n	8009384 <__gethex+0x2b4>
 80093a8:	08009f14 	.word	0x08009f14
 80093ac:	08009dad 	.word	0x08009dad
 80093b0:	0800a0be 	.word	0x0800a0be
 80093b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80093b8:	f1bb 0f00 	cmp.w	fp, #0
 80093bc:	d133      	bne.n	8009426 <__gethex+0x356>
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	d004      	beq.n	80093ce <__gethex+0x2fe>
 80093c4:	4641      	mov	r1, r8
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7fe fd17 	bl	8007dfa <__any_on>
 80093cc:	4683      	mov	fp, r0
 80093ce:	ea4f 1268 	mov.w	r2, r8, asr #5
 80093d2:	2301      	movs	r3, #1
 80093d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80093d8:	f008 081f 	and.w	r8, r8, #31
 80093dc:	fa03 f308 	lsl.w	r3, r3, r8
 80093e0:	4213      	tst	r3, r2
 80093e2:	4631      	mov	r1, r6
 80093e4:	4620      	mov	r0, r4
 80093e6:	bf18      	it	ne
 80093e8:	f04b 0b02 	orrne.w	fp, fp, #2
 80093ec:	1bad      	subs	r5, r5, r6
 80093ee:	f7ff fe07 	bl	8009000 <rshift>
 80093f2:	687e      	ldr	r6, [r7, #4]
 80093f4:	f04f 0802 	mov.w	r8, #2
 80093f8:	f1bb 0f00 	cmp.w	fp, #0
 80093fc:	d04a      	beq.n	8009494 <__gethex+0x3c4>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d016      	beq.n	8009432 <__gethex+0x362>
 8009404:	2b03      	cmp	r3, #3
 8009406:	d018      	beq.n	800943a <__gethex+0x36a>
 8009408:	2b01      	cmp	r3, #1
 800940a:	d109      	bne.n	8009420 <__gethex+0x350>
 800940c:	f01b 0f02 	tst.w	fp, #2
 8009410:	d006      	beq.n	8009420 <__gethex+0x350>
 8009412:	f8da 3000 	ldr.w	r3, [sl]
 8009416:	ea4b 0b03 	orr.w	fp, fp, r3
 800941a:	f01b 0f01 	tst.w	fp, #1
 800941e:	d10f      	bne.n	8009440 <__gethex+0x370>
 8009420:	f048 0810 	orr.w	r8, r8, #16
 8009424:	e036      	b.n	8009494 <__gethex+0x3c4>
 8009426:	f04f 0b01 	mov.w	fp, #1
 800942a:	e7d0      	b.n	80093ce <__gethex+0x2fe>
 800942c:	f04f 0801 	mov.w	r8, #1
 8009430:	e7e2      	b.n	80093f8 <__gethex+0x328>
 8009432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009434:	f1c3 0301 	rsb	r3, r3, #1
 8009438:	930f      	str	r3, [sp, #60]	; 0x3c
 800943a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0ef      	beq.n	8009420 <__gethex+0x350>
 8009440:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009444:	f104 0214 	add.w	r2, r4, #20
 8009448:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009452:	2300      	movs	r3, #0
 8009454:	4694      	mov	ip, r2
 8009456:	f852 1b04 	ldr.w	r1, [r2], #4
 800945a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800945e:	d01e      	beq.n	800949e <__gethex+0x3ce>
 8009460:	3101      	adds	r1, #1
 8009462:	f8cc 1000 	str.w	r1, [ip]
 8009466:	f1b8 0f02 	cmp.w	r8, #2
 800946a:	f104 0214 	add.w	r2, r4, #20
 800946e:	d13d      	bne.n	80094ec <__gethex+0x41c>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3b01      	subs	r3, #1
 8009474:	42ab      	cmp	r3, r5
 8009476:	d10b      	bne.n	8009490 <__gethex+0x3c0>
 8009478:	1169      	asrs	r1, r5, #5
 800947a:	2301      	movs	r3, #1
 800947c:	f005 051f 	and.w	r5, r5, #31
 8009480:	fa03 f505 	lsl.w	r5, r3, r5
 8009484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009488:	421d      	tst	r5, r3
 800948a:	bf18      	it	ne
 800948c:	f04f 0801 	movne.w	r8, #1
 8009490:	f048 0820 	orr.w	r8, r8, #32
 8009494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009496:	601c      	str	r4, [r3, #0]
 8009498:	9b02      	ldr	r3, [sp, #8]
 800949a:	601e      	str	r6, [r3, #0]
 800949c:	e6a2      	b.n	80091e4 <__gethex+0x114>
 800949e:	4290      	cmp	r0, r2
 80094a0:	f842 3c04 	str.w	r3, [r2, #-4]
 80094a4:	d8d6      	bhi.n	8009454 <__gethex+0x384>
 80094a6:	68a2      	ldr	r2, [r4, #8]
 80094a8:	4593      	cmp	fp, r2
 80094aa:	db17      	blt.n	80094dc <__gethex+0x40c>
 80094ac:	6861      	ldr	r1, [r4, #4]
 80094ae:	4648      	mov	r0, r9
 80094b0:	3101      	adds	r1, #1
 80094b2:	f7fe f819 	bl	80074e8 <_Balloc>
 80094b6:	4682      	mov	sl, r0
 80094b8:	b918      	cbnz	r0, 80094c2 <__gethex+0x3f2>
 80094ba:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <__gethex+0x458>)
 80094bc:	4602      	mov	r2, r0
 80094be:	2184      	movs	r1, #132	; 0x84
 80094c0:	e6b3      	b.n	800922a <__gethex+0x15a>
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	3202      	adds	r2, #2
 80094c6:	f104 010c 	add.w	r1, r4, #12
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	300c      	adds	r0, #12
 80094ce:	f7ff fd4d 	bl	8008f6c <memcpy>
 80094d2:	4621      	mov	r1, r4
 80094d4:	4648      	mov	r0, r9
 80094d6:	f7fe f847 	bl	8007568 <_Bfree>
 80094da:	4654      	mov	r4, sl
 80094dc:	6922      	ldr	r2, [r4, #16]
 80094de:	1c51      	adds	r1, r2, #1
 80094e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80094e4:	6121      	str	r1, [r4, #16]
 80094e6:	2101      	movs	r1, #1
 80094e8:	6151      	str	r1, [r2, #20]
 80094ea:	e7bc      	b.n	8009466 <__gethex+0x396>
 80094ec:	6921      	ldr	r1, [r4, #16]
 80094ee:	4559      	cmp	r1, fp
 80094f0:	dd0b      	ble.n	800950a <__gethex+0x43a>
 80094f2:	2101      	movs	r1, #1
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7ff fd83 	bl	8009000 <rshift>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3601      	adds	r6, #1
 80094fe:	42b3      	cmp	r3, r6
 8009500:	f6ff aedb 	blt.w	80092ba <__gethex+0x1ea>
 8009504:	f04f 0801 	mov.w	r8, #1
 8009508:	e7c2      	b.n	8009490 <__gethex+0x3c0>
 800950a:	f015 051f 	ands.w	r5, r5, #31
 800950e:	d0f9      	beq.n	8009504 <__gethex+0x434>
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	441a      	add	r2, r3
 8009514:	f1c5 0520 	rsb	r5, r5, #32
 8009518:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800951c:	f7fe f8d6 	bl	80076cc <__hi0bits>
 8009520:	42a8      	cmp	r0, r5
 8009522:	dbe6      	blt.n	80094f2 <__gethex+0x422>
 8009524:	e7ee      	b.n	8009504 <__gethex+0x434>
 8009526:	bf00      	nop
 8009528:	08009dad 	.word	0x08009dad

0800952c <L_shift>:
 800952c:	f1c2 0208 	rsb	r2, r2, #8
 8009530:	0092      	lsls	r2, r2, #2
 8009532:	b570      	push	{r4, r5, r6, lr}
 8009534:	f1c2 0620 	rsb	r6, r2, #32
 8009538:	6843      	ldr	r3, [r0, #4]
 800953a:	6804      	ldr	r4, [r0, #0]
 800953c:	fa03 f506 	lsl.w	r5, r3, r6
 8009540:	432c      	orrs	r4, r5
 8009542:	40d3      	lsrs	r3, r2
 8009544:	6004      	str	r4, [r0, #0]
 8009546:	f840 3f04 	str.w	r3, [r0, #4]!
 800954a:	4288      	cmp	r0, r1
 800954c:	d3f4      	bcc.n	8009538 <L_shift+0xc>
 800954e:	bd70      	pop	{r4, r5, r6, pc}

08009550 <__match>:
 8009550:	b530      	push	{r4, r5, lr}
 8009552:	6803      	ldr	r3, [r0, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955a:	b914      	cbnz	r4, 8009562 <__match+0x12>
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	2001      	movs	r0, #1
 8009560:	bd30      	pop	{r4, r5, pc}
 8009562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009566:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800956a:	2d19      	cmp	r5, #25
 800956c:	bf98      	it	ls
 800956e:	3220      	addls	r2, #32
 8009570:	42a2      	cmp	r2, r4
 8009572:	d0f0      	beq.n	8009556 <__match+0x6>
 8009574:	2000      	movs	r0, #0
 8009576:	e7f3      	b.n	8009560 <__match+0x10>

08009578 <__hexnan>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	680b      	ldr	r3, [r1, #0]
 800957e:	6801      	ldr	r1, [r0, #0]
 8009580:	115e      	asrs	r6, r3, #5
 8009582:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009586:	f013 031f 	ands.w	r3, r3, #31
 800958a:	b087      	sub	sp, #28
 800958c:	bf18      	it	ne
 800958e:	3604      	addne	r6, #4
 8009590:	2500      	movs	r5, #0
 8009592:	1f37      	subs	r7, r6, #4
 8009594:	4682      	mov	sl, r0
 8009596:	4690      	mov	r8, r2
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f846 5c04 	str.w	r5, [r6, #-4]
 800959e:	46b9      	mov	r9, r7
 80095a0:	463c      	mov	r4, r7
 80095a2:	9502      	str	r5, [sp, #8]
 80095a4:	46ab      	mov	fp, r5
 80095a6:	784a      	ldrb	r2, [r1, #1]
 80095a8:	1c4b      	adds	r3, r1, #1
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	b342      	cbz	r2, 8009600 <__hexnan+0x88>
 80095ae:	4610      	mov	r0, r2
 80095b0:	9105      	str	r1, [sp, #20]
 80095b2:	9204      	str	r2, [sp, #16]
 80095b4:	f7ff fd76 	bl	80090a4 <__hexdig_fun>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d14f      	bne.n	800965c <__hexnan+0xe4>
 80095bc:	9a04      	ldr	r2, [sp, #16]
 80095be:	9905      	ldr	r1, [sp, #20]
 80095c0:	2a20      	cmp	r2, #32
 80095c2:	d818      	bhi.n	80095f6 <__hexnan+0x7e>
 80095c4:	9b02      	ldr	r3, [sp, #8]
 80095c6:	459b      	cmp	fp, r3
 80095c8:	dd13      	ble.n	80095f2 <__hexnan+0x7a>
 80095ca:	454c      	cmp	r4, r9
 80095cc:	d206      	bcs.n	80095dc <__hexnan+0x64>
 80095ce:	2d07      	cmp	r5, #7
 80095d0:	dc04      	bgt.n	80095dc <__hexnan+0x64>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4649      	mov	r1, r9
 80095d6:	4620      	mov	r0, r4
 80095d8:	f7ff ffa8 	bl	800952c <L_shift>
 80095dc:	4544      	cmp	r4, r8
 80095de:	d950      	bls.n	8009682 <__hexnan+0x10a>
 80095e0:	2300      	movs	r3, #0
 80095e2:	f1a4 0904 	sub.w	r9, r4, #4
 80095e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80095ea:	f8cd b008 	str.w	fp, [sp, #8]
 80095ee:	464c      	mov	r4, r9
 80095f0:	461d      	mov	r5, r3
 80095f2:	9903      	ldr	r1, [sp, #12]
 80095f4:	e7d7      	b.n	80095a6 <__hexnan+0x2e>
 80095f6:	2a29      	cmp	r2, #41	; 0x29
 80095f8:	d155      	bne.n	80096a6 <__hexnan+0x12e>
 80095fa:	3102      	adds	r1, #2
 80095fc:	f8ca 1000 	str.w	r1, [sl]
 8009600:	f1bb 0f00 	cmp.w	fp, #0
 8009604:	d04f      	beq.n	80096a6 <__hexnan+0x12e>
 8009606:	454c      	cmp	r4, r9
 8009608:	d206      	bcs.n	8009618 <__hexnan+0xa0>
 800960a:	2d07      	cmp	r5, #7
 800960c:	dc04      	bgt.n	8009618 <__hexnan+0xa0>
 800960e:	462a      	mov	r2, r5
 8009610:	4649      	mov	r1, r9
 8009612:	4620      	mov	r0, r4
 8009614:	f7ff ff8a 	bl	800952c <L_shift>
 8009618:	4544      	cmp	r4, r8
 800961a:	d934      	bls.n	8009686 <__hexnan+0x10e>
 800961c:	f1a8 0204 	sub.w	r2, r8, #4
 8009620:	4623      	mov	r3, r4
 8009622:	f853 1b04 	ldr.w	r1, [r3], #4
 8009626:	f842 1f04 	str.w	r1, [r2, #4]!
 800962a:	429f      	cmp	r7, r3
 800962c:	d2f9      	bcs.n	8009622 <__hexnan+0xaa>
 800962e:	1b3b      	subs	r3, r7, r4
 8009630:	f023 0303 	bic.w	r3, r3, #3
 8009634:	3304      	adds	r3, #4
 8009636:	3e03      	subs	r6, #3
 8009638:	3401      	adds	r4, #1
 800963a:	42a6      	cmp	r6, r4
 800963c:	bf38      	it	cc
 800963e:	2304      	movcc	r3, #4
 8009640:	4443      	add	r3, r8
 8009642:	2200      	movs	r2, #0
 8009644:	f843 2b04 	str.w	r2, [r3], #4
 8009648:	429f      	cmp	r7, r3
 800964a:	d2fb      	bcs.n	8009644 <__hexnan+0xcc>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	b91b      	cbnz	r3, 8009658 <__hexnan+0xe0>
 8009650:	4547      	cmp	r7, r8
 8009652:	d126      	bne.n	80096a2 <__hexnan+0x12a>
 8009654:	2301      	movs	r3, #1
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	2005      	movs	r0, #5
 800965a:	e025      	b.n	80096a8 <__hexnan+0x130>
 800965c:	3501      	adds	r5, #1
 800965e:	2d08      	cmp	r5, #8
 8009660:	f10b 0b01 	add.w	fp, fp, #1
 8009664:	dd06      	ble.n	8009674 <__hexnan+0xfc>
 8009666:	4544      	cmp	r4, r8
 8009668:	d9c3      	bls.n	80095f2 <__hexnan+0x7a>
 800966a:	2300      	movs	r3, #0
 800966c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009670:	2501      	movs	r5, #1
 8009672:	3c04      	subs	r4, #4
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	f000 000f 	and.w	r0, r0, #15
 800967a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800967e:	6020      	str	r0, [r4, #0]
 8009680:	e7b7      	b.n	80095f2 <__hexnan+0x7a>
 8009682:	2508      	movs	r5, #8
 8009684:	e7b5      	b.n	80095f2 <__hexnan+0x7a>
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0df      	beq.n	800964c <__hexnan+0xd4>
 800968c:	f1c3 0320 	rsb	r3, r3, #32
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	40da      	lsrs	r2, r3
 8009696:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800969a:	4013      	ands	r3, r2
 800969c:	f846 3c04 	str.w	r3, [r6, #-4]
 80096a0:	e7d4      	b.n	800964c <__hexnan+0xd4>
 80096a2:	3f04      	subs	r7, #4
 80096a4:	e7d2      	b.n	800964c <__hexnan+0xd4>
 80096a6:	2004      	movs	r0, #4
 80096a8:	b007      	add	sp, #28
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096ae <__ascii_mbtowc>:
 80096ae:	b082      	sub	sp, #8
 80096b0:	b901      	cbnz	r1, 80096b4 <__ascii_mbtowc+0x6>
 80096b2:	a901      	add	r1, sp, #4
 80096b4:	b142      	cbz	r2, 80096c8 <__ascii_mbtowc+0x1a>
 80096b6:	b14b      	cbz	r3, 80096cc <__ascii_mbtowc+0x1e>
 80096b8:	7813      	ldrb	r3, [r2, #0]
 80096ba:	600b      	str	r3, [r1, #0]
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	1e10      	subs	r0, r2, #0
 80096c0:	bf18      	it	ne
 80096c2:	2001      	movne	r0, #1
 80096c4:	b002      	add	sp, #8
 80096c6:	4770      	bx	lr
 80096c8:	4610      	mov	r0, r2
 80096ca:	e7fb      	b.n	80096c4 <__ascii_mbtowc+0x16>
 80096cc:	f06f 0001 	mvn.w	r0, #1
 80096d0:	e7f8      	b.n	80096c4 <__ascii_mbtowc+0x16>

080096d2 <_realloc_r>:
 80096d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d6:	4680      	mov	r8, r0
 80096d8:	4614      	mov	r4, r2
 80096da:	460e      	mov	r6, r1
 80096dc:	b921      	cbnz	r1, 80096e8 <_realloc_r+0x16>
 80096de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	4611      	mov	r1, r2
 80096e4:	f7fd be74 	b.w	80073d0 <_malloc_r>
 80096e8:	b92a      	cbnz	r2, 80096f6 <_realloc_r+0x24>
 80096ea:	f7fd fdfd 	bl	80072e8 <_free_r>
 80096ee:	4625      	mov	r5, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f6:	f000 f842 	bl	800977e <_malloc_usable_size_r>
 80096fa:	4284      	cmp	r4, r0
 80096fc:	4607      	mov	r7, r0
 80096fe:	d802      	bhi.n	8009706 <_realloc_r+0x34>
 8009700:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009704:	d812      	bhi.n	800972c <_realloc_r+0x5a>
 8009706:	4621      	mov	r1, r4
 8009708:	4640      	mov	r0, r8
 800970a:	f7fd fe61 	bl	80073d0 <_malloc_r>
 800970e:	4605      	mov	r5, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	d0ed      	beq.n	80096f0 <_realloc_r+0x1e>
 8009714:	42bc      	cmp	r4, r7
 8009716:	4622      	mov	r2, r4
 8009718:	4631      	mov	r1, r6
 800971a:	bf28      	it	cs
 800971c:	463a      	movcs	r2, r7
 800971e:	f7ff fc25 	bl	8008f6c <memcpy>
 8009722:	4631      	mov	r1, r6
 8009724:	4640      	mov	r0, r8
 8009726:	f7fd fddf 	bl	80072e8 <_free_r>
 800972a:	e7e1      	b.n	80096f0 <_realloc_r+0x1e>
 800972c:	4635      	mov	r5, r6
 800972e:	e7df      	b.n	80096f0 <_realloc_r+0x1e>

08009730 <__ascii_wctomb>:
 8009730:	b149      	cbz	r1, 8009746 <__ascii_wctomb+0x16>
 8009732:	2aff      	cmp	r2, #255	; 0xff
 8009734:	bf85      	ittet	hi
 8009736:	238a      	movhi	r3, #138	; 0x8a
 8009738:	6003      	strhi	r3, [r0, #0]
 800973a:	700a      	strbls	r2, [r1, #0]
 800973c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009740:	bf98      	it	ls
 8009742:	2001      	movls	r0, #1
 8009744:	4770      	bx	lr
 8009746:	4608      	mov	r0, r1
 8009748:	4770      	bx	lr
	...

0800974c <fiprintf>:
 800974c:	b40e      	push	{r1, r2, r3}
 800974e:	b503      	push	{r0, r1, lr}
 8009750:	4601      	mov	r1, r0
 8009752:	ab03      	add	r3, sp, #12
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <fiprintf+0x20>)
 8009756:	f853 2b04 	ldr.w	r2, [r3], #4
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	f000 f83f 	bl	80097e0 <_vfiprintf_r>
 8009762:	b002      	add	sp, #8
 8009764:	f85d eb04 	ldr.w	lr, [sp], #4
 8009768:	b003      	add	sp, #12
 800976a:	4770      	bx	lr
 800976c:	24000068 	.word	0x24000068

08009770 <abort>:
 8009770:	b508      	push	{r3, lr}
 8009772:	2006      	movs	r0, #6
 8009774:	f000 fa0c 	bl	8009b90 <raise>
 8009778:	2001      	movs	r0, #1
 800977a:	f7f7 fc67 	bl	800104c <_exit>

0800977e <_malloc_usable_size_r>:
 800977e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009782:	1f18      	subs	r0, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfbc      	itt	lt
 8009788:	580b      	ldrlt	r3, [r1, r0]
 800978a:	18c0      	addlt	r0, r0, r3
 800978c:	4770      	bx	lr

0800978e <__sfputc_r>:
 800978e:	6893      	ldr	r3, [r2, #8]
 8009790:	3b01      	subs	r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	b410      	push	{r4}
 8009796:	6093      	str	r3, [r2, #8]
 8009798:	da08      	bge.n	80097ac <__sfputc_r+0x1e>
 800979a:	6994      	ldr	r4, [r2, #24]
 800979c:	42a3      	cmp	r3, r4
 800979e:	db01      	blt.n	80097a4 <__sfputc_r+0x16>
 80097a0:	290a      	cmp	r1, #10
 80097a2:	d103      	bne.n	80097ac <__sfputc_r+0x1e>
 80097a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097a8:	f000 b934 	b.w	8009a14 <__swbuf_r>
 80097ac:	6813      	ldr	r3, [r2, #0]
 80097ae:	1c58      	adds	r0, r3, #1
 80097b0:	6010      	str	r0, [r2, #0]
 80097b2:	7019      	strb	r1, [r3, #0]
 80097b4:	4608      	mov	r0, r1
 80097b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <__sfputs_r>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	4614      	mov	r4, r2
 80097c4:	18d5      	adds	r5, r2, r3
 80097c6:	42ac      	cmp	r4, r5
 80097c8:	d101      	bne.n	80097ce <__sfputs_r+0x12>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e007      	b.n	80097de <__sfputs_r+0x22>
 80097ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d2:	463a      	mov	r2, r7
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff ffda 	bl	800978e <__sfputc_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	d1f3      	bne.n	80097c6 <__sfputs_r+0xa>
 80097de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097e0 <_vfiprintf_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	460d      	mov	r5, r1
 80097e6:	b09d      	sub	sp, #116	; 0x74
 80097e8:	4614      	mov	r4, r2
 80097ea:	4698      	mov	r8, r3
 80097ec:	4606      	mov	r6, r0
 80097ee:	b118      	cbz	r0, 80097f8 <_vfiprintf_r+0x18>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <_vfiprintf_r+0x18>
 80097f4:	f7fc fe62 	bl	80064bc <__sinit>
 80097f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097fa:	07d9      	lsls	r1, r3, #31
 80097fc:	d405      	bmi.n	800980a <_vfiprintf_r+0x2a>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d402      	bmi.n	800980a <_vfiprintf_r+0x2a>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7fc ff70 	bl	80066ea <__retarget_lock_acquire_recursive>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d501      	bpl.n	8009814 <_vfiprintf_r+0x34>
 8009810:	692b      	ldr	r3, [r5, #16]
 8009812:	b99b      	cbnz	r3, 800983c <_vfiprintf_r+0x5c>
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f000 f93a 	bl	8009a90 <__swsetup_r>
 800981c:	b170      	cbz	r0, 800983c <_vfiprintf_r+0x5c>
 800981e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009820:	07dc      	lsls	r4, r3, #31
 8009822:	d504      	bpl.n	800982e <_vfiprintf_r+0x4e>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b01d      	add	sp, #116	; 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d4f7      	bmi.n	8009824 <_vfiprintf_r+0x44>
 8009834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009836:	f7fc ff59 	bl	80066ec <__retarget_lock_release_recursive>
 800983a:	e7f3      	b.n	8009824 <_vfiprintf_r+0x44>
 800983c:	2300      	movs	r3, #0
 800983e:	9309      	str	r3, [sp, #36]	; 0x24
 8009840:	2320      	movs	r3, #32
 8009842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009846:	f8cd 800c 	str.w	r8, [sp, #12]
 800984a:	2330      	movs	r3, #48	; 0x30
 800984c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a00 <_vfiprintf_r+0x220>
 8009850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009854:	f04f 0901 	mov.w	r9, #1
 8009858:	4623      	mov	r3, r4
 800985a:	469a      	mov	sl, r3
 800985c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009860:	b10a      	cbz	r2, 8009866 <_vfiprintf_r+0x86>
 8009862:	2a25      	cmp	r2, #37	; 0x25
 8009864:	d1f9      	bne.n	800985a <_vfiprintf_r+0x7a>
 8009866:	ebba 0b04 	subs.w	fp, sl, r4
 800986a:	d00b      	beq.n	8009884 <_vfiprintf_r+0xa4>
 800986c:	465b      	mov	r3, fp
 800986e:	4622      	mov	r2, r4
 8009870:	4629      	mov	r1, r5
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ffa2 	bl	80097bc <__sfputs_r>
 8009878:	3001      	adds	r0, #1
 800987a:	f000 80a9 	beq.w	80099d0 <_vfiprintf_r+0x1f0>
 800987e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009880:	445a      	add	r2, fp
 8009882:	9209      	str	r2, [sp, #36]	; 0x24
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80a1 	beq.w	80099d0 <_vfiprintf_r+0x1f0>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 32ff 	mov.w	r2, #4294967295
 8009894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a4:	931a      	str	r3, [sp, #104]	; 0x68
 80098a6:	4654      	mov	r4, sl
 80098a8:	2205      	movs	r2, #5
 80098aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ae:	4854      	ldr	r0, [pc, #336]	; (8009a00 <_vfiprintf_r+0x220>)
 80098b0:	f7f6 fd16 	bl	80002e0 <memchr>
 80098b4:	9a04      	ldr	r2, [sp, #16]
 80098b6:	b9d8      	cbnz	r0, 80098f0 <_vfiprintf_r+0x110>
 80098b8:	06d1      	lsls	r1, r2, #27
 80098ba:	bf44      	itt	mi
 80098bc:	2320      	movmi	r3, #32
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	0713      	lsls	r3, r2, #28
 80098c4:	bf44      	itt	mi
 80098c6:	232b      	movmi	r3, #43	; 0x2b
 80098c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098cc:	f89a 3000 	ldrb.w	r3, [sl]
 80098d0:	2b2a      	cmp	r3, #42	; 0x2a
 80098d2:	d015      	beq.n	8009900 <_vfiprintf_r+0x120>
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	4654      	mov	r4, sl
 80098d8:	2000      	movs	r0, #0
 80098da:	f04f 0c0a 	mov.w	ip, #10
 80098de:	4621      	mov	r1, r4
 80098e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e4:	3b30      	subs	r3, #48	; 0x30
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d94d      	bls.n	8009986 <_vfiprintf_r+0x1a6>
 80098ea:	b1b0      	cbz	r0, 800991a <_vfiprintf_r+0x13a>
 80098ec:	9207      	str	r2, [sp, #28]
 80098ee:	e014      	b.n	800991a <_vfiprintf_r+0x13a>
 80098f0:	eba0 0308 	sub.w	r3, r0, r8
 80098f4:	fa09 f303 	lsl.w	r3, r9, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	46a2      	mov	sl, r4
 80098fe:	e7d2      	b.n	80098a6 <_vfiprintf_r+0xc6>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbb      	ittet	lt
 800990c:	425b      	neglt	r3, r3
 800990e:	f042 0202 	orrlt.w	r2, r2, #2
 8009912:	9307      	strge	r3, [sp, #28]
 8009914:	9307      	strlt	r3, [sp, #28]
 8009916:	bfb8      	it	lt
 8009918:	9204      	strlt	r2, [sp, #16]
 800991a:	7823      	ldrb	r3, [r4, #0]
 800991c:	2b2e      	cmp	r3, #46	; 0x2e
 800991e:	d10c      	bne.n	800993a <_vfiprintf_r+0x15a>
 8009920:	7863      	ldrb	r3, [r4, #1]
 8009922:	2b2a      	cmp	r3, #42	; 0x2a
 8009924:	d134      	bne.n	8009990 <_vfiprintf_r+0x1b0>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	9203      	str	r2, [sp, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	bfb8      	it	lt
 8009932:	f04f 33ff 	movlt.w	r3, #4294967295
 8009936:	3402      	adds	r4, #2
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a10 <_vfiprintf_r+0x230>
 800993e:	7821      	ldrb	r1, [r4, #0]
 8009940:	2203      	movs	r2, #3
 8009942:	4650      	mov	r0, sl
 8009944:	f7f6 fccc 	bl	80002e0 <memchr>
 8009948:	b138      	cbz	r0, 800995a <_vfiprintf_r+0x17a>
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	eba0 000a 	sub.w	r0, r0, sl
 8009950:	2240      	movs	r2, #64	; 0x40
 8009952:	4082      	lsls	r2, r0
 8009954:	4313      	orrs	r3, r2
 8009956:	3401      	adds	r4, #1
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4829      	ldr	r0, [pc, #164]	; (8009a04 <_vfiprintf_r+0x224>)
 8009960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009964:	2206      	movs	r2, #6
 8009966:	f7f6 fcbb 	bl	80002e0 <memchr>
 800996a:	2800      	cmp	r0, #0
 800996c:	d03f      	beq.n	80099ee <_vfiprintf_r+0x20e>
 800996e:	4b26      	ldr	r3, [pc, #152]	; (8009a08 <_vfiprintf_r+0x228>)
 8009970:	bb1b      	cbnz	r3, 80099ba <_vfiprintf_r+0x1da>
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	3307      	adds	r3, #7
 8009976:	f023 0307 	bic.w	r3, r3, #7
 800997a:	3308      	adds	r3, #8
 800997c:	9303      	str	r3, [sp, #12]
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	443b      	add	r3, r7
 8009982:	9309      	str	r3, [sp, #36]	; 0x24
 8009984:	e768      	b.n	8009858 <_vfiprintf_r+0x78>
 8009986:	fb0c 3202 	mla	r2, ip, r2, r3
 800998a:	460c      	mov	r4, r1
 800998c:	2001      	movs	r0, #1
 800998e:	e7a6      	b.n	80098de <_vfiprintf_r+0xfe>
 8009990:	2300      	movs	r3, #0
 8009992:	3401      	adds	r4, #1
 8009994:	9305      	str	r3, [sp, #20]
 8009996:	4619      	mov	r1, r3
 8009998:	f04f 0c0a 	mov.w	ip, #10
 800999c:	4620      	mov	r0, r4
 800999e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a2:	3a30      	subs	r2, #48	; 0x30
 80099a4:	2a09      	cmp	r2, #9
 80099a6:	d903      	bls.n	80099b0 <_vfiprintf_r+0x1d0>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0c6      	beq.n	800993a <_vfiprintf_r+0x15a>
 80099ac:	9105      	str	r1, [sp, #20]
 80099ae:	e7c4      	b.n	800993a <_vfiprintf_r+0x15a>
 80099b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b4:	4604      	mov	r4, r0
 80099b6:	2301      	movs	r3, #1
 80099b8:	e7f0      	b.n	800999c <_vfiprintf_r+0x1bc>
 80099ba:	ab03      	add	r3, sp, #12
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	462a      	mov	r2, r5
 80099c0:	4b12      	ldr	r3, [pc, #72]	; (8009a0c <_vfiprintf_r+0x22c>)
 80099c2:	a904      	add	r1, sp, #16
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7fb ff3f 	bl	8005848 <_printf_float>
 80099ca:	4607      	mov	r7, r0
 80099cc:	1c78      	adds	r0, r7, #1
 80099ce:	d1d6      	bne.n	800997e <_vfiprintf_r+0x19e>
 80099d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d2:	07d9      	lsls	r1, r3, #31
 80099d4:	d405      	bmi.n	80099e2 <_vfiprintf_r+0x202>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	059a      	lsls	r2, r3, #22
 80099da:	d402      	bmi.n	80099e2 <_vfiprintf_r+0x202>
 80099dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099de:	f7fc fe85 	bl	80066ec <__retarget_lock_release_recursive>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	065b      	lsls	r3, r3, #25
 80099e6:	f53f af1d 	bmi.w	8009824 <_vfiprintf_r+0x44>
 80099ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ec:	e71c      	b.n	8009828 <_vfiprintf_r+0x48>
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	462a      	mov	r2, r5
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <_vfiprintf_r+0x22c>)
 80099f6:	a904      	add	r1, sp, #16
 80099f8:	4630      	mov	r0, r6
 80099fa:	f7fc f9ad 	bl	8005d58 <_printf_i>
 80099fe:	e7e4      	b.n	80099ca <_vfiprintf_r+0x1ea>
 8009a00:	0800a069 	.word	0x0800a069
 8009a04:	0800a073 	.word	0x0800a073
 8009a08:	08005849 	.word	0x08005849
 8009a0c:	080097bd 	.word	0x080097bd
 8009a10:	0800a06f 	.word	0x0800a06f

08009a14 <__swbuf_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	460e      	mov	r6, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	b118      	cbz	r0, 8009a26 <__swbuf_r+0x12>
 8009a1e:	6a03      	ldr	r3, [r0, #32]
 8009a20:	b90b      	cbnz	r3, 8009a26 <__swbuf_r+0x12>
 8009a22:	f7fc fd4b 	bl	80064bc <__sinit>
 8009a26:	69a3      	ldr	r3, [r4, #24]
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	071a      	lsls	r2, r3, #28
 8009a2e:	d525      	bpl.n	8009a7c <__swbuf_r+0x68>
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	b31b      	cbz	r3, 8009a7c <__swbuf_r+0x68>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	6922      	ldr	r2, [r4, #16]
 8009a38:	1a98      	subs	r0, r3, r2
 8009a3a:	6963      	ldr	r3, [r4, #20]
 8009a3c:	b2f6      	uxtb	r6, r6
 8009a3e:	4283      	cmp	r3, r0
 8009a40:	4637      	mov	r7, r6
 8009a42:	dc04      	bgt.n	8009a4e <__swbuf_r+0x3a>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7ff fa2c 	bl	8008ea4 <_fflush_r>
 8009a4c:	b9e0      	cbnz	r0, 8009a88 <__swbuf_r+0x74>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	60a3      	str	r3, [r4, #8]
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	6022      	str	r2, [r4, #0]
 8009a5a:	701e      	strb	r6, [r3, #0]
 8009a5c:	6962      	ldr	r2, [r4, #20]
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d004      	beq.n	8009a6e <__swbuf_r+0x5a>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	07db      	lsls	r3, r3, #31
 8009a68:	d506      	bpl.n	8009a78 <__swbuf_r+0x64>
 8009a6a:	2e0a      	cmp	r6, #10
 8009a6c:	d104      	bne.n	8009a78 <__swbuf_r+0x64>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4628      	mov	r0, r5
 8009a72:	f7ff fa17 	bl	8008ea4 <_fflush_r>
 8009a76:	b938      	cbnz	r0, 8009a88 <__swbuf_r+0x74>
 8009a78:	4638      	mov	r0, r7
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f806 	bl	8009a90 <__swsetup_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0d5      	beq.n	8009a34 <__swbuf_r+0x20>
 8009a88:	f04f 37ff 	mov.w	r7, #4294967295
 8009a8c:	e7f4      	b.n	8009a78 <__swbuf_r+0x64>
	...

08009a90 <__swsetup_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <__swsetup_r+0xac>)
 8009a94:	4605      	mov	r5, r0
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	460c      	mov	r4, r1
 8009a9a:	b118      	cbz	r0, 8009aa4 <__swsetup_r+0x14>
 8009a9c:	6a03      	ldr	r3, [r0, #32]
 8009a9e:	b90b      	cbnz	r3, 8009aa4 <__swsetup_r+0x14>
 8009aa0:	f7fc fd0c 	bl	80064bc <__sinit>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aaa:	0718      	lsls	r0, r3, #28
 8009aac:	d422      	bmi.n	8009af4 <__swsetup_r+0x64>
 8009aae:	06d9      	lsls	r1, r3, #27
 8009ab0:	d407      	bmi.n	8009ac2 <__swsetup_r+0x32>
 8009ab2:	2309      	movs	r3, #9
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	e034      	b.n	8009b2c <__swsetup_r+0x9c>
 8009ac2:	0758      	lsls	r0, r3, #29
 8009ac4:	d512      	bpl.n	8009aec <__swsetup_r+0x5c>
 8009ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ac8:	b141      	cbz	r1, 8009adc <__swsetup_r+0x4c>
 8009aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	d002      	beq.n	8009ad8 <__swsetup_r+0x48>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7fd fc08 	bl	80072e8 <_free_r>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6363      	str	r3, [r4, #52]	; 0x34
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	f043 0308 	orr.w	r3, r3, #8
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	b94b      	cbnz	r3, 8009b0c <__swsetup_r+0x7c>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b02:	d003      	beq.n	8009b0c <__swsetup_r+0x7c>
 8009b04:	4621      	mov	r1, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 f884 	bl	8009c14 <__smakebuf_r>
 8009b0c:	89a0      	ldrh	r0, [r4, #12]
 8009b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b12:	f010 0301 	ands.w	r3, r0, #1
 8009b16:	d00a      	beq.n	8009b2e <__swsetup_r+0x9e>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	6963      	ldr	r3, [r4, #20]
 8009b1e:	425b      	negs	r3, r3
 8009b20:	61a3      	str	r3, [r4, #24]
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	b943      	cbnz	r3, 8009b38 <__swsetup_r+0xa8>
 8009b26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b2a:	d1c4      	bne.n	8009ab6 <__swsetup_r+0x26>
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	0781      	lsls	r1, r0, #30
 8009b30:	bf58      	it	pl
 8009b32:	6963      	ldrpl	r3, [r4, #20]
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	e7f4      	b.n	8009b22 <__swsetup_r+0x92>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7f7      	b.n	8009b2c <__swsetup_r+0x9c>
 8009b3c:	24000068 	.word	0x24000068

08009b40 <_raise_r>:
 8009b40:	291f      	cmp	r1, #31
 8009b42:	b538      	push	{r3, r4, r5, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	d904      	bls.n	8009b54 <_raise_r+0x14>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b56:	b112      	cbz	r2, 8009b5e <_raise_r+0x1e>
 8009b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b5c:	b94b      	cbnz	r3, 8009b72 <_raise_r+0x32>
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f830 	bl	8009bc4 <_getpid_r>
 8009b64:	462a      	mov	r2, r5
 8009b66:	4601      	mov	r1, r0
 8009b68:	4620      	mov	r0, r4
 8009b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6e:	f000 b817 	b.w	8009ba0 <_kill_r>
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d00a      	beq.n	8009b8c <_raise_r+0x4c>
 8009b76:	1c59      	adds	r1, r3, #1
 8009b78:	d103      	bne.n	8009b82 <_raise_r+0x42>
 8009b7a:	2316      	movs	r3, #22
 8009b7c:	6003      	str	r3, [r0, #0]
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7e7      	b.n	8009b52 <_raise_r+0x12>
 8009b82:	2400      	movs	r4, #0
 8009b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b88:	4628      	mov	r0, r5
 8009b8a:	4798      	blx	r3
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e7e0      	b.n	8009b52 <_raise_r+0x12>

08009b90 <raise>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <raise+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f7ff bfd3 	b.w	8009b40 <_raise_r>
 8009b9a:	bf00      	nop
 8009b9c:	24000068 	.word	0x24000068

08009ba0 <_kill_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	; (8009bc0 <_kill_r+0x20>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	f7f7 fa3d 	bl	800102c <_kill>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d102      	bne.n	8009bbc <_kill_r+0x1c>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b103      	cbz	r3, 8009bbc <_kill_r+0x1c>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	240003d8 	.word	0x240003d8

08009bc4 <_getpid_r>:
 8009bc4:	f7f7 ba2a 	b.w	800101c <_getpid>

08009bc8 <__swhatbuf_r>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	460c      	mov	r4, r1
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	b096      	sub	sp, #88	; 0x58
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	461e      	mov	r6, r3
 8009bd8:	da0d      	bge.n	8009bf6 <__swhatbuf_r+0x2e>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009be0:	f04f 0100 	mov.w	r1, #0
 8009be4:	bf0c      	ite	eq
 8009be6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009bea:	2340      	movne	r3, #64	; 0x40
 8009bec:	2000      	movs	r0, #0
 8009bee:	6031      	str	r1, [r6, #0]
 8009bf0:	602b      	str	r3, [r5, #0]
 8009bf2:	b016      	add	sp, #88	; 0x58
 8009bf4:	bd70      	pop	{r4, r5, r6, pc}
 8009bf6:	466a      	mov	r2, sp
 8009bf8:	f000 f848 	bl	8009c8c <_fstat_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	dbec      	blt.n	8009bda <__swhatbuf_r+0x12>
 8009c00:	9901      	ldr	r1, [sp, #4]
 8009c02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c0a:	4259      	negs	r1, r3
 8009c0c:	4159      	adcs	r1, r3
 8009c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c12:	e7eb      	b.n	8009bec <__swhatbuf_r+0x24>

08009c14 <__smakebuf_r>:
 8009c14:	898b      	ldrh	r3, [r1, #12]
 8009c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c18:	079d      	lsls	r5, r3, #30
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	d507      	bpl.n	8009c30 <__smakebuf_r+0x1c>
 8009c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	6163      	str	r3, [r4, #20]
 8009c2c:	b002      	add	sp, #8
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	ab01      	add	r3, sp, #4
 8009c32:	466a      	mov	r2, sp
 8009c34:	f7ff ffc8 	bl	8009bc8 <__swhatbuf_r>
 8009c38:	9900      	ldr	r1, [sp, #0]
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7fd fbc7 	bl	80073d0 <_malloc_r>
 8009c42:	b948      	cbnz	r0, 8009c58 <__smakebuf_r+0x44>
 8009c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c48:	059a      	lsls	r2, r3, #22
 8009c4a:	d4ef      	bmi.n	8009c2c <__smakebuf_r+0x18>
 8009c4c:	f023 0303 	bic.w	r3, r3, #3
 8009c50:	f043 0302 	orr.w	r3, r3, #2
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	e7e3      	b.n	8009c20 <__smakebuf_r+0xc>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	6020      	str	r0, [r4, #0]
 8009c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	9b00      	ldr	r3, [sp, #0]
 8009c64:	6163      	str	r3, [r4, #20]
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	6120      	str	r0, [r4, #16]
 8009c6a:	b15b      	cbz	r3, 8009c84 <__smakebuf_r+0x70>
 8009c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c70:	4630      	mov	r0, r6
 8009c72:	f000 f81d 	bl	8009cb0 <_isatty_r>
 8009c76:	b128      	cbz	r0, 8009c84 <__smakebuf_r+0x70>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	f043 0301 	orr.w	r3, r3, #1
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	431d      	orrs	r5, r3
 8009c88:	81a5      	strh	r5, [r4, #12]
 8009c8a:	e7cf      	b.n	8009c2c <__smakebuf_r+0x18>

08009c8c <_fstat_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_fstat_r+0x20>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	4611      	mov	r1, r2
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	f7f7 fa26 	bl	80010ea <_fstat>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	d102      	bne.n	8009ca8 <_fstat_r+0x1c>
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	b103      	cbz	r3, 8009ca8 <_fstat_r+0x1c>
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	bd38      	pop	{r3, r4, r5, pc}
 8009caa:	bf00      	nop
 8009cac:	240003d8 	.word	0x240003d8

08009cb0 <_isatty_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d06      	ldr	r5, [pc, #24]	; (8009ccc <_isatty_r+0x1c>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	f7f7 fa25 	bl	800110a <_isatty>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_isatty_r+0x1a>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_isatty_r+0x1a>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	240003d8 	.word	0x240003d8

08009cd0 <_init>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	bf00      	nop
 8009cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd6:	bc08      	pop	{r3}
 8009cd8:	469e      	mov	lr, r3
 8009cda:	4770      	bx	lr

08009cdc <_fini>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr
